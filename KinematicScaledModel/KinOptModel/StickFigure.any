AnyFolder StickFigure = 
{  
  AnyIntVar FirstFrameDynamic = Main.ModelSetup.FirstFrame-Main.ModelSetup.DynamicDataSet.Header.FirstFrameNo;
  AnyIntVar FirstFrameStatic = Main.SubjectSpecificData.StaticFrameIndex; 

  AnyFolder Posture = 
  {
    #if IncludeRight == 1
      AnyFolder Right = 
      {
        #if IncludeLeg == 1

          ////// Inititals positions of the static leg markers   ////////

          // Exclude by GSU Cologne
          #if GSUFullBodyMarkerSet == 0      
            AnyVec3 sRPatella = 
            { 
              Main.ModelSetup.StaticData.Points.Markers.RPatella.PosInterpol.Data[0][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers.RPatella.PosInterpol.Data[1][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers.RPatella.PosInterpol.Data[2][..FirstFrameStatic]
            }; // sRPatella
          #endif
          
          AnyVec3 sRThighInferior = 
          { 
            Main.ModelSetup.StaticData.Points.Markers._RTHIGHINFERIOR_.PosInterpol.Data[0][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._RTHIGHINFERIOR_.PosInterpol.Data[1][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._RTHIGHINFERIOR_.PosInterpol.Data[2][..FirstFrameStatic]
          }; // sRThighInferior
          
          AnyVec3 sRThighLateral =  
          { 
            Main.ModelSetup.StaticData.Points.Markers._RTHIGHLATERAL_.PosInterpol.Data[0][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._RTHIGHLATERAL_.PosInterpol.Data[1][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._RTHIGHLATERAL_.PosInterpol.Data[2][..FirstFrameStatic]
          }; // sRThighLateral

          AnyVec3 sRThighSuperior = 
          { 
            Main.ModelSetup.StaticData.Points.Markers._RTHIGHSUPERIOR_.PosInterpol.Data[0][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._RTHIGHSUPERIOR_.PosInterpol.Data[1][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._RTHIGHSUPERIOR_.PosInterpol.Data[2][..FirstFrameStatic]
          }; // sRThighSuperior

          AnyVec3 sRKneeLateral =   
          { 
            Main.ModelSetup.StaticData.Points.Markers._RKNEELATERAL_.PosInterpol.Data[0][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._RKNEELATERAL_.PosInterpol.Data[1][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._RKNEELATERAL_.PosInterpol.Data[2][..FirstFrameStatic]
          }; // sRKneeLateral

          AnyVec3 sRKneeMedial =    
          { 
            Main.ModelSetup.StaticData.Points.Markers._RKNEEMEDIAL_.PosInterpol.Data[0][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._RKNEEMEDIAL_.PosInterpol.Data[1][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._RKNEEMEDIAL_.PosInterpol.Data[2][..FirstFrameStatic]
          }; // sRKneeMedial

          AnyVec3 sRShankInferior = 
          { 
            Main.ModelSetup.StaticData.Points.Markers._RSHANKINFERIOR_.PosInterpol.Data[0][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._RSHANKINFERIOR_.PosInterpol.Data[1][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._RSHANKINFERIOR_.PosInterpol.Data[2][..FirstFrameStatic]
          }; // sRShankInferior

          AnyVec3 sRShankLateral =  
          { 
            Main.ModelSetup.StaticData.Points.Markers._RSHANKLATERAL_.PosInterpol.Data[0][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._RSHANKLATERAL_.PosInterpol.Data[1][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._RSHANKLATERAL_.PosInterpol.Data[2][..FirstFrameStatic]
          }; // sRShankLateral

          AnyVec3 sRTUB =           
          { 
            Main.ModelSetup.StaticData.Points.Markers._RSHANKSUPERIOR_.PosInterpol.Data[0][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._RSHANKSUPERIOR_.PosInterpol.Data[1][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._RSHANKSUPERIOR_.PosInterpol.Data[2][..FirstFrameStatic]
          }; // sRTUB

          AnyVec3 sRAnkleLateral =  
          { 
            Main.ModelSetup.StaticData.Points.Markers._RANKLELATERAL_.PosInterpol.Data[0][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._RANKLELATERAL_.PosInterpol.Data[1][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._RANKLELATERAL_.PosInterpol.Data[2][..FirstFrameStatic]
          }; // sRAnkleLateral

          AnyVec3 sRAnkleMedial =   
          { 
            Main.ModelSetup.StaticData.Points.Markers._RANKLEMEDIAL_.PosInterpol.Data[0][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._RANKLEMEDIAL_.PosInterpol.Data[1][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._RANKLEMEDIAL_.PosInterpol.Data[2][..FirstFrameStatic]
          }; // sRAnkleMedial

          AnyVec3 sRHeel =          
          { 
            Main.ModelSetup.StaticData.Points.Markers._RHEEL_.PosInterpol.Data[0][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._RHEEL_.PosInterpol.Data[1][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._RHEEL_.PosInterpol.Data[2][..FirstFrameStatic]
          }; // sRHeel

          AnyVec3 sRToe =           
          { 
            Main.ModelSetup.StaticData.Points.Markers._RTOE_.PosInterpol.Data[0][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._RTOE_.PosInterpol.Data[1][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._RTOE_.PosInterpol.Data[2][..FirstFrameStatic]
          }; // sRToe
          
          // Exclude by GSU Cologne
          #if GSUFullBodyMarkerSet == 0   
            AnyVec3 sRMidfootSuperior = 
            { 
              Main.ModelSetup.StaticData.Points.Markers.RMidfootSuperior.PosInterpol.Data[0][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers.RMidfootSuperior.PosInterpol.Data[1][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers.RMidfootSuperior.PosInterpol.Data[2][..FirstFrameStatic]
            }; // sRMidfootSuperior
          #endif
          
          AnyVec3 sRMidfootMedial  = 
          { 
            Main.ModelSetup.StaticData.Points.Markers._RMIDFOOTMEDIAL_.PosInterpol.Data[0][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._RMIDFOOTMEDIAL_.PosInterpol.Data[1][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._RMIDFOOTMEDIAL_.PosInterpol.Data[2][..FirstFrameStatic]
          }; // sRMidfootMedial

          AnyVec3 sRMidfootLateral =
          { 
            Main.ModelSetup.StaticData.Points.Markers._RMIDFOOTLATERAL_.PosInterpol.Data[0][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._RMIDFOOTLATERAL_.PosInterpol.Data[1][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._RMIDFOOTLATERAL_.PosInterpol.Data[2][..FirstFrameStatic]
          }; // sRMidfootLateral
          
          // Exclude by GSU Cologne
          #if GSUFullBodyMarkerSet == 0   
            AnyVec3 sRToeMedial =     
            { 
              Main.ModelSetup.StaticData.Points.Markers._RTOEMEDIAL_.PosInterpol.Data[0][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers._RTOEMEDIAL_.PosInterpol.Data[1][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers._RTOEMEDIAL_.PosInterpol.Data[2][..FirstFrameStatic]
            }; // sRToeMedial
          #endif

          AnyVec3 sRToeLateral =    
          { 
            Main.ModelSetup.StaticData.Points.Markers._RTOELATERAL_.PosInterpol.Data[0][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._RTOELATERAL_.PosInterpol.Data[1][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._RTOELATERAL_.PosInterpol.Data[2][..FirstFrameStatic]
          }; // sRToeLateral
          
          // Exclude by GSU Cologne
          #if GSUFullBodyMarkerSet == 0   
            AnyVec3 sRHindfoot =      
            { 
              Main.ModelSetup.StaticData.Points.Markers.RHindfoot.PosInterpol.Data[0][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers.RHindfoot.PosInterpol.Data[1][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers.RHindfoot.PosInterpol.Data[2][..FirstFrameStatic]
            }; // sRHindfoot

            AnyVec3 sRD1M =
            {            
              Main.ModelSetup.StaticData.Points.Markers.RD1M.PosInterpol.Data[0][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers.RD1M.PosInterpol.Data[1][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers.RD1M.PosInterpol.Data[2][..FirstFrameStatic]
            }; // sRD1M

            AnyVec3 sRD5M =
            { 
              Main.ModelSetup.StaticData.Points.Markers.RD5M.PosInterpol.Data[0][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers.RD5M.PosInterpol.Data[1][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers.RD5M.PosInterpol.Data[2][..FirstFrameStatic]
            }; // sRD5M
          #endif

          #ifdef USE_KLIEN_HORSMAN_JOINT_CENTER_OFFSET
            // In principle the ankle center can be any point along the revolute knee joint axis, thus
            // selecting the middle point between the lateral and medial malleous makes sense anatomically. 
            // However, to correspond with the LegTD model the ankle center is chosen 
            // to be a little closer to the medial side.
            AnyVec3 sRAnkleCenter = (0.4796*sRAnkleLateral + 0.5204*sRAnkleMedial);                         
            // In principle the knee center can be any point along the revolute knee joint axis, thus
            // selecting the middle point between the epicondyle makes sense anatomically. 
            // However, to correspond with the LegTD model the knee center is chosen 
            // to be a little closer to the lateral side.
            AnyVec3 sRKneeCenter = (0.6013*sRKneeLateral + 0.3987*sRKneeMedial);
          #else
            AnyVec3 sRAnkleCenter = (sRAnkleLateral + sRAnkleMedial)/2;  
            AnyVec3 sRKneeCenter = (sRKneeLateral + sRKneeMedial)/2;
          #endif

          AnyFolder Leg =
          {
            AnyFolder Thigh = 
            {
            
              //The origin of the  reference frame is found by projecting the 
              // hip-kneeCenter vector to the y axis of the thigh (u2)
              AnyVec3 r0_static = ..sRKneeCenter+ ( ...Trunk.RHipJoint.r0_static-..sRKneeCenter)*(u2/vnorm(u2))'*(u2/vnorm(u2));
              
              // Basis for the thigh coordinate system. 
              // u3 is define by a line though mediala and lateral epicondily makers
              // u1 is a vector pependicular to u3 and HipJoint-sRKneeCenter
              // u2 is the remaining orthonormal direction (cross product of u3, and u1) (y axis of thigh)
              AnyVec3 u3 = (..sRKneeLateral - ..sRKneeCenter );
              AnyVec3 u1 = cross(...Trunk.RHipJoint.r0_static -..sRKneeCenter, u3);
              AnyVec3 u2 = cross(u3,u1);
              
              AnyMatrix Axes0_static= {u1/vnorm(u1), u2/vnorm(u2), u3/vnorm(u3)}';
              
              #if IncludeKnee + IncludeHip > 0    
                CreateLoadPositions InitialPos ( DynamicPos = UseDanamicLoadPosition ) = 
                {
                  // dynamic iCluster 1-3
                  iCluster1 = 
                  { 
                    Main.ModelSetup.DynamicDataSet.Points.Markers._RTHIGHSUPERIOR_.PosInterpol.Data[0][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._RTHIGHSUPERIOR_.PosInterpol.Data[1][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._RTHIGHSUPERIOR_.PosInterpol.Data[2][.....FirstFrameDynamic]
                  }; // dynamic iCluster1

                  iCluster2 = 
                  { 
                    Main.ModelSetup.DynamicDataSet.Points.Markers._RTHIGHINFERIOR_.PosInterpol.Data[0][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._RTHIGHINFERIOR_.PosInterpol.Data[1][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._RTHIGHINFERIOR_.PosInterpol.Data[2][.....FirstFrameDynamic]
                  }; // dynamic iCluster2

                  iCluster3 = 
                  { 
                    Main.ModelSetup.DynamicDataSet.Points.Markers._RTHIGHLATERAL_.PosInterpol.Data[0][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._RTHIGHLATERAL_.PosInterpol.Data[1][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._RTHIGHLATERAL_.PosInterpol.Data[2][.....FirstFrameDynamic]
                  }; // dynamic iCluster3

                  // static sCluster 1-3
                  sCluster1 = ...sRThighSuperior;
                  sCluster2 = ...sRThighInferior;
                  sCluster3 = ...sRThighLateral;
                };
              #endif

              // Exclude by GSU Cologne
              #if GSUFullBodyMarkerSet == 0
                AnyFolder RPatella = 
                {
                  AnyVec3 sRel_static= (.Axes0_static'*(..sRPatella -.r0_static)')';
                };
              #endif

              AnyFolder RThighInferior = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sRThighInferior -.r0_static)')';
              }; // RThighInferior

              AnyFolder RThighLateral = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sRThighLateral -.r0_static)')';
              }; // RThighLateral
              
              AnyFolder RThighSuperior = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sRThighSuperior -.r0_static)')';
              }; // RThighSuperior
              
              AnyFolder RKneeLateral = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sRKneeLateral -.r0_static)')';
              }; // RKneeLateral
              
              AnyFolder RKneeMedial = 
              {
                AnyVec3 sRel_static= ( .Axes0_static'*(...sRKneeMedial -.r0_static)')';
              }; // RKneeMedial
              
              AnyFolder HipJoint = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(....Trunk.RHipJoint.r0_static - .r0_static)')';
              }; // HipJoint
              
              AnyFolder KneeJoint = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sRKneeCenter - .r0_static)')';
                AnyMat33 ARel_static = {{1,0,0},{0,1,0},{0,0,1}};
                
                RotAxisAnglesXYZ RotAxisAngles(ROT=ARel_static)={};
              }; // KneeJoint
            
              #if IncludeRight == 1
                #if IncludeHip + IncludeKnee > 0

                  AnyFolder &ThighRef = .....FullModel.Right.Leg.Seg.Thigh;

                  ThighRef = 
                  {            
                    // Exclude by GSU Cologne
                    #if GSUFullBodyMarkerSet == 0
                      AnyRefNode RPatella = {sRel= ..RPatella.sRel_static;};
                    #endif

                    AnyRefNode RThighInferior = {sRel= ..RThighInferior.sRel_static;};
                    AnyRefNode RThighLateral = {sRel = ..RThighLateral.sRel_static;};
                    AnyRefNode RThighSuperior = {sRel = ..RThighSuperior.sRel_static;};
                    AnyRefNode RKneeLateral = {sRel = ..RKneeLateral.sRel_static;};
                    AnyRefNode RKneeMedial = {sRel = ..RKneeMedial.sRel_static;};
                    
                    /// Defined based on ISB recommendation for HIP joint rotations
                    AnyRefNode HipStaticMarkerFrame = 
                    {
                      AnyVec3 O = ..HipJoint.sRel_static ;
                      AnyVec3 Y = O - 0.5*(..RKneeLateral.sRel_static + ..RKneeMedial.sRel_static) ;
                      AnyVec3 X = cross(Y,..RKneeLateral.sRel_static -..RKneeMedial.sRel_static );
                      AnyVec3 Z = cross(X,Y);
                      sRel = O;
                      ARel = {X/vnorm(X),Y/vnorm(Y),Z/vnorm(Z)}';
                    }; // HipStaticMarkerFrame

                    /// Defined based on Pennock and Clark (1990). Contrary to Grood&Suntay, they use a Z rotaition
                    /// which align with the epicondyle line. 
                    AnyRefNode KneeStaticMarkerFrame = 
                    {
                      AnyVec3 O = 0.5*(..RKneeMedial.sRel_static + ..RKneeLateral.sRel_static);
                      AnyVec3 Z = ..RKneeLateral.sRel_static - ..RKneeMedial.sRel_static;
                      AnyVec3 X = cross( ..HipJoint.sRel_static - O, Z);
                      AnyVec3 Y = cross(Z,X);
                      sRel = O;
                      ARel = {X/vnorm(X),Y/vnorm(Y),Z/vnorm(Z)}';
                      //AnyDrawRefFrame drw = {RGB = {1,0,0}; };
                    }; // KneeStaticMarkerFrame
                    
                    // Knee joint coordinate system with y-axis pointing from knee center to hip joint center
                    // z-axis perpendicular to y and pointing towards the lateral epicondyle
                    // x-cross product of y and z
                    AnyRefNode KneeJointCoordinateSystemMechanicalAxis = 
                    {
                      sRel = 0.5*(..RKneeMedial.sRel_static + ..RKneeLateral.sRel_static);
                      ARel = RotMat(sRel,..HipJoint.sRel_static,..RKneeLateral.sRel_static)*RotMat(-pi/2,x)*RotMat(-pi/2,z);
                      //AnyDrawRefFrame drw ={RGB={0,1,0};};
                    }; // KneeJointCoordinateSystemMechanicalAxis
                  }; // ThighRef
                #endif // IncludeHip + IncludeKnee
              #endif // IncludeRight
            }; // Thigh
          
            AnyFolder Shank = 
            {

              //The origin of the  reference frame is found by projecting the 
              // kneeCenter-ankleCenter vector onto the y axis of the shank (u2)
              AnyVec3 r0_static = ..sRAnkleCenter+ ( ..sRKneeCenter- ..sRAnkleCenter )*(u2/vnorm(u2))'*(u2/vnorm(u2));      
              
              // Basis for the thigh coordinate system. 
              // u3 is define by a line though mediala and lateral malleolus makers
              // u1 is a vector pependicular to u3 and the sRKneeCenter-sRAnkleCenter vector
              // u2 is the remaining orthonormal direction (cross product of u3, and u1) (y axis of shank)
              AnyVec3 u3 = (..sRAnkleLateral - ..sRAnkleCenter) ;
              AnyVec3 u1 = cross(..sRKneeCenter - ..sRAnkleCenter, u3);
              AnyVec3 u2 = cross(u3,u1);

              AnyMatrix Axes0_static = {u1/vnorm(u1), u2/vnorm(u2), u3/vnorm(u3)}';
              
              #if IncludeKnee + IncludeAnkle > 0
                CreateLoadPositions InitialPos( DynamicPos = UseDanamicLoadPosition )  = 
                {
                    iCluster1 = 
                    { 
                      Main.ModelSetup.DynamicDataSet.Points.Markers._RSHANKSUPERIOR_.PosInterpol.Data[0][.....FirstFrameDynamic],
                      Main.ModelSetup.DynamicDataSet.Points.Markers._RSHANKSUPERIOR_.PosInterpol.Data[1][.....FirstFrameDynamic],
                      Main.ModelSetup.DynamicDataSet.Points.Markers._RSHANKSUPERIOR_.PosInterpol.Data[2][.....FirstFrameDynamic]
                    }; // dynamic iCluster1

                    iCluster2 = 
                    { 
                      Main.ModelSetup.DynamicDataSet.Points.Markers._RSHANKINFERIOR_.PosInterpol.Data[0][.....FirstFrameDynamic],
                      Main.ModelSetup.DynamicDataSet.Points.Markers._RSHANKINFERIOR_.PosInterpol.Data[1][.....FirstFrameDynamic],
                      Main.ModelSetup.DynamicDataSet.Points.Markers._RSHANKINFERIOR_.PosInterpol.Data[2][.....FirstFrameDynamic]
                    }; // dynamic iCluster2

                    iCluster3 = 
                    { 
                      Main.ModelSetup.DynamicDataSet.Points.Markers._RSHANKLATERAL_.PosInterpol.Data[0][.....FirstFrameDynamic],
                      Main.ModelSetup.DynamicDataSet.Points.Markers._RSHANKLATERAL_.PosInterpol.Data[1][.....FirstFrameDynamic],
                      Main.ModelSetup.DynamicDataSet.Points.Markers._RSHANKLATERAL_.PosInterpol.Data[2][.....FirstFrameDynamic]
                    }; // dynamic iCluster3
                    
                    // static sCluster1-3
                    sCluster1 = ...sRTUB;
                    sCluster2 = ...sRShankInferior;
                    sCluster3 = ...sRShankLateral;
                }; // CreateLoadPositions
              #endif // IncludeKnee + IncludeAnkle
              
              // Exclude by GSU Cologne
              #if GSUFullBodyMarkerSet == 0
                AnyFolder RPatella = 
                {
                  AnyVec3 sRel_static= (.Axes0_static'*(..sRPatella -.r0_static)')';
                }; // RPatella
              #endif // GSUFullBodyMarkerSet
              
              AnyFolder RKneeLateral = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sRKneeLateral -.r0_static)')';
              }; // RKneeLateral

              AnyFolder RKneeMedial = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sRKneeMedial -.r0_static)')';
              }; // RKneeMedial

              AnyFolder RShankInferior = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sRShankInferior -.r0_static)')';
              }; // RShankInferior

              AnyFolder RShankLateral = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sRShankLateral -.r0_static)')';
              }; // RShankLateral

              AnyFolder RTUB = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sRTUB -.r0_static)')';
              }; // RTUB

              AnyFolder RAnkleLateral = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sRAnkleLateral -.r0_static)')';
              }; // RAnkleLateral

              AnyFolder RAnkleMedial = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sRAnkleMedial -.r0_static)')';
              }; // RAnkleMedial

              AnyFolder AnkleJoint = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sRAnkleCenter -.r0_static)')';
                AnyMat33 ARel_static = {{1,0,0},{0,1,0},{0,0,1}};
                RotAxisAnglesXYZ RotAxisAngles(ROT=ARel_static)={};
              }; // AnkleJoint

              AnyFolder HipJoint = 
              {
                AnyVec3 sRel_static=  (.Axes0_static'*(....Trunk.RHipJoint.r0_static - .r0_static)')';
              }; // HipJoint

              AnyFolder KneeJoint = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sRKneeCenter - .r0_static)')';       
                AnyMat33 ARel_static = RotMat(sRel_static, .RKneeLateral.sRel_static,.HipJoint.sRel_static)* RotMat(90*pi/180,y);
                
                RotAxisAnglesXYZ RotAxisAngles(ROT=ARel_static)={};       
              }; // KneeJoint      
              
              #if IncludeRight == 1
                #if IncludeKnee + IncludeAnkle > 0 
                  AnyFolder &ShankRef = .....FullModel.Right.Leg.Seg.Shank;
                  
                  ShankRef = 
                  {
                    AnyRefNode RShankInferior = 
                    {
                      sRel = ..RShankInferior.sRel_static;
                    }; // RShankInferior

                    AnyRefNode RShankLateral = 
                    {
                      sRel = ..RShankLateral.sRel_static;
                    }; // RShankLateral

                    AnyRefNode RTUB = 
                    {
                      sRel = ..RTUB.sRel_static;
                    }; // RTUB

                    AnyRefNode RAnkleLateral = 
                    {
                      sRel = ..RAnkleLateral.sRel_static;
                    }; // RAnkleLateral

                    AnyRefNode RAnkleMedial = 
                    {
                      sRel = ..RAnkleMedial.sRel_static;
                    }; // RAnkleMedial

                    // Exclude by GSU Cologne
                    #if GSUFullBodyMarkerSet == 0
                      AnyRefNode RPatella = 
                      {
                        sRel = ..RPatella.sRel_static;
                      }; // RPatella
                    #endif

                    AnyRefNode RKneeLateral = 
                    {
                      sRel = ..RKneeLateral.sRel_static;
                    }; // RKneeLateral
                    AnyRefNode RKneeMedial =
                    {
                      sRel = ..RKneeMedial.sRel_static;
                    }; // RKneeMedial

                    AnyRefNode AnkleStaticMarkerFrame = 
                    {
                      AnyVec3 O = 0.5*(..RAnkleMedial.sRel_static + ..RAnkleLateral.sRel_static);
                      AnyVec3 Z = (..RAnkleLateral.sRel_static - ..RAnkleMedial.sRel_static) ;
                      AnyVec3 X = cross( 0.5*(..RKneeMedial.sRel_static+..RKneeLateral.sRel_static)-..RAnkleLateral.sRel_static,
                                        ..RAnkleLateral.sRel_static - ..RAnkleMedial.sRel_static);  
                      AnyVec3 Y = cross(Z,X); 
                      sRel = O;
                      ARel = {X/vnorm(X),Y/vnorm(Y),Z/vnorm(Z)}';
                      //AnyDrawRefFrame drw = {RGB = {1,0,1}; };
                    }; // AnkleStaticMarkerFrame

                    /// Defined based on Pennock and Clark (1990). Contrary to Grood&Suntay, they use a Z rotaition
                    /// which align with the epicondyle line. 
                    AnyRefNode KneeStaticMarkerFrame = 
                    {
                      AnyVec3 O = 0.5*(..RKneeMedial.sRel_static + ..RKneeLateral.sRel_static);
                      AnyVec3 Z = ..RKneeLateral.sRel_static - ..RKneeMedial.sRel_static ;
                      AnyVec3 X = cross(Z,0.5*(..RAnkleLateral.sRel_static+..RAnkleMedial.sRel_static) - O);  
                      AnyVec3 Y = cross(Z,X); 
                      sRel = O;
                      ARel = {X/vnorm(X),Y/vnorm(Y),Z/vnorm(Z)}';
                      //AnyDrawRefFrame drw = {RGB = {1,0,1}; };
                    }; // KneeStaticMarkerFrame
                    
                    /// Knee joint coordinate system with y-axis pointing from ankle center to knee joint center
                    /// z-axis perpendicular to y and pointing towards the lateral epicondyle
                    /// x-cross product of y and z
                    AnyRefNode KneeJointCoordinateSystemMechanicalAxis = 
                    {
                      sRel = 0.5*(..RKneeMedial.sRel_static + ..RKneeLateral.sRel_static);
                      ARel = RotMat(0.5*(..RAnkleMedial.sRel_static + ..RAnkleLateral.sRel_static),sRel,..RKneeLateral.sRel_static)*RotMat(-pi/2,x)*RotMat(-pi/2,z);
                      //AnyDrawRefFrame drw ={RGB={0,1,0};};
                    }; // KneeJointCoordinateSystemMechanicalAxis   
                  }; // ShankRef
                #endif // IncludeKnee + IncludeAnkle
              #endif // IncludeRight
            }; // Shank
            
            AnyFolder Talus = 
            {
              AnyVec3 r0_static = ..sRAnkleCenter;
              
              AnyVec3 u3 = (..sRAnkleLateral -..sRAnkleCenter );
              AnyVec3 u2 = cross(u3,.Foot.SubtalarJoint.ARel_static'[0]*.Foot.Axes0_static');
              AnyVec3 u1 = cross(u2,u3);
              
              AnyMat33 Axes0_static = {u1/vnorm(u1), u2/vnorm(u2), u3/vnorm(u3)}';
              
              #if IncludeAnkle == 1
                CreateLoadPositions InitialPos( DynamicPos = UseDanamicLoadPosition ) = 
                {
                    iCluster1 = 
                    { 
                      Main.ModelSetup.DynamicDataSet.Points.Markers._RHEEL_.PosInterpol.Data[0][.....FirstFrameDynamic],
                      Main.ModelSetup.DynamicDataSet.Points.Markers._RHEEL_.PosInterpol.Data[1][.....FirstFrameDynamic],
                      Main.ModelSetup.DynamicDataSet.Points.Markers._RHEEL_.PosInterpol.Data[2][.....FirstFrameDynamic]
                    }; // iCluster1

                    iCluster2 = 
                    { 
                      Main.ModelSetup.DynamicDataSet.Points.Markers._RTOE_.PosInterpol.Data[0][.....FirstFrameDynamic],
                      Main.ModelSetup.DynamicDataSet.Points.Markers._RTOE_.PosInterpol.Data[1][.....FirstFrameDynamic],
                      Main.ModelSetup.DynamicDataSet.Points.Markers._RTOE_.PosInterpol.Data[2][.....FirstFrameDynamic]
                    }; // iCluster2
                    
                    iCluster3 = 
                    { 
                      Main.ModelSetup.DynamicDataSet.Points.Markers._RMIDFOOTLATERAL_.PosInterpol.Data[0][.....FirstFrameDynamic],
                      Main.ModelSetup.DynamicDataSet.Points.Markers._RMIDFOOTLATERAL_.PosInterpol.Data[1][.....FirstFrameDynamic],
                      Main.ModelSetup.DynamicDataSet.Points.Markers._RMIDFOOTLATERAL_.PosInterpol.Data[2][.....FirstFrameDynamic]
                    }; // iCluster3
                    
                    sCluster1 = ...sRHeel;
                    sCluster2 = ...sRToe;
                    sCluster3 = ...sRMidfootLateral;
                }; // CreateLoadPositions
              #endif // IncludeAnkle
              
              AnyFolder AnkleJoint = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*( ...sRAnkleCenter -.r0_static)')';
                AnyMat33 ARel_static = .Axes0_static'*..Shank.Axes0_static;
                
                RotAxisAnglesXYZ RotAxisAngles(ROT=ARel_static)={};
              }; // AnkleJoint

              AnyFolder SubtalarJoint = 
              {
                // Transform subtalarjoint out of foot coordianates and into talus coordinates
                AnyVec3 sRel_static= (..Foot.r0_static+ ..Foot.SubtalarJoint.sRel_static*..Foot.Axes0_static'-.r0_static)*.Axes0_static;
                AnyMat33 ARel_static = .Axes0_static'*(..Foot.Axes0_static*..Foot.SubtalarJoint.ARel_static)  ;   
                
                RotAxisAnglesXYZ RotAxisAngles(ROT=ARel_static)={};        
              }; // SubtalarJoint

              AnyFolder RAnkleLateral = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sRAnkleLateral -.r0_static)')';
              }; // RAnkleLateral

              AnyFolder RAnkleMedial = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sRAnkleMedial -.r0_static)')';
              }; // RAnkleMedial

              AnyFolder RKneeCenter = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sRKneeCenter -.r0_static)')';
              }; // RKneeCenter   
              
              #if IncludeRight == 1  
                #if IncludeAnkle == 1
                  AnyFolder &TalusRef = .....FullModel.Right.Leg.Seg.Talus;
                  TalusRef = 
                  {
                    AnyRefNode RKneeCenter = 
                    {
                      sRel = ..RKneeCenter.sRel_static;
                    }; // RKneeCenter
                  }; // TalusRef
                #endif // IncludeAnkle
              #endif // IncludeRight
              
            }; // Talus
                
            AnyFolder Foot = 
            {
              // Initial Segment position
              AnyVec3 r0_static = ..sRHeel; 
              
              // Foot Cordianate system changed to follow the lab, with x axis pointing to toe node
              AnyVec3 u2 = {0,0,1};
              AnyVec3 u3 = cross(..sRToe-..sRHeel,u2);
              AnyVec3 u1 = cross(u2,u3);
              
              AnyMatrix Axes0_static = {u1/vnorm(u1), u2/vnorm(u2), u3/vnorm(u3)}';
              
              #if IncludeAnkle == 1
                CreateLoadPositions InitialPos( DynamicPos = UseDanamicLoadPosition ) = 
                {
                    iCluster1 = 
                    { 
                      Main.ModelSetup.DynamicDataSet.Points.Markers._RHEEL_.PosInterpol.Data[0][.....FirstFrameDynamic],
                      Main.ModelSetup.DynamicDataSet.Points.Markers._RHEEL_.PosInterpol.Data[1][.....FirstFrameDynamic],
                      Main.ModelSetup.DynamicDataSet.Points.Markers._RHEEL_.PosInterpol.Data[2][.....FirstFrameDynamic]
                    }; // dynamic iCluster1
                    
                    iCluster2 = 
                    { 
                      Main.ModelSetup.DynamicDataSet.Points.Markers._RTOE_.PosInterpol.Data[0][.....FirstFrameDynamic],
                      Main.ModelSetup.DynamicDataSet.Points.Markers._RTOE_.PosInterpol.Data[1][.....FirstFrameDynamic],
                      Main.ModelSetup.DynamicDataSet.Points.Markers._RTOE_.PosInterpol.Data[2][.....FirstFrameDynamic]
                    }; // dynamic iCluster2
                    
                    iCluster3 = 
                    { 
                      Main.ModelSetup.DynamicDataSet.Points.Markers._RMIDFOOTLATERAL_.PosInterpol.Data[0][.....FirstFrameDynamic],
                      Main.ModelSetup.DynamicDataSet.Points.Markers._RMIDFOOTLATERAL_.PosInterpol.Data[1][.....FirstFrameDynamic],
                      Main.ModelSetup.DynamicDataSet.Points.Markers._RMIDFOOTLATERAL_.PosInterpol.Data[2][.....FirstFrameDynamic]
                    }; // dynamic iCluster3
                    
                    // static sCluster 1-3
                    sCluster1 = ...sRHeel;
                    sCluster2 = ...sRToe;
                    sCluster3 = ...sRMidfootLateral;
                }; // CreateLoadPositions
              #endif // IncludeAnkle
              
              
              AnyFolder RKneeCenter = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sRKneeCenter -.r0_static)')';
              }; // RKneeCenter

              AnyFolder RKneeMedial = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sRKneeMedial -.r0_static)')';
              }; // RKneeMedial

              AnyFolder RKneeLateral = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sRKneeLateral -.r0_static)')';
              }; // RKneeLateral

              AnyFolder RHeel = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sRHeel -.r0_static)')';
              }; // RHeel

              // Exclude by GSU Cologne
              #if GSUFullBodyMarkerSet == 0
                AnyFolder RHindfoot = 
                {
                  AnyVec3 sRel_static= (.Axes0_static'*(..sRHindfoot -.r0_static)')';
                }; // RHindfoot
              #endif // GSUFullBodyMarkerSet

              AnyFolder RToe = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sRToe -.r0_static)')';
              }; // RToe

              // Exclude by GSU Cologne
              #if GSUFullBodyMarkerSet == 0
                AnyFolder RMidfootSuperior  = 
                {
                  AnyVec3 sRel_static= (.Axes0_static'*(..sRMidfootSuperior -.r0_static)')';
                }; // RMidfootSuperior
              #endif // GSUFullBodyMarkerSet

              AnyFolder RMidfootLateral  = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sRMidfootLateral  -.r0_static)')';
              }; // RMidfootLateral

              AnyFolder RMidfootMedial  = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sRMidfootMedial -.r0_static)')';
              }; // RMidfootMedial

              // Exclude by GSU Cologne
              #if GSUFullBodyMarkerSet == 0
                AnyFolder RToeMedial  = 
                {
                  AnyVec3 sRel_static= (.Axes0_static'*(..sRToeMedial -.r0_static)')';
                }; // RToeMedial
              #endif // GSUFullBodyMarkerSet

              AnyFolder RToeLateral  = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sRToeLateral  -.r0_static)')';
              }; // RToeLateral
              
              AnyFolder AnkleJoint = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sRAnkleCenter -.r0_static)')';
                AnyMat33 ARel_static = .Axes0_static'*..Talus.Axes0_static;
              }; // AnkleJoint

              AnyFolder SubtalarJoint = 
              {
                AnyVar zRot = 42*pi/180;
                AnyVar yRot = (1)*25*pi/180;
                AnyVar zPos = (1)*0.00;
                AnyVar yPos = -0.01;
                AnyVec3 sRel_static = .AnkleJoint.sRel_static +yPos *cross(.AnkleJoint.ARel_static'[2],ARel_static'[0]) + zPos* .AnkleJoint.ARel_static'[2];
                AnyMat33 ARel_static = RotMat(yRot,y)*RotMat(zRot,z);
                
                RotAxisAnglesXYZ RotAxisAngles(ROT=ARel_static)={};
              }; // SubtalarJoint
              
              AnyFolder RAnkleLateral = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sRAnkleLateral -.r0_static)')';
              }; // RAnkleLateral

              AnyFolder RAnkleMedial = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sRAnkleMedial -.r0_static)')';
              }; // RAnkleMedial      
              
              
              #if IncludeRight == 1  
                #if IncludeAnkle == 1
                  AnyFolder &FootRef = .....FullModel.Right.Leg.Seg.Foot;
              
                  FootRef = 
                  {
                    AnyRefNode RHeel = 
                    {
                     sRel = ..RHeel.sRel_static;
                    }; // RHeel

                    // Exclude by GSU Cologne
                    #if GSUFullBodyMarkerSet == 0
                      AnyRefNode RHindfoot = 
                      {
                          sRel = ..RHindfoot.sRel_static;
                      }; 
                    #endif // GSUFullBodyMarkerSet

                    AnyRefNode RToe = 
                    {
                      sRel = ..RToe.sRel_static;
                    }; // RToe
                    
                    // Exclude by GSU Cologne
                    #if GSUFullBodyMarkerSet == 0
                      AnyRefNode RMidfootSuperior = 
                      {
                        sRel = ..RMidfootSuperior.sRel_static;
                      }; // RMidfootSuperior
                    #endif // GSUFullBodyMarkerSet

                    AnyRefNode RMidfootLateral = 
                    {
                      sRel = ..RMidfootLateral.sRel_static;
                    }; // RMidfootLateral

                    AnyRefNode RMidfootMedial = 
                    {
                      sRel = ..RMidfootMedial.sRel_static;
                    }; // RMidfootMedial
                    
                    // Exclude by GSU Cologne
                    #if GSUFullBodyMarkerSet == 0
                      AnyRefNode RToeMedial = 
                      {
                        sRel = ..RToeMedial.sRel_static;
                      }; // RToeMedial
                    #endif // GSUFullBodyMarkerSet
                    
                    AnyRefNode RToeLateral = 
                    {
                      sRel = ..RToeLateral.sRel_static;
                    }; // RToeLateral
                    
                    AnyRefNode RAnkleLateral = 
                    {
                      sRel = ..RAnkleLateral.sRel_static;
                    }; // RAnkleLateral
                    
                    AnyRefNode RAnkleMedial = 
                    {
                      sRel = ..RAnkleMedial.sRel_static;
                    }; // RAnkleMedial
                    
                    AnyRefNode AnkleStaticMarkerFrame = 
                    {
                      AnyVec3 O = 0.5*(..RAnkleMedial.sRel_static + ..RAnkleLateral.sRel_static);
                      AnyVec3 Y =  0.5*(..RKneeMedial.sRel_static + ..RKneeLateral.sRel_static)-
                                  0.5*(..RAnkleMedial.sRel_static + ..RAnkleLateral.sRel_static);
                      AnyVec3 X = cross( ..RKneeLateral.sRel_static-..RKneeMedial.sRel_static,
                                        0.5*(..RAnkleLateral.sRel_static + ..RAnkleMedial.sRel_static)-..RKneeLateral.sRel_static);  
                      AnyVec3 Z = cross(X,Y); 
                      sRel = O;
                      ARel = {X/vnorm(X),Y/vnorm(Y),Z/vnorm(Z)}';
                      //AnyDrawRefFrame drw = {RGB = {1,0,0}; };
                    }; // AnkleStaticMarkerFrame                 
                  }; // FootRef
                #endif // IncludeAnkle
              #endif // IncludeRight       
            }; // Foot
          }; // Leg
        #endif // IncludeLegs

        #if IncludeArm == 1
          // Initialize static markers for the arm segments
          #if IncludeShoulder == 1
            // AC: Acromion
            AnyVec3 sRAcromion = 
            { 
              Main.ModelSetup.StaticData.Points.Markers._RACROMION_.PosInterpol.Data[0][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers._RACROMION_.PosInterpol.Data[1][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers._RACROMION_.PosInterpol.Data[2][..FirstFrameStatic]
            }; // sRAcromion

            AnyVec3 sRArticulatioAcromioClavicularis = 
            { 
              Main.ModelSetup.StaticData.Points.Markers._RACROMION_.PosInterpol.Data[0][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers._RACROMION_.PosInterpol.Data[1][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers._RACROMION_.PosInterpol.Data[2][..FirstFrameStatic]
            }; // sRArticulatioAcromioClavicularis

            // Estimation of the Sternoclavicular (SC) joint center from the Incisura jugularis (IJ) 
            // based on the values for a 57 year old right muscular male shoulder with an estimated 
            // body length of 168 cm provided by Klein Breteler, M. D., Spoor, C. W., & van der Helm, F. C.T. (1999)
            // Values are provided in centimetre [cm]
            #if USE_KLEIN_BRETELER_SC_JOINT_CENTER_ESTIMATION == 1            
              // REDO with tranformation from LCS to GSC           
              // AnyVec3 sRArticulatioSternoClavicularis = 
              // {
                // (Main.ModelSetup.StaticData.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[0][..FirstFrameStatic]+2.45/100),
                // (Main.ModelSetup.StaticData.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[1][..FirstFrameStatic]+2.25/100),
                // (Main.ModelSetup.StaticData.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[2][..FirstFrameStatic]-0.80/100)
              // }; // sRArticulatioSternoClavicularis
              AnyVec3 sRArticulatioSternoClavicularis = .Trunk.Thorax.RArticulatioSternoClavicularis.sRel_gcs;
            #else
              AnyVec3 sRArticulatioSternoClavicularis = 
              {
                (Main.ModelSetup.StaticData.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[0][..FirstFrameStatic]),
                (Main.ModelSetup.StaticData.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[1][..FirstFrameStatic]),
                (Main.ModelSetup.StaticData.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[2][..FirstFrameStatic])
              }; // sRArticulatioSternoClavicularis
              //AnyVec3 sRArticulatioSternoClavicularis = Trunk.Thorax.sRArticulatioSternoClavicularis.sRel_gcs;         

            #endif // USE_KLEIN_BRETELER_SC_JOINT_CENTER_ESTIMATION

            // Estimation of the Trigonum spinae scapulae (TS), Angulus inferior (AI) and Angulus acromii (AA)
            // based on values from subject 2 in respect to the Incisura jugularis (IJ). Values are provided by
            // Van der Helm, F.C.T., Veeger, H.E.J., Pronk, G. M., van der Woude, L.H.V., & Rozendal, R. H. (1992)
            // Values are provided in millimetre [mm]
            #if USE_VAN_DER_HELM_SCAPULA_ESTIMATION == 1        
              // REDO with tranformation from LCS to GSC           
              AnyVec3 sRTrigonumSpinaeScapulae = 
              {
                (Main.ModelSetup.StaticData.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[0][..FirstFrameStatic]-163.3/1000),
                (Main.ModelSetup.StaticData.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[1][..FirstFrameStatic]-86.8/1000),
                (Main.ModelSetup.StaticData.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[2][..FirstFrameStatic]+0.1/1000)
              };

              AnyVec3 sRAngulusInferior = 
              {
                (Main.ModelSetup.StaticData.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[0][..FirstFrameStatic]-159.9/1000),
                (Main.ModelSetup.StaticData.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[1][..FirstFrameStatic]-119/1000),
                (Main.ModelSetup.StaticData.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[2][..FirstFrameStatic]-108.5/1000)
              };

              AnyVec3 sRAngulusAcromii = 
              {
                (Main.ModelSetup.StaticData.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[0][..FirstFrameStatic]-86.6/1000),
                (Main.ModelSetup.StaticData.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[1][..FirstFrameStatic]-192.3/1000),
                (Main.ModelSetup.StaticData.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[2][..FirstFrameStatic]+50.9/1000)
              };

              // If TS, AI and AA are part of the markerset, markers will be used directly  
            #else
              AnyVec3 sRTrigonumSpinaeScapulae = 
              {
                (Main.ModelSetup.StaticData.Points.Markers._RTRIGONUMSPINAESCAPULAE_.PosInterpol.Data[0][..FirstFrameStatic]),
                (Main.ModelSetup.StaticData.Points.Markers._RTRIGONUMSPINAESCAPULAE_.PosInterpol.Data[1][..FirstFrameStatic]),
                (Main.ModelSetup.StaticData.Points.Markers._RTRIGONUMSPINAESCAPULAE_.PosInterpol.Data[2][..FirstFrameStatic])
              };

              AnyVec3 sRAngulusInferior = 
              {
                (Main.ModelSetup.StaticData.Points.Markers._RANGULUSINFERIOR_.PosInterpol.Data[0][..FirstFrameStatic]),
                (Main.ModelSetup.StaticData.Points.Markers._RANGULUSINFERIOR_.PosInterpol.Data[1][..FirstFrameStatic]),
                (Main.ModelSetup.StaticData.Points.Markers._RANGULUSINFERIOR_.PosInterpol.Data[2][..FirstFrameStatic])
              };

              AnyVec3 sRAngulusAcromii = 
              {
                (Main.ModelSetup.StaticData.Points.Markers._RANGULUSACROMII_.PosInterpol.Data[0][..FirstFrameStatic]),
                (Main.ModelSetup.StaticData.Points.Markers._RANGULUSACROMII_.PosInterpol.Data[1][..FirstFrameStatic]),
                (Main.ModelSetup.StaticData.Points.Markers._RANGULUSACROMII_.PosInterpol.Data[2][..FirstFrameStatic])
              };              
            #endif // USE_VAN_DER_HELM_SCAPULA_ESTIMATION
          #endif // IncludeShoulder

          #if IncludeShoulder == 1 | IncludeElbow == 1

            // Estimation of the Glenohumeral (GH) joint center based on the multiple regression model 
            // provided by Meskers, C.G.M., van der Helm, F. C. T., Rozendaal, L. A., & Rozing, P. M. (1997). 
            // In vivo estimation of the glenohumeral joint rotation center from scapular bony landmarks 
            // by linear regression. Journal of Biomechanics, 31(1), 93–96. 
            // https://doi.org/10.1016/S0021-9290(97)00101-2
            // Marker set must contain markers for Trigonum Spinae Scapulae (TS), Angulus Inferior (AI), 
            // Angulus Acromialis (AA) and processus coracoideus (PC)
            #if USE_MESKERS_GH_JOINT_CENTER_ESTIMATION == 1
              AnyVec3 sRProcessusCoracoideus = 
              {
                (Main.ModelSetup.StaticData.Points.Markers._RPROCESSUSCORACOIDEUS_.PosInterpol.Data[0][..FirstFrameStatic]),
                (Main.ModelSetup.StaticData.Points.Markers._RPROCESSUSCORACOIDEUS_.PosInterpol.Data[1][..FirstFrameStatic]),
                (Main.ModelSetup.StaticData.Points.Markers._RPROCESSUSCORACOIDEUS_.PosInterpol.Data[2][..FirstFrameStatic])
              }; // sRProcessusCoracoideus

              AnyVec3 sRArticulatioGlenoHumeralis = Arm.Scapula.RArticulatioGlenoHumeralis.sRel_gcs;         
            #endif // USE_MESKERS_GH_JOINT_CENTER_ESTIMATION

            // Estimation of the Glenohumeral (GH) joint center from the Incisura jugularis (IJ) 
            // based on the values for a 57 year old right muscular male shoulder with an estimated 
            // body length of 168 cm provided by Klein Breteler, M. D., Spoor, C. W., & van der Helm, F. C.T. (1999)
            // right values were mirrored to the left by changing the sign of the medio lateral axis
            #if USE_KLEIN_BRETELER_GH_JOINT_CENTER_ESTIMATION == 1
              
              // REDO with tranformation from LCS to GSC           
              AnyVec3 sRArticulatioGlenoHumeralis = 
              { 
                (Main.ModelSetup.StaticData.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[0][..FirstFrameStatic]+8.11/100),
                (Main.ModelSetup.StaticData.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[1][..FirstFrameStatic]+16.37/100),
                (Main.ModelSetup.StaticData.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[2][..FirstFrameStatic]-1.79/100)
              }; // sRArticulatioGlenoHumeralis
            #endif // USE_KLEIN_BRETELER_GH_JOINT_CENTER_ESTIMATION

            // Estimation of the Glenohumeral (GH) joint center
            // based on values from subject 2 in respect to the Incisura jugularis (IJ). Values are provided by
            // Van der Helm, F.C.T., Veeger, H.E.J., Pronk, G. M., van der Woude, L.H.V., & Rozendal, R. H. (1992) 
            #if USE_VAN_DER_HELM_GH_JOINT_CENTER_ESTIMATION == 1
              AnyVec3 sRArticulatioGlenoHumeralis = 
              { 
                (Main.ModelSetup.StaticData.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[0][..FirstFrameStatic]+61.6/1000),
                (Main.ModelSetup.StaticData.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[1][..FirstFrameStatic]+183.2/1000),
                (Main.ModelSetup.StaticData.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[2][..FirstFrameStatic]+13.8/1000)
              }; // sRArticulatioGlenoHumeralis
            #endif // USE_VAN_DER_HELM_GH_JOINT_CENTER_ESTIMATION
            
            // GH: Articulatio glenohumeralis rotation center, estimated by the use of acromion (AC) marker and tuberculum majus (TM) marker. 
            // GH(x) = AC(x), GH(y) = TM(y), GH(z) = 0.5 * (AC(z) + TM(z))
            #if USE_MESKERS_GH_JOINT_CENTER_ESTIMATION == 0 & USE_KLEIN_BRETELER_GH_JOINT_CENTER_ESTIMATION == 0 & USE_VAN_DER_HELM_GH_JOINT_CENTER_ESTIMATION == 0
              AnyVec3 sRArticulatioGlenoHumeralis = 
              { 
                Main.ModelSetup.StaticData.Points.Markers._RACROMION_.PosInterpol.Data[0][..FirstFrameStatic],
                Main.ModelSetup.StaticData.Points.Markers._RTUBERCULUMMAJUS_.PosInterpol.Data[1][..FirstFrameStatic],
                (0.5* ( Main.ModelSetup.StaticData.Points.Markers._RACROMION_.PosInterpol.Data[2][..FirstFrameStatic]
                      + Main.ModelSetup.StaticData.Points.Markers._RTUBERCULUMMAJUS_.PosInterpol.Data[2][..FirstFrameStatic]))
              }; // sRArticulatioGlenoHumeralis
            #endif // USE_MESKERS_GH_JOINT_CENTER_ESTIMATION, USE_KLEIN_BRETELER_GH_JOINT_CENTER_ESTIMATION and 
            // USE_VAN_DER_HELM_GH_JOINT_CENTER_ESTIMATION == 0

            // TM: Tuberculum majus
            AnyVec3 sRTuberculumMajus = 
            { 
              Main.ModelSetup.StaticData.Points.Markers._RTUBERCULUMMAJUS_.PosInterpol.Data[0][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers._RTUBERCULUMMAJUS_.PosInterpol.Data[1][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers._RTUBERCULUMMAJUS_.PosInterpol.Data[2][..FirstFrameStatic]
            }; // sRTuberculumMajus

            // RUpperArm: Help marker located on the Humerus (arm) segment
            AnyVec3 sRBrachiumSegmentHelpMarker = 
            { 
              Main.ModelSetup.StaticData.Points.Markers._RBRACHIUMSEGMENTHELPMARKER_.PosInterpol.Data[0][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers._RBRACHIUMSEGMENTHELPMARKER_.PosInterpol.Data[1][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers._RBRACHIUMSEGMENTHELPMARKER_.PosInterpol.Data[2][..FirstFrameStatic]
            }; // sRBrachiumSegmentHelpMarker

          #endif //IncludeShoulder == 1 | IncludeElbow == 1

          #if IncludeShoulder == 1 | IncludeElbow == 1 | IncludeWrist == 1
            // EM: Most caudal point on medial epicondyle of the humerus
            // Epicondylus medialis humeri
            AnyVec3 sREpicondylusMedialisHumeri = 
            { 
              Main.ModelSetup.StaticData.Points.Markers._REPICONDYLUSMEDIALISHUMERI_.PosInterpol.Data[0][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers._REPICONDYLUSMEDIALISHUMERI_.PosInterpol.Data[1][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers._REPICONDYLUSMEDIALISHUMERI_.PosInterpol.Data[2][..FirstFrameStatic]
            }; // sREpicondylusMedialisHumeri

            // EL: Most caudal point on lateral epicondyle of the humerus
            // Epicondylus lateralis humeri            
            AnyVec3 sREpicondylusLateralisHumeri =
            { 
              Main.ModelSetup.StaticData.Points.Markers._REPICONDYLUSLATERALISHUMERI_.PosInterpol.Data[0][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers._REPICONDYLUSLATERALISHUMERI_.PosInterpol.Data[1][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers._REPICONDYLUSLATERALISHUMERI_.PosInterpol.Data[2][..FirstFrameStatic]
            }; // sREpicondylusLateralisHumeri

            AnyVec3 sRArticulatioCubiti = 
            {
              (0.5* ( Main.ModelSetup.StaticData.Points.Markers._REPICONDYLUSMEDIALISHUMERI_.PosInterpol.Data[0][..FirstFrameStatic]
                    + Main.ModelSetup.StaticData.Points.Markers._REPICONDYLUSLATERALISHUMERI_.PosInterpol.Data[0][..FirstFrameStatic])),
              (0.5* ( Main.ModelSetup.StaticData.Points.Markers._REPICONDYLUSMEDIALISHUMERI_.PosInterpol.Data[1][..FirstFrameStatic]
                    + Main.ModelSetup.StaticData.Points.Markers._REPICONDYLUSLATERALISHUMERI_.PosInterpol.Data[1][..FirstFrameStatic])),
              (0.5* ( Main.ModelSetup.StaticData.Points.Markers._REPICONDYLUSMEDIALISHUMERI_.PosInterpol.Data[2][..FirstFrameStatic]
                    + Main.ModelSetup.StaticData.Points.Markers._REPICONDYLUSLATERALISHUMERI_.PosInterpol.Data[2][..FirstFrameStatic]))          
            }; // sRArticulatioCubiti

          #endif // IncludeShoulder == 1 | IncludeElbow == 1 | IncludeWrist == 1

          #if IncludeElbow == 1 | IncludeWrist == 1
            // Markers for the Forearm (forearm) segment
            // US: Most caudal–medial point on the ulnar styloid
            // Processus styloideus ulnae
            AnyVec3 sRProcessusStyloideusUlnae = 
            { 
              Main.ModelSetup.StaticData.Points.Markers._RPROCESSUSSTYLOIDEUSULNAE_.PosInterpol.Data[0][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers._RPROCESSUSSTYLOIDEUSULNAE_.PosInterpol.Data[1][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers._RPROCESSUSSTYLOIDEUSULNAE_.PosInterpol.Data[2][..FirstFrameStatic]
            }; // sRProcessusStyloideusUlnae

            // RS: Most caudal–lateral point on the radial styloid
            // Processus styloideus radii
            AnyVec3 sRProcessusStyloideusRadii = 
            { 
              Main.ModelSetup.StaticData.Points.Markers._RPROCESSUSSTYLOIDEUSRADII_.PosInterpol.Data[0][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers._RPROCESSUSSTYLOIDEUSRADII_.PosInterpol.Data[1][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers._RPROCESSUSSTYLOIDEUSRADII_.PosInterpol.Data[2][..FirstFrameStatic]
            }; // sRProcessusStyloideusRadii
            
            // RFA: Help marker located on the Forearm (forearm) segment
            AnyVec3 sRAntebrachiumSegmentHelpMarker = 
            { 
              Main.ModelSetup.StaticData.Points.Markers._RANTEBRACHIUMSEGMENTHELPMARKER_.PosInterpol.Data[0][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers._RANTEBRACHIUMSEGMENTHELPMARKER_.PosInterpol.Data[1][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers._RANTEBRACHIUMSEGMENTHELPMARKER_.PosInterpol.Data[2][..FirstFrameStatic]
            }; // sRAntebrachiumSegmentHelpMarker
          #endif // IncludeElbow == 1 | IncludeWrist == 1

          #if IncludeWrist == 1
            AnyVec3 sRManusSegmentHelpMarker = 
            {
              Main.ModelSetup.StaticData.Points.Markers._RMANUSSEGMENTHELPMARKER_.PosInterpol.Data[0][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers._RMANUSSEGMENTHELPMARKER_.PosInterpol.Data[1][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers._RMANUSSEGMENTHELPMARKER_.PosInterpol.Data[2][..FirstFrameStatic]
            }; // sRManusSegmentHelpMarker

            AnyVec3 sRArticulatioRadioCarpalis = 
            {
              (0.5* ( Main.ModelSetup.StaticData.Points.Markers._RPROCESSUSSTYLOIDEUSRADII_.PosInterpol.Data[0][..FirstFrameStatic]
                    + Main.ModelSetup.StaticData.Points.Markers._RPROCESSUSSTYLOIDEUSULNAE_.PosInterpol.Data[0][..FirstFrameStatic])),
              (0.5* ( Main.ModelSetup.StaticData.Points.Markers._RPROCESSUSSTYLOIDEUSRADII_.PosInterpol.Data[1][..FirstFrameStatic]
                    + Main.ModelSetup.StaticData.Points.Markers._RPROCESSUSSTYLOIDEUSULNAE_.PosInterpol.Data[1][..FirstFrameStatic])),
              (0.5* ( Main.ModelSetup.StaticData.Points.Markers._RPROCESSUSSTYLOIDEUSRADII_.PosInterpol.Data[2][..FirstFrameStatic]
                    + Main.ModelSetup.StaticData.Points.Markers._RPROCESSUSSTYLOIDEUSULNAE_.PosInterpol.Data[2][..FirstFrameStatic]))          
            }; // sRArticulatioRadioCarpalis
          #endif // IncludeWrist

          AnyFolder Arm =
          {
            #if IncludeShoulder == 1
              AnyFolder Clavicle =
              {
                
                // Clavicle coordinate

                #if USE_KLEIN_BRETELER_SC_JOINT_CENTER_ESTIMATION == 1
                  // Origin = Oc = The origin coincident with the most ventral point on the sternoclavicular joint (SC) (Wu, van der Helm et al. 2005).
                  AnyVec3 r0_static = ..sRArticulatioSternoClavicularis;

                  // u3 = z-axis = Zc = The line connecting the most ventral point on the sternoclavicular joint (SC) and the most
                  // dorsal point on the acromioclavicular joint (AC) (shared with the scapula), pointing to AC (Wu, van der Helm et al. 2005).
                  AnyVec3 u3_tmp = ..sRAcromion - ..sRArticulatioSternoClavicularis;
                #else
                  // Origin = Oc = The origin coincident with the most ventral point on the sternoclavicular joint (SC) (Wu, van der Helm et al. 2005).
                  AnyVec3 r0_static = ...Trunk.sIncisuraJugularis;

                  // u3 = z-axis = Zc = The line connecting the most ventral point on the sternoclavicular joint (SC) and the most
                  // dorsal point on the acromioclavicular joint (AC) (shared with the scapula), pointing to AC (Wu, van der Helm et al. 2005).
                  AnyVec3 u3_tmp = ..sRAcromion - ...Trunk.sIncisuraJugularis;
                #endif

                // u2 = x-axis = Xc = The line perpendicular to Zc and Yt, pointing foward.
                // Note that the Xc-axis is defined with respect to the vertical axis of the thorax
                // (Yt-axis) because only two bony landmarks can be discerned at the clavicle (Wu, van der Helm et al. 2005).
                AnyVec3 u2_tmp = cross(...Trunk.Thorax.u1, u3_tmp);

                // u1 = y-axis = Yc = The common line perpendicular to the Xc- and Zc-axis, pointing upward (Wu, van der Helm et al. 2005).
                AnyVec3 u1 = cross(u3_tmp, u2_tmp);
                
                AnyVec3 u2 = cross(u1, u3_tmp);
                AnyVec3 u3 = cross(u2, u1);

                // Rotation Matrix AnyMat33 = {x, y, z} thats why {u2, u1, u3} 
                AnyMat33 Axes0_static = {u2/vnorm(u2),u1/vnorm(u1), u3/vnorm(u3)}';

                // Current issue: Clavicle segment only has two bony landmarks, which marker used for iCluster3 ? tmp: iCluster 3 = PX of thorax
                CreateLoadPositions InitialPos( DynamicPos = UseDanamicLoadPosition ) = 
                {
                  iCluster1 = 
                  { 
                    Main.ModelSetup.DynamicDataSet.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[0][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[1][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[2][.....FirstFrameDynamic]
                  }; // dynamic iCluster1

                  iCluster2 = 
                  { 
                    Main.ModelSetup.DynamicDataSet.Points.Markers._RACROMION_.PosInterpol.Data[0][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._RACROMION_.PosInterpol.Data[1][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._RACROMION_.PosInterpol.Data[2][.....FirstFrameDynamic]
                  }; // dynamic iCluster2

                  iCluster3 = 
                  { 
                    Main.ModelSetup.DynamicDataSet.Points.Markers._PROCESSUSXIPHOIDEUS_.PosInterpol.Data[0][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._PROCESSUSXIPHOIDEUS_.PosInterpol.Data[1][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._PROCESSUSXIPHOIDEUS_.PosInterpol.Data[2][.....FirstFrameDynamic]
                  }; // dynamic iCluster3

                  // static sCluster 1-3
                  sCluster1 = ....Trunk.sIncisuraJugularis;
                  sCluster2 = ...sRAcromion;
                  sCluster3 = ....Trunk.sProcessusXiphoideus;
                }; // CreateLoadPositions

                AnyFolder IncisuraJugularis = 
                {
                  AnyVec3 sRel_static= (.Axes0_static'*(....Trunk.sIncisuraJugularis - .r0_static)')';
                }; // IncisuraJugularis

                AnyFolder RAcromion = 
                {
                  AnyVec3 sRel_static= (.Axes0_static'*(...sRAcromion - .r0_static)')';
                }; // RAcromion

                AnyFolder RArticulatioSternoClavicularis = 
                {
                  AnyVec3 sRel_static= (.Axes0_static'*(...sRArticulatioSternoClavicularis - .r0_static)')';
                }; // RArticulatioSternoClavicularis

                AnyFolder RArticulatioAcromioClavicularis = 
                {
                  AnyVec3 sRel_static= (.Axes0_static'*(...sRArticulatioAcromioClavicularis - .r0_static)')';
                }; // RArticulatioAcromioClavicularis

                AnyFolder &ClaviculaRef = .....FullModel.Right.Arm.Seg.Clavicle;
                ClaviculaRef = 
                {
                  AnyRefNode IncisuraJugularis = 
                  {
                    sRel = ..IncisuraJugularis.sRel_static;
                    AnyDrawNode drw = {RGB = {1, 1, 0}; ScaleXYZ = 0.5*{0.025, 0.025, 0.025};};
                  }; // IncisuraJugularis

                  AnyRefNode RAcromion = 
                  {
                    sRel = ..RAcromion.sRel_static;
                    AnyDrawNode drw = {RGB = {1, 1, 0}; ScaleXYZ = 0.5*{0.025, 0.025, 0.025};};
                  }; // RAcromion

                  AnyRefNode RArticulatioSternoClavicularis = 
                  {
                    sRel = ..RArticulatioSternoClavicularis.sRel_static;
                    AnyDrawNode drw = {RGB = {1, 1, 0}; ScaleXYZ = 0.5*{0.025, 0.025, 0.025};};
                  }; // RArticulatioSternoClavicularis

                  AnyRefNode RArticulatioAcromioClavicularis = 
                  {
                    sRel = ..RArticulatioAcromioClavicularis.sRel_static;
                    AnyDrawNode drw = {RGB = {1, 1, 0}; ScaleXYZ = 0.5*{0.025, 0.025, 0.025};};
                  }; // RArticulatioAcromioClavicularis
                }; // ClaviculaRef 
              }; // Clavicle 

              AnyFolder Scapula = 
              {
                // The origin of the scapula coincident with AA
                AnyVec3 r0_static = ..sRAngulusAcromii;

                // u3 = z-axis = ISB recommendations: The z-axis line is connecting TS and AA, pointing to AA
                AnyVec3 u3_tmp = r0_static - ..sRTrigonumSpinaeScapulae;

                // u2 = x-axis: The line is perpendicular to the plane formed by
                // AI, AA, and TS, pointing forward. Note that
                // because of the use of AA instead of AC, this
                // plane is not the same as the visual plane of the
                // scapula bone.
                AnyVec3 u2_tmp = cross((..sRAngulusInferior - r0_static),(..sRTrigonumSpinaeScapulae - r0_static));

                // u1 = y-axis: The y-axis is the common line perpendicular to the x- and
                // z-axis, pointing upward.
                AnyVec3 u1_tmp = cross(u3_tmp, u2_tmp);

                AnyVec3 u3 = cross(u2_tmp, u1_tmp);
                AnyVec3 u2 = cross(u1_tmp, u3);
                AnyVec3 u1 = cross(u3, u2);

                // Rotation Matrix AnyMat33 = {x, y, z} thats why {u2, u1, u3} 
                AnyMat33 Axes0_static = {u2/vnorm(u2),u1/vnorm(u1), u3/vnorm(u3)}';

                CreateLoadPositions InitialPos( DynamicPos = UseDanamicLoadPosition ) = 
                {
                  // Right Acromion
                  iCluster1 = 
                  { 
                    Main.ModelSetup.DynamicDataSet.Points.Markers._RACROMION_.PosInterpol.Data[0][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._RACROMION_.PosInterpol.Data[1][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._RACROMION_.PosInterpol.Data[2][.....FirstFrameDynamic]
                  };
                  
                  #if USE_VAN_DER_HELM_SCAPULA_ESTIMATION == 1
                    // Right Trigonum spinae scapulae
                    iCluster2 = 
                    {
                      Main.ModelSetup.DynamicDataSet.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[0][.....FirstFrameDynamic]-163.3/1000,
                      Main.ModelSetup.DynamicDataSet.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[1][.....FirstFrameDynamic]-86.8/1000,
                      Main.ModelSetup.DynamicDataSet.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[2][.....FirstFrameDynamic]+0.1/1000
                    };

                    // Right Angulus inferior
                    iCluster3 = 
                    { 
                      Main.ModelSetup.DynamicDataSet.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[0][.....FirstFrameDynamic]-159.9/1000,
                      Main.ModelSetup.DynamicDataSet.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[1][.....FirstFrameDynamic]-119.0/1000,
                      Main.ModelSetup.DynamicDataSet.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[2][.....FirstFrameDynamic]-108.5/1000
                    };
                  #else
                    // Right Trigonum spinae scapulae
                    iCluster2 = 
                    {
                      Main.ModelSetup.DynamicDataSet.Points.Markers._RTRIGONUMSPINAESCAPULAE_.PosInterpol.Data[0][.....FirstFrameDynamic],
                      Main.ModelSetup.DynamicDataSet.Points.Markers._RTRIGONUMSPINAESCAPULAE_.PosInterpol.Data[1][.....FirstFrameDynamic],
                      Main.ModelSetup.DynamicDataSet.Points.Markers._RTRIGONUMSPINAESCAPULAE_.PosInterpol.Data[2][.....FirstFrameDynamic]
                    };

                    // Right Angulus inferior
                    iCluster3 = 
                    { 
                      Main.ModelSetup.DynamicDataSet.Points.Markers._RANGULUSINFERIOR_.PosInterpol.Data[0][.....FirstFrameDynamic],
                      Main.ModelSetup.DynamicDataSet.Points.Markers._RANGULUSINFERIOR_.PosInterpol.Data[1][.....FirstFrameDynamic],
                      Main.ModelSetup.DynamicDataSet.Points.Markers._RANGULUSINFERIOR_.PosInterpol.Data[2][.....FirstFrameDynamic]
                    };
                  #endif
                  
                  sCluster1 = ...sRAcromion;
                  sCluster2 = ...sRTrigonumSpinaeScapulae;
                  sCluster3 = ...sRAngulusInferior;
                }; 

                #if USE_MESKERS_GH_JOINT_CENTER_ESTIMATION == 1
                  // The origin of the scapula coincident with AC
                  AnyVec3 r0_static_Meskers = ..sRAcromion;

                  // u3 = z-axis is perpendicular to the plane through AC, TS and AI pointing backwards
                  AnyVec3 u3_tmp_Meskers = cross((..sRTrigonumSpinaeScapulae - r0_static_Meskers),(..sRAngulusInferior - r0_static_Meskers));

                  // u2 = x-axis: AC - TS / || AC - TS ||
                  AnyVec3 u2_tmp_Meskers = r0_static_Meskers - ..sRTrigonumSpinaeScapulae;

                  // u1 = y-axis: perpendicular to the x and z axis pointing upwards
                  AnyVec3 u1_tmp_Meskers = cross(u3_tmp_Meskers, u2_tmp_Meskers);

                  AnyVec3 u3_Meskers = cross(u2_tmp_Meskers, u1_tmp_Meskers);
                  AnyVec3 u2_Meskers = cross(u1_tmp_Meskers, u3_Meskers);
                  AnyVec3 u1_Meskers = cross(u3_Meskers, u2_Meskers);

                  // Rotation Matrix AnyMat33 = {x, y, z} thats why {u2, u1, u3} 
                  AnyMat33 Axes0_static_Meskers = {u2_Meskers/vnorm(u2_Meskers),u1_Meskers/vnorm(u1_Meskers), u3_Meskers/vnorm(u3_Meskers)}';
                #endif

                AnyFolder RAcromion =
                {
                  AnyVec3 sRel_static = (.Axes0_static'*(...sRAcromion - .r0_static)')';
                  #if USE_MESKERS_GH_JOINT_CENTER_ESTIMATION == 1
                    AnyVec3 sRel_static_Meskers = (.Axes0_static_Meskers'*(...sRArticulatioAcromioClavicularis - .r0_static_Meskers)')';
                  #endif
                  }; // RAcromion

                AnyFolder RArticulatioAcromioClavicularis =
                {
                  AnyVec3 sRel_static = (.Axes0_static'*(...sRArticulatioAcromioClavicularis - .r0_static)')';
                }; // RArticulatioAcromioClavicularis

                AnyFolder RAngulusAcromii =
                {
                  AnyVec3 sRel_static = (.Axes0_static'*(...sRAngulusAcromii - .r0_static)')';
                  #if USE_MESKERS_GH_JOINT_CENTER_ESTIMATION == 1
                    AnyVec3 sRel_static_Meskers = (.Axes0_static_Meskers'*(...sRAngulusAcromii - .r0_static_Meskers)')';
                  #endif
                }; // RAngulusAcromii

                AnyFolder RAngulusInferior = 
                {
                  AnyVec3 sRel_static = (.Axes0_static'*(...sRAngulusInferior - .r0_static)')';
                  #if USE_MESKERS_GH_JOINT_CENTER_ESTIMATION == 1
                    AnyVec3 sRel_static_Meskers = (.Axes0_static_Meskers'*(...sRAngulusInferior - .r0_static_Meskers)')';
                  #endif
                }; // RAngulusInferior

                AnyFolder RTrigonumSpinaeScapulae = 
                {
                  AnyVec3 sRel_static = (.Axes0_static'*(...sRTrigonumSpinaeScapulae - .r0_static)')';
                  #if USE_MESKERS_GH_JOINT_CENTER_ESTIMATION == 1
                    AnyVec3 sRel_static_Meskers = (.Axes0_static_Meskers'*(...sRTrigonumSpinaeScapulae - .r0_static_Meskers)')';
                  #endif
                }; // RTrigonumSpinaeScapulae
                #if USE_MESKERS_GH_JOINT_CENTER_ESTIMATION == 1
                  AnyFolder RProcessusCoracoideus =
                  {
                    AnyVec3 sRel_static = (.Axes0_static'*(...sRProcessusCoracoideus - .r0_static)')';
                    AnyVec3 sRel_static_Meskers = (.Axes0_static_Meskers'*(...sRProcessusCoracoideus - .r0_static_Meskers)')';
                  }; // RProcessusCoracoideus
                #endif
                  
                AnyFolder RArticulatioGlenoHumeralis =
                {
                  #if USE_MESKERS_GH_JOINT_CENTER_ESTIMATION == 1
                    // Meskers reported in [mm], AnyBody requires [m] therefore offset values are converted (*.001)     
                    AnyVar GHx =  18.9743 * 0.001 
                                  + 0.2434 * .RProcessusCoracoideus.sRel_static_Meskers[0]
                                  + 0.2341 * .RAngulusInferior.sRel_static_Meskers[0]
                                  + 0.1590 * sqrt(  (.RAngulusInferior.sRel_static_Meskers[0] - .RAngulusAcromii.sRel_static_Meskers[0])^2
                                                  + (.RAngulusInferior.sRel_static_Meskers[1] - .RAngulusAcromii.sRel_static_Meskers[1])^2
                                                  + (.RAngulusInferior.sRel_static_Meskers[2] - .RAngulusAcromii.sRel_static_Meskers[2])^2)              
                                  + 0.0558  * .RProcessusCoracoideus.sRel_static_Meskers[1];
                    
                    AnyVar GHy =  - 3.8791 * 0.001 
                                  - 0.3940 * sqrt(  (.RAcromion.sRel_static_Meskers[0] - .RAngulusAcromii.sRel_static_Meskers[0])^2
                                                  + (.RAcromion.sRel_static_Meskers[1] - .RAngulusAcromii.sRel_static_Meskers[1])^2
                                                  + (.RAcromion.sRel_static_Meskers[2] - .RAngulusAcromii.sRel_static_Meskers[2])^2)
                                  + 0.1732 * .RProcessusCoracoideus.sRel_static_Meskers[1]
                                  + 0.1205 * .RAngulusInferior.sRel_static_Meskers[0]
                                  - 0.1002 * sqrt(  (.RAcromion.sRel_static_Meskers[0] - .RProcessusCoracoideus.sRel_static_Meskers[0])^2
                                                  + (.RAcromion.sRel_static_Meskers[1] - .RProcessusCoracoideus.sRel_static_Meskers[1])^2
                                                  + (.RAcromion.sRel_static_Meskers[2] - .RProcessusCoracoideus.sRel_static_Meskers[2])^2);                
                    AnyVar GHz =  9.2629 * 0.001
                                  + 1.0255 * .RProcessusCoracoideus.sRel_static_Meskers[2]
                                  - 0.2403 * .RProcessusCoracoideus.sRel_static_Meskers[1]
                                  + 0.1720 * sqrt(  (.RTrigonumSpinaeScapulae.sRel_static_Meskers[0] - .RProcessusCoracoideus.sRel_static_Meskers[0])^2
                                                  + (.RTrigonumSpinaeScapulae.sRel_static_Meskers[1] - .RProcessusCoracoideus.sRel_static_Meskers[1])^2
                                                  + (.RTrigonumSpinaeScapulae.sRel_static_Meskers[2] - .RProcessusCoracoideus.sRel_static_Meskers[2])^2);
                                        
                    AnyVec3 sRArticulatioGlenoHumeralis_Meskers = {GHx, GHy, GHz};

                    // Rotate sRArticulatioGlenoHumeralis_Meskers into GCS
                    AnyVec3 sRel_gcs = ((.Axes0_static_Meskers * (sRArticulatioGlenoHumeralis_Meskers)')' + .r0_static_Meskers);
                    // Rotate into LCS of the scapula with origin at AA
                    AnyVec3 sRel_static = (.Axes0_static'*(sRel_gcs - .r0_static)')';
                  #else
                    AnyVec3 sRel_static = (.Axes0_static'*(...sRArticulatioGlenoHumeralis - .r0_static)')';
                  #endif
                }; // RArticulatioGlenoHumeralis

                AnyFolder &ScapulaRef = .....FullModel.Right.Arm.Seg.Scapula;
                ScapulaRef = 
                {
                    AnyRefNode RAcromion = 
                    {
                      sRel = ..RAcromion.sRel_static;
                      AnyDrawNode drw = 
                      {
                        RGB = {1, 1, 0}; 
                        ScaleXYZ = 0.5*{0.025, 0.025, 0.025};
                      }; // drw
                    }; // RAcromion
                    
                    AnyRefNode RArticulatioAcromioClavicularis = 
                    {
                      sRel = ..RArticulatioAcromioClavicularis.sRel_static;
                      AnyDrawNode drw = 
                      {
                        RGB = {1, 1, 0}; 
                        ScaleXYZ = 0.5*{0.025, 0.025, 0.025};
                      }; // drw
                    }; // RArticulatioAcromioClavicularis

                    AnyRefNode RAngulusAcromii = 
                    {
                      sRel = ..RAngulusAcromii.sRel_static;
                      AnyDrawNode drw = 
                      {
                        RGB = {1, 1, 0}; 
                        ScaleXYZ = 0.5*{0.025, 0.025, 0.025};
                      }; // drw
                    }; // RAngulusAcromii

                    AnyRefNode RAngulusInferior = 
                    {
                      sRel = ..RAngulusInferior.sRel_static;
                      AnyDrawNode drw = 
                      {
                        RGB = {1, 1, 0}; 
                        ScaleXYZ = 0.5*{0.025, 0.025, 0.025};
                      }; // drw
                    }; // RAngulusInferior

                    AnyRefNode RTrigonumSpinaeScapulae = 
                    {
                      sRel = ..RTrigonumSpinaeScapulae.sRel_static;
                      AnyDrawNode drw = 
                      {
                        RGB = {1, 1, 0}; 
                        ScaleXYZ = 0.5*{0.025, 0.025, 0.025};
                      }; // drw
                    }; // RTrigonumSpinaeScapulae
                    
                    #if USE_MESKERS_GH_JOINT_CENTER_ESTIMATION == 1 
                     AnyRefNode RProcessusCoracoideus = 
                     {
                       sRel = ..RProcessusCoracoideus.sRel_static;
                       AnyDrawNode drw = 
                       {
                         RGB = {1, 1, 0}; 
                         ScaleXYZ = 0.5*{0.025, 0.025, 0.025};
                       }; // drw
                     }; // RProcessusCoracoideus
                    #endif
                    
                    // Reference node sRel = transposed unit vectors (Axes0_satic') * (static marker - origin of the LCS)
                    AnyRefNode RArticulatioGlenoHumeralis = 
                    {
                      sRel = ..RArticulatioGlenoHumeralis.sRel_static;
                      AnyDrawNode drw = 
                      {
                        RGB = {1, 1, 0}; 
                        ScaleXYZ = 0.5*{0.025, 0.025, 0.025};
                      }; // drw
                    }; // RArticulatioGlenoHumeralis
                }; // ScapulaRef
              }; // Scapula
            #endif // IncludeShoulder


            #if IncludeShoulder == 1 | IncludeElbow == 1 
              AnyFolder Humerus =
              {           
                // ISB recommends option 2 if forearm is available otherwise use option 1
                #if USE_HUMERUS_OPT_2 == 1
                  
                  // Humerus option 2
                  AnyVec3 r0_static = ..sRArticulatioGlenoHumeralis;

                  // u1 = y-axis = ISB recommendations: The line connecting GH and the midpoint of EL and EM, pointing to GH.
                  AnyVec3 u1_tmp =  r0_static - 0.5*(..sREpicondylusMedialisHumeri + ..sREpicondylusLateralisHumeri);  

                  //u3 = z-axis = ISB recommendations: The line perpendicular to the plane formed by u1 and u1 of the Forearm segment, pointing to the right.
                  AnyVec3 u3_tmp = cross(u1_tmp,.Forearm.u1);

                  //u2 = x-axis = ISB recommendations: The common line perpendicular to the u3 and u1-axis, pointing forward.
                  AnyVec3 u2 = cross(u1_tmp, u3_tmp);
                  AnyVec3 u1 = cross(u3_tmp, u2);
                  AnyVec3 u3 = cross(u2,u1);
              
                #else

                  // Humerus option 1
                  AnyVec3 r0_static = ..sRArticulatioGlenoHumeralis;

                  // u1 = y-axis = ISB recommendations: The line connecting GH and the midpoint of EL and EM, pointing to GH.
                  AnyVec3 u1_tmp =  r0_static - 0.5*(..sREpicondylusMedialisHumeri + ..sREpicondylusLateralisHumeri);  

                  //u2 = x-axis = ISB recommendations: The line perpendicular to the plane formed by EL, EM, and GH, pointing forward.
                  AnyVec3 u2_tmp = cross((..sREpicondylusLateralisHumeri - r0_static),(..sREpicondylusMedialisHumeri - r0_static));

                  //u3 = z-axis = ISB recommendations: The common line perpendicular to the u1 and u2-axis, pointing to the right.
                  AnyVec3 u3_tmp = cross(u2_tmp,u1_tmp);

                  
                  AnyVec3 u2 = cross(u1_tmp, u3_tmp);
                  AnyVec3 u1 = cross(u3_tmp, u2);
                  AnyVec3 u3 = cross(u2,u1);
              
                #endif
                
                // Rotation Matrix AnyMat33 = {x, y, z} thats why {u2, u1, u3} 
                AnyMat33 Axes0_static = {u2/vnorm(u2),u1/vnorm(u1), u3/vnorm(u3)}';

                CreateLoadPositions InitialPos( DynamicPos = UseDanamicLoadPosition ) = 
                {
                  iCluster1 = 
                  { 
                    Main.ModelSetup.DynamicDataSet.Points.Markers._REPICONDYLUSLATERALISHUMERI_.PosInterpol.Data[0][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._REPICONDYLUSLATERALISHUMERI_.PosInterpol.Data[1][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._REPICONDYLUSLATERALISHUMERI_.PosInterpol.Data[2][.....FirstFrameDynamic]
                  }; // dynamic iCluster1
                  
                  iCluster2 = 
                  { 
                    Main.ModelSetup.DynamicDataSet.Points.Markers._REPICONDYLUSMEDIALISHUMERI_.PosInterpol.Data[0][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._REPICONDYLUSMEDIALISHUMERI_.PosInterpol.Data[1][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._REPICONDYLUSMEDIALISHUMERI_.PosInterpol.Data[2][.....FirstFrameDynamic]
                  };  // dynamic iCluster2

                  iCluster3 = 
                  { 
                    Main.ModelSetup.DynamicDataSet.Points.Markers._RBRACHIUMSEGMENTHELPMARKER_.PosInterpol.Data[0][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._RBRACHIUMSEGMENTHELPMARKER_.PosInterpol.Data[1][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._RBRACHIUMSEGMENTHELPMARKER_.PosInterpol.Data[2][.....FirstFrameDynamic]
                  }; // dynamic iCluster3
                  
                  // static sCluster 1-3
                  sCluster1 = ...sREpicondylusLateralisHumeri;
                  sCluster2 = ...sREpicondylusMedialisHumeri;
                  sCluster3 = ...sRBrachiumSegmentHelpMarker;
                }; // CreateLoadPositions 

                AnyFolder RArticulatioCubiti =
                {
                  AnyVec3 sRel_static = (.Axes0_static'*(...sRArticulatioCubiti - .r0_static)')';
                }; // RArticulatioCubiti

                AnyFolder RArticulatioGlenoHumeralis = 
                {
                  AnyVec3 sRel_static = (.Axes0_static'*(...sRArticulatioGlenoHumeralis - .r0_static)')';
                }; // RArticulatioGlenoHumeralis

                AnyFolder REpicondylusLateralisHumeri = 
                {
                  AnyVec3 sRel_static = (.Axes0_static'*(...sREpicondylusLateralisHumeri - .r0_static)')';
                }; // REpicondylusLateralisHumeri

                AnyFolder REpicondylusMedialisHumeri = 
                {
                  AnyVec3 sRel_static = (.Axes0_static'*(...sREpicondylusMedialisHumeri - .r0_static)')';
                }; // REpicondylusMedialisHumeri
                
                AnyFolder RBrachiumSegmentHelpMarker = 
                {
                  AnyVec3 sRel_static = (.Axes0_static'*(...sRBrachiumSegmentHelpMarker - .r0_static)')';
                }; // RAcromion

                AnyFolder RTuberculumMajus = 
                {
                  AnyVec3 sRel_static = (.Axes0_static'*(...sRTuberculumMajus - .r0_static)')';
                }; // RTuberculumMajus

                AnyFolder &HumerusRef = .....FullModel.Right.Arm.Seg.Humerus;

                HumerusRef = 
                {
                    // Reference node sRel = transposed unit vectors (Axes0_satic') * (static marker - origin of the LCS)
                    AnyRefNode RArticulatioGlenoHumeralis = 
                    {
                      sRel = ..RArticulatioGlenoHumeralis.sRel_static;
                      AnyDrawNode drw = 
                      {
                        RGB = {1, 1, 0}; 
                        ScaleXYZ = 0.5*{0.025, 0.025, 0.025};
                      }; // drw
                    }; // RArticulatioGlenoHumeralis

                    AnyRefNode REpicondylusLateralisHumeri = 
                    {
                      sRel = ..REpicondylusLateralisHumeri.sRel_static;
                      AnyDrawNode drw = 
                      {
                        RGB = {1, 1, 0}; 
                        ScaleXYZ = 0.5*{0.025, 0.025, 0.025};
                      };
                    }; // REpicondylusLateralisHumeri

                    AnyRefNode REpicondylusMedialisHumeri = 
                    {
                      sRel = ..REpicondylusMedialisHumeri.sRel_static;
                      AnyDrawNode drw = 
                      {
                        RGB = {1, 1, 0}; 
                        ScaleXYZ = 0.5*{0.025, 0.025, 0.025};
                      };
                    }; // REpicondylusMedialisHumeri

                    AnyRefNode RBrachiumSegmentHelpMarker = 
                    {
                      sRel = ..RBrachiumSegmentHelpMarker.sRel_static;
                      AnyDrawNode drw = 
                      {
                        RGB = {1, 1, 0}; 
                        ScaleXYZ = 0.5*{0.025, 0.025, 0.025};
                      };
                    }; // RAcromion

                    AnyRefNode RTuberculumMajus =
                    {
                      sRel = ..RTuberculumMajus.sRel_static;
                      AnyDrawNode drw = 
                      {
                        RGB = {1, 1, 0}; 
                        ScaleXYZ = 0.5*{0.025, 0.025, 0.025};
                      }; // drw
                    }; // RTuberculumMajus

                    AnyRefNode RArticulatioCubiti =
                    {
                      sRel = ..RArticulatioCubiti.sRel_static;
                      AnyDrawNode drw = 
                      {
                        RGB = {1, 1, 0}; 
                        ScaleXYZ = 0.5*{0.025, 0.025, 0.025};
                      }; // drw
                    }; // RArticulatioCubiti
                }; // HumerusRef
              }; // Humerus
            #endif // IncludeShoulder | IncludeElbow

            #if IncludeElbow == 1 | IncludeWrist == 1
              AnyFolder Forearm =
              {
                // Origin of the Forearm (forearm) at US: Most caudal–medial point on the ulnar styloid (US):
                // Processus styloideus ulnae (Wu, van der Helm et al. 2005)     
                AnyVec3 r0_static = ..sRProcessusStyloideusUlnae;
                
                // u1 = y-axis = ISB recommendations: The line connecting US and the midpoint between EL and EM,
                // pointing proximally. (Wu, van der Helm et al. 2005)
                AnyVec3 u1_tmp =  0.5*(..sREpicondylusMedialisHumeri + ..sREpicondylusLateralisHumeri) - r0_static;  

                // u2 = x-axis = ISB recommendations: The line perpendicular to the plane through US,RS, 
                // and the midpoint between EL and EM, pointing forward. (Wu, van der Helm et al. 2005)
                AnyVec3 u2_tmp = cross(u1_tmp, (..sRProcessusStyloideusRadii - r0_static));
                
                //u3 = z-axis = ISB recommendations: The common line perpendicular to the
                //x_axis and y_axis, pointing to the right (Wu, van der Helm et al. 2005)          
                AnyVec3 u3 = cross(u2_tmp,u1_tmp);
                AnyVec3 u2 = cross(u1_tmp, u3);
                AnyVec3 u1 = cross(u3, u2);
                
                // Rotation Matrix AnyMat33 = {x, y, z} thats why {u2, u1, u3} 
                AnyMat33 Axes0_static = {u2/vnorm(u2),u1/vnorm(u1), u3/vnorm(u3)}';              

                CreateLoadPositions InitialPos( DynamicPos = UseDanamicLoadPosition ) = 
                {
                  iCluster1 = 
                  { 
                    Main.ModelSetup.DynamicDataSet.Points.Markers._RPROCESSUSSTYLOIDEUSULNAE_.PosInterpol.Data[0][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._RPROCESSUSSTYLOIDEUSULNAE_.PosInterpol.Data[1][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._RPROCESSUSSTYLOIDEUSULNAE_.PosInterpol.Data[2][.....FirstFrameDynamic]
                  }; // dynamic iCluster1

                  iCluster2 = 
                  { 
                    Main.ModelSetup.DynamicDataSet.Points.Markers._RPROCESSUSSTYLOIDEUSRADII_.PosInterpol.Data[0][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._RPROCESSUSSTYLOIDEUSRADII_.PosInterpol.Data[1][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._RPROCESSUSSTYLOIDEUSRADII_.PosInterpol.Data[2][.....FirstFrameDynamic]
                  }; // dynamic iCluster2
                  
                  iCluster3 = 
                  { 
                    Main.ModelSetup.DynamicDataSet.Points.Markers._RANTEBRACHIUMSEGMENTHELPMARKER_.PosInterpol.Data[0][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._RANTEBRACHIUMSEGMENTHELPMARKER_.PosInterpol.Data[1][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._RANTEBRACHIUMSEGMENTHELPMARKER_.PosInterpol.Data[2][.....FirstFrameDynamic]
                  }; // dynamic iCluster3
                  
                  // static sCluster 1-3
                  sCluster1 = ...sRProcessusStyloideusUlnae;
                  sCluster2 = ...sRProcessusStyloideusRadii;
                  sCluster3 = ...sRAntebrachiumSegmentHelpMarker;
                }; // CreateLoadPositions InitialPos

                AnyFolder RProcessusStyloideusUlnae = 
                {
                  AnyVec3 sRel_static = (.Axes0_static'*(...sRProcessusStyloideusUlnae - .r0_static)')';
                }; // RProcessusStyloideusUlnae

                AnyFolder RProcessusStyloideusRadii = 
                {
                  AnyVec3 sRel_static = (.Axes0_static'*(...sRProcessusStyloideusRadii - .r0_static)')';
                }; // RProcessusStyloideusRadii

                AnyFolder RAntebrachiumSegmentHelpMarker = 
                {
                  AnyVec3 sRel_static = (.Axes0_static'*(...sRAntebrachiumSegmentHelpMarker - .r0_static)')';
                }; // RAntebrachiumSegmentHelpMarker

                AnyFolder RArticulatioCubiti =
                {
                  AnyVec3 sRel_static = (.Axes0_static'*(...sRArticulatioCubiti - .r0_static)')';
                }; // RArticulatioCubiti

                AnyFolder RArticulatioRadioCarpalis =
                {
                  AnyVec3 sRel_static = (.Axes0_static'*(...sRArticulatioRadioCarpalis - .r0_static)')';
                }; // RArticulatioRadioCarpalis

                AnyFolder &ForearmRef = .....FullModel.Right.Arm.Seg.Forearm;
                ForearmRef = 
                {
                    // Reference node sRel = transposed unit vectors (Axes0_satic') * (static marker - origin of the LCS)
                    AnyRefNode RProcessusStyloideusUlnae = 
                    {
                      sRel = ..RProcessusStyloideusUlnae.sRel_static;
                      AnyDrawNode drw = 
                      {
                        RGB = {1, 1, 0}; 
                        ScaleXYZ = 0.5*{0.025, 0.025, 0.025};
                      }; // drw node
                    }; // RProcessusStyloideusUlnae node

                    AnyRefNode RProcessusStyloideusRadii = 
                    {
                      sRel = ..RProcessusStyloideusRadii.sRel_static;
                      AnyDrawNode drw = 
                      {
                        RGB = {1, 1, 0}; 
                        ScaleXYZ = 0.5*{0.025, 0.025, 0.025};
                      }; // drw node
                    }; // RProcessusStyloideusRadii node

                    AnyRefNode RAntebrachiumSegmentHelpMarker = 
                    {
                      sRel = ..RAntebrachiumSegmentHelpMarker.sRel_static;
                      AnyDrawNode drw = 
                      {
                        RGB = {1, 1, 0}; 
                        ScaleXYZ = 0.5*{0.025, 0.025, 0.025};
                      }; // drw node
                    }; // RAntebrachiumSegmentHelpMarker node
                    
                    AnyRefNode RArticulatioCubiti =
                    {
                      sRel = ..RArticulatioCubiti.sRel_static;
                      AnyDrawNode drw = 
                      {
                        RGB = {1, 1, 0}; 
                        ScaleXYZ = 0.5*{0.025, 0.025, 0.025};
                      }; // drw node              
                    }; // RArticulatioCubiti node

                    AnyRefNode RArticulatioRadioCarpalis = 
                    {
                      sRel = ..RArticulatioRadioCarpalis.sRel_static;
                      AnyDrawNode drw = 
                      {
                        RGB = {1, 1, 0}; 
                        ScaleXYZ = 0.5*{0.025, 0.025, 0.025};
                      }; // drw node
                    }; // RArticulatioRadioCarpalis node
                }; // ForearmRef
              }; // Forearm
            #endif // IncludeElbow == 1 | IncludeWrist == 1

            #if IncludeWrist
              AnyFolder Hand = 
              {
                // ArticulatioRadioCapalis
                // Origin of the Hand (hand) 
                AnyVec3 r0_static = ..sRManusSegmentHelpMarker;
                
                // u1 = y-axis
                AnyVec3 u1_tmp =  0.5*(..sRProcessusStyloideusRadii + ..sRProcessusStyloideusUlnae) - r0_static;  

                // u3 = z-axis
                AnyVec3 u3_tmp = ..sRProcessusStyloideusRadii - ..sRProcessusStyloideusUlnae;

                // u2 = x-axis
                AnyVec3 u2 = cross(u1_tmp,u3_tmp);
                AnyVec3 u3 = cross(u2,u1_tmp);
                AnyVec3 u1 = cross(u3, u2);
                              
                // Rotation Matrix AnyMat33 = {x, y, z} thats why {u2, u1, u3} 
                AnyMat33 Axes0_static = {u2/vnorm(u2),u1/vnorm(u1), u3/vnorm(u3)}'; 

                CreateLoadPositions InitialPos( DynamicPos = UseDanamicLoadPosition ) = 
                {
                  iCluster1 = 
                  { 
                    Main.ModelSetup.DynamicDataSet.Points.Markers._RPROCESSUSSTYLOIDEUSULNAE_.PosInterpol.Data[0][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._RPROCESSUSSTYLOIDEUSULNAE_.PosInterpol.Data[1][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._RPROCESSUSSTYLOIDEUSULNAE_.PosInterpol.Data[2][.....FirstFrameDynamic]
                  }; // dynamic iCluster 1
                  
                  iCluster2 = 
                  { 
                    Main.ModelSetup.DynamicDataSet.Points.Markers._RPROCESSUSSTYLOIDEUSRADII_.PosInterpol.Data[0][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._RPROCESSUSSTYLOIDEUSRADII_.PosInterpol.Data[1][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._RPROCESSUSSTYLOIDEUSRADII_.PosInterpol.Data[2][.....FirstFrameDynamic]
                  }; // dynamic iCluster 2

                  iCluster3 = 
                  { 
                    Main.ModelSetup.DynamicDataSet.Points.Markers._RMANUSSEGMENTHELPMARKER_.PosInterpol.Data[0][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._RMANUSSEGMENTHELPMARKER_.PosInterpol.Data[1][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._RMANUSSEGMENTHELPMARKER_.PosInterpol.Data[2][.....FirstFrameDynamic]
                  }; // dynamic iCluster 3
                  
                  // static sCluster 1-3
                  sCluster1 = ...sRProcessusStyloideusUlnae;
                  sCluster2 = ...sRProcessusStyloideusRadii;
                  sCluster3 = ...sRManusSegmentHelpMarker;
                }; // CreateLoadPositions InitialPos

                AnyFolder RProcessusStyloideusUlnae = 
                {
                  // unclear
                  // Vector with 3 components = transposed unit vectors (Axes0_satic') * (static marker - origin of the LCS)
                  AnyVec3 sRel_static = (.Axes0_static'*(...sRProcessusStyloideusUlnae - .r0_static)')';
                }; // RProcessusStyloideusUlnae

                AnyFolder RProcessusStyloideusRadii = 
                {
                  AnyVec3 sRel_static = (.Axes0_static'*(...sRProcessusStyloideusRadii - .r0_static)')';
                }; // RProcessusStyloideusRadii

                AnyFolder RManusSegmentHelpMarker = 
                {
                  AnyVec3 sRel_static = (.Axes0_static'*(...sRManusSegmentHelpMarker - .r0_static)')';
                }; // RManusSegmentHelpMarker

                AnyFolder RArticulatioRadioCarpalis =
                {
                  AnyVec3 sRel_static = (.Axes0_static'*(...sRArticulatioRadioCarpalis - .r0_static)')';
                }; // RArticulatioRadioCarpalis

                AnyFolder &HandRef = .....FullModel.Right.Arm.Seg.Hand;
                HandRef = 
                {
                    // Reference node sRel = transposed unit vectors (Axes0_satic') * (static marker - origin of the LCS)
                    AnyRefNode RProcessusStyloideusUlnae = 
                    {
                      sRel = ..RProcessusStyloideusUlnae.sRel_static;
                      AnyDrawNode drw = 
                      {
                        RGB = {1, 1, 0}; 
                        ScaleXYZ = 0.5*{0.025, 0.025, 0.025};
                      }; // drw node
                    }; // RProcessusStyloideusUlnae node

                    AnyRefNode RProcessusStyloideusRadii = 
                    {
                      sRel = ..RProcessusStyloideusRadii.sRel_static;
                      AnyDrawNode drw = 
                      {
                        RGB = {1, 1, 0}; 
                        ScaleXYZ = 0.5*{0.025, 0.025, 0.025};
                      }; // drw node
                    }; // RProcessusStyloideusRadii node

                    AnyRefNode RManusSegmentHelpMarker = 
                    {
                      sRel = ..RManusSegmentHelpMarker.sRel_static;
                      AnyDrawNode drw = 
                      {
                        RGB = {1, 1, 0}; 
                        ScaleXYZ = 0.5*{0.025, 0.025, 0.025};
                      }; // drw node

                    }; // RManusSegmentHelpMarker node

                    AnyRefNode RArticulatioRadioCarpalis = 
                    {
                      sRel = ..RArticulatioRadioCarpalis.sRel_static;
                      AnyDrawNode drw = 
                      {
                        RGB = {1, 1, 0}; 
                        ScaleXYZ = 0.5*{0.025, 0.025, 0.025};
                      }; // drw node
                    }; // RArticulatioRadioCarpalis node
                }; // HandRef
              }; // Hand
            #endif // Include Wrist
          }; // Arm      
        #endif // IncludeArms
      }; // Right
    #endif // Include Right
    
    #if IncludeLeft == 1
      AnyFolder Left = 
      {
        #if IncludeLeg == 1
          ////// Inititals positions of the static markers  ///////

          // Exclude by GSU Cologne
          #if GSUFullBodyMarkerSet == 0
            AnyVec3 sLPatella =       
            { 
              Main.ModelSetup.StaticData.Points.Markers.LPatella.PosInterpol.Data[0][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers.LPatella.PosInterpol.Data[1][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers.LPatella.PosInterpol.Data[2][..FirstFrameStatic]
            }; // sLPatella
          #endif // GSUFullBodyMarkerSet

          AnyVec3 sLThighInferior = 
          { 
            Main.ModelSetup.StaticData.Points.Markers._LTHIGHINFERIOR_.PosInterpol.Data[0][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._LTHIGHINFERIOR_.PosInterpol.Data[1][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._LTHIGHINFERIOR_.PosInterpol.Data[2][..FirstFrameStatic]
          }; // sLThighInferior

          AnyVec3 sLThighLateral =  
          { 
            Main.ModelSetup.StaticData.Points.Markers._LTHIGHLATERAL_.PosInterpol.Data[0][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._LTHIGHLATERAL_.PosInterpol.Data[1][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._LTHIGHLATERAL_.PosInterpol.Data[2][..FirstFrameStatic]
          }; // sLThighLateral

          AnyVec3 sLThighSuperior = 
          { 
            Main.ModelSetup.StaticData.Points.Markers._LTHIGHSUPERIOR_.PosInterpol.Data[0][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._LTHIGHSUPERIOR_.PosInterpol.Data[1][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._LTHIGHSUPERIOR_.PosInterpol.Data[2][..FirstFrameStatic]
          }; // sLThighSuperior
          
          AnyVec3 sLKneeLateral =   
          { 
            Main.ModelSetup.StaticData.Points.Markers._LKNEELATERAL_.PosInterpol.Data[0][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._LKNEELATERAL_.PosInterpol.Data[1][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._LKNEELATERAL_.PosInterpol.Data[2][..FirstFrameStatic]
          }; // sLKneeLateral

          AnyVec3 sLKneeMedial =    
          { 
            Main.ModelSetup.StaticData.Points.Markers._LKNEEMEDIAL_.PosInterpol.Data[0][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._LKNEEMEDIAL_.PosInterpol.Data[1][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._LKNEEMEDIAL_.PosInterpol.Data[2][..FirstFrameStatic]
          }; // sLKneeMedial

          AnyVec3 sLShankInferior = 
          { 
            Main.ModelSetup.StaticData.Points.Markers._LSHANKINFERIOR_.PosInterpol.Data[0][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._LSHANKINFERIOR_.PosInterpol.Data[1][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._LSHANKINFERIOR_.PosInterpol.Data[2][..FirstFrameStatic]
          }; // sLShankInferior
          
          AnyVec3 sLShankLateral =  
          { 
            Main.ModelSetup.StaticData.Points.Markers._LSHANKLATERAL_.PosInterpol.Data[0][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._LSHANKLATERAL_.PosInterpol.Data[1][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._LSHANKLATERAL_.PosInterpol.Data[2][..FirstFrameStatic]
          }; // sLShankLateral
          
          AnyVec3 sLTUB =           
          { 
            Main.ModelSetup.StaticData.Points.Markers._LSHANKSUPERIOR_.PosInterpol.Data[0][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._LSHANKSUPERIOR_.PosInterpol.Data[1][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._LSHANKSUPERIOR_.PosInterpol.Data[2][..FirstFrameStatic]
          }; // sLTUB                              
          
          AnyVec3 sLAnkleLateral =  
          { 
            Main.ModelSetup.StaticData.Points.Markers._LANKLELATERAL_.PosInterpol.Data[0][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._LANKLELATERAL_.PosInterpol.Data[1][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._LANKLELATERAL_.PosInterpol.Data[2][..FirstFrameStatic]
          }; // sLAnkleLateral
          
          AnyVec3 sLAnkleMedial =   
          { 
            Main.ModelSetup.StaticData.Points.Markers._LANKLEMEDIAL_.PosInterpol.Data[0][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._LANKLEMEDIAL_.PosInterpol.Data[1][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._LANKLEMEDIAL_.PosInterpol.Data[2][..FirstFrameStatic]
          }; // sLAnkleMedial
          
          AnyVec3 sLHeel =          
          { 
            Main.ModelSetup.StaticData.Points.Markers._LHEEL_.PosInterpol.Data[0][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._LHEEL_.PosInterpol.Data[1][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._LHEEL_.PosInterpol.Data[2][..FirstFrameStatic]
          }; // sLHeel
          
          AnyVec3 sLToe =           
          { 
            Main.ModelSetup.StaticData.Points.Markers._LTOE_.PosInterpol.Data[0][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._LTOE_.PosInterpol.Data[1][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._LTOE_.PosInterpol.Data[2][..FirstFrameStatic]
          }; // sLToe
        
          // Exclude by GSU Cologne
          #if GSUFullBodyMarkerSet == 0
            AnyVec3 sLMidfootSuperior = 
            { 
              Main.ModelSetup.StaticData.Points.Markers.LMidfootSuperior.PosInterpol.Data[0][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers.LMidfootSuperior.PosInterpol.Data[1][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers.LMidfootSuperior.PosInterpol.Data[2][..FirstFrameStatic]
            }; // sLMidfootSuperior
          #endif // GSUFullBodyMarkerSet
        
          AnyVec3 sLMidfootMedial  = 
          { 
            Main.ModelSetup.StaticData.Points.Markers._LMIDFOOTMEDIAL_.PosInterpol.Data[0][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._LMIDFOOTMEDIAL_.PosInterpol.Data[1][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._LMIDFOOTMEDIAL_.PosInterpol.Data[2][..FirstFrameStatic]
          }; // sLMidfootMedial
          
          AnyVec3 sLMidfootLateral =
          { 
            Main.ModelSetup.StaticData.Points.Markers._LMIDFOOTLATERAL_.PosInterpol.Data[0][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._LMIDFOOTLATERAL_.PosInterpol.Data[1][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._LMIDFOOTLATERAL_.PosInterpol.Data[2][..FirstFrameStatic]
          }; // sLMidfootLateral
          
          // Exclude by GSU Cologne
          #if GSUFullBodyMarkerSet == 0
            AnyVec3 sLToeMedial =     
            { 
              Main.ModelSetup.StaticData.Points.Markers._LTOEMEDIAL_.PosInterpol.Data[0][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers._LTOEMEDIAL_.PosInterpol.Data[1][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers._LTOEMEDIAL_.PosInterpol.Data[2][..FirstFrameStatic]
            }; // sLToeMedial
          #endif // GSUFullBodyMarkerSet

          AnyVec3 sLToeLateral =    
          { 
            Main.ModelSetup.StaticData.Points.Markers._LTOELATERAL_.PosInterpol.Data[0][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._LTOELATERAL_.PosInterpol.Data[1][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._LTOELATERAL_.PosInterpol.Data[2][..FirstFrameStatic]
          }; // sLToeLateral

          // Exclude by GSU Cologne
          #if GSUFullBodyMarkerSet == 0
            AnyVec3 sLHindfoot =      
            { 
              Main.ModelSetup.StaticData.Points.Markers.LHindfoot.PosInterpol.Data[0][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers.LHindfoot.PosInterpol.Data[1][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers.LHindfoot.PosInterpol.Data[2][..FirstFrameStatic]
            }; // sLHindfoot
          #endif // GSUFullBodyMarkerSet

          #ifdef USE_KLIEN_HORSMAN_JOINT_CENTER_OFFSET
            // In principle the ankle center can be any point along the revolute knee joint axis, thus
            // selecting the middle point between the lateral and medial malleous makes sense anatomically. 
            // However, to correspond with the LegTD model the ankle center is chosen 
            // to be a little closer to the medial side.
            AnyVec3 sLAnkleCenter = (0.4796*sLAnkleLateral + 0.5204*sLAnkleMedial);                         
            // In principle the knee center can be any point along the revolute knee joint axis, thus
            // selecting the middle point between the epicondyle makes sense anatomically. 
            // However, to correspond with the LegTD model the knee center is chosen 
            // to be a little closer to the lateral side.
            AnyVec3 sLKneeCenter = (0.6013*sLKneeLateral + 0.3987*sLKneeMedial);
          #else
            AnyVec3 sLAnkleCenter = (sLAnkleLateral + sLAnkleMedial) /2; 
            AnyVec3 sLKneeCenter = (sLKneeLateral + sLKneeMedial) /2;
          #endif
            
          AnyFolder Leg =
          {  
            AnyFolder Thigh = 
            {
              //The origin of the  reference frame is found by projecting the 
              // hip-kneeCenter vector to the y axis of the thigh (u2)
              // AnyVec3 r0_static = ..Trunk.RHipJoint.r0_static;//.sRKneeCenter+ ( ..Trunk.RHipJoint.r0_static-.sRKneeCenter)*u2'*u2;
              AnyVec3 r0_static = ..sLKneeCenter+ ( ...Trunk.LHipJoint.r0_static-..sLKneeCenter)*(u2/vnorm(u2))'*(u2/vnorm(u2));
              
              
              // Basis for the thigh coordinate system. 
              // u3 is define by a line though mediala and lateral epicondily makers
              // u1 is a vector pependicular to u3 and HipJoint-sRKneeCenter
              // u2 is the remaining orthonormal direction (cross product of u3, and u1) (y axis of thigh)
              AnyVec3 u3 = (..sLKneeCenter -..sLKneeLateral ) ;
              AnyVec3 u1 = cross(...Trunk.LHipJoint.r0_static -..sLKneeCenter, u3);
              AnyVec3 u2 = cross(u3,u1);
            
              AnyMatrix Axes0_static= {u1/vnorm(u1), u2/vnorm(u2), u3/vnorm(u3)}';
              
              #if IncludeKnee + IncludeHip > 0    
              CreateLoadPositions InitialPos( DynamicPos = UseDanamicLoadPosition ) = {
                  iCluster1 = { Main.ModelSetup.DynamicDataSet.Points.Markers._LTHIGHSUPERIOR_.PosInterpol.Data[0][.....FirstFrameDynamic],
                                Main.ModelSetup.DynamicDataSet.Points.Markers._LTHIGHSUPERIOR_.PosInterpol.Data[1][.....FirstFrameDynamic],
                                Main.ModelSetup.DynamicDataSet.Points.Markers._LTHIGHSUPERIOR_.PosInterpol.Data[2][.....FirstFrameDynamic]};
                  iCluster2 = { Main.ModelSetup.DynamicDataSet.Points.Markers._LTHIGHINFERIOR_.PosInterpol.Data[0][.....FirstFrameDynamic],
                                Main.ModelSetup.DynamicDataSet.Points.Markers._LTHIGHINFERIOR_.PosInterpol.Data[1][.....FirstFrameDynamic],
                                Main.ModelSetup.DynamicDataSet.Points.Markers._LTHIGHINFERIOR_.PosInterpol.Data[2][.....FirstFrameDynamic]};
                  iCluster3 = { Main.ModelSetup.DynamicDataSet.Points.Markers._LTHIGHLATERAL_.PosInterpol.Data[0][.....FirstFrameDynamic],
                                Main.ModelSetup.DynamicDataSet.Points.Markers._LTHIGHLATERAL_.PosInterpol.Data[1][.....FirstFrameDynamic],
                                Main.ModelSetup.DynamicDataSet.Points.Markers._LTHIGHLATERAL_.PosInterpol.Data[2][.....FirstFrameDynamic]};
                  sCluster1 = ...sLThighSuperior;
                  sCluster2 = ...sLThighInferior;
                  sCluster3 = ...sLThighLateral;
              };      
              #endif // IncludeKnee + IncludeHip

              // Exclude by GSU Cologne
              #if GSUFullBodyMarkerSet == 0
                AnyFolder LPatella = 
                {
                  AnyVec3 sRel_static= (.Axes0_static'*(..sLPatella -.r0_static)')';
                }; // LPatella
              #endif // GSUFullBodyMarkerSet
              
              AnyFolder LThighInferior = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sLThighInferior -.r0_static)')';
              }; // LThighInferior

              AnyFolder LThighLateral = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sLThighLateral -.r0_static)')';
              }; // LThighLateral

              AnyFolder LThighSuperior = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sLThighSuperior -.r0_static)')';
              }; // LThighSuperior

              AnyFolder LKneeLateral = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sLKneeLateral -.r0_static)')';
              }; // LKneeLateral

              AnyFolder LKneeMedial = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sLKneeMedial -.r0_static)')';
              }; // LKneeMedial

              AnyFolder HipJoint = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(....Trunk.LHipJoint.r0_static - .r0_static)')';
              }; // HipJoint

              AnyFolder KneeJoint = 
              {       
                AnyVec3 sRel_static= (.Axes0_static'*(...sLKneeCenter - .r0_static)')';
                AnyMat33 ARel_static = {{1,0,0},{0,1,0},{0,0,1}};
                RotAxisAnglesXYZ RotAxisAngles(ROT=ARel_static)={};
              }; // KneeJoint
              
              
              #if IncludeLeft == 1
                #if IncludeHip + IncludeKnee > 0
                  AnyFolder &ThighRef = .....FullModel.Left.Leg.Seg.Thigh;
                  
                  ThighRef = 
                  {
                    // Exclude by GSU Cologne
                    #if GSUFullBodyMarkerSet == 0
                      AnyRefNode LPatella = 
                      {
                        sRel= ..LPatella.sRel_static;
                      }; // LPatella
                    #endif // GSUFullBodyMarkerSet
                
                    AnyRefNode LThighInferior = 
                    {
                      sRel= ..LThighInferior.sRel_static;
                    }; // LThighInferior

                    AnyRefNode LThighLateral = 
                    {
                      sRel = ..LThighLateral.sRel_static;
                    }; // LThighLateral

                    AnyRefNode LThighSuperior = 
                    {
                      sRel = ..LThighSuperior.sRel_static;
                    }; // LThighSuperior

                    AnyRefNode LKneeLateral = 
                    {
                      sRel = ..LKneeLateral.sRel_static;
                    }; // LKneeLateral

                    AnyRefNode LKneeMedial = 
                    {
                      sRel = ..LKneeMedial.sRel_static;
                    }; // LKneeMedial

                    /// Defined based on ISB recommendation for HIP joint rotations
                    AnyRefNode HipStaticMarkerFrame = 
                    {
                      AnyVec3 O = ..HipJoint.sRel_static ;
                      AnyVec3 Y = O - 0.5*(..LKneeLateral.sRel_static + ..LKneeMedial.sRel_static) ;
                      AnyVec3 X = -1*cross(Y,..LKneeLateral.sRel_static -..LKneeMedial.sRel_static );
                      AnyVec3 Z = cross(X,Y);
                      sRel = O;
                      ARel = {X/vnorm(X),Y/vnorm(Y),Z/vnorm(Z)}';
                      //AnyDrawRefFrame drw = {RGB = {1,0,0}; };
                    }; // HipStaticMarkerFrame

                    /// Defined based on Pennock and Clark (1990). Contrary to Grood&Suntay, they use a Z rotaition
                    /// which align with the epicondyle line. 
                    AnyRefNode KneeStaticMarkerFrame = 
                    {
                      AnyVec3 O = 0.5*(..LKneeMedial.sRel_static + ..LKneeLateral.sRel_static);
                      AnyVec3 Z = -1*(..LKneeLateral.sRel_static - ..LKneeMedial.sRel_static);
                      AnyVec3 X = cross( ..HipJoint.sRel_static - O, Z);
                      AnyVec3 Y = cross(Z,X);
                      sRel = O;
                      ARel = {X/vnorm(X),Y/vnorm(Y),Z/vnorm(Z)}';
                      //AnyDrawRefFrame drw = {RGB = {1,0,0}; };
                    }; // KneeStaticMarkerFrame
                    
                    /// Knee joint coordinate system with y-axis pointing from Knee center to  Hip joint center
                    /// z-axis perpendicular to y and pointing towards the medial epicondyle
                    /// x-cross product of y and z
                    AnyRefNode KneeJointCoordinateSystemMechanicalAxis = 
                    {
                      sRel = 0.5*(..LKneeMedial.sRel_static + ..LKneeLateral.sRel_static);
                      ARel = RotMat(sRel,..HipJoint.sRel_static,..LKneeLateral.sRel_static)*RotMat(pi/2,x)*RotMat(-pi/2,z);           
                      //AnyDrawRefFrame drw ={RGB={0,1,0};};
                    }; // KneeJointCoordinateSystemMechanicalAxis

                  }; // ThighRef
                #endif // IncludeHip + IncludeKnee
              #endif // IncludeLeft       
            }; // Thigh
            
            AnyFolder Shank = 
            {

              //The origin of the  reference frame is found by projecting the 
              // kneeCenter-ankleCenter vector onto the y axis of the shank (u2)
              AnyVec3 r0_static = ..sLAnkleCenter+ ( ..sLKneeCenter- ..sLAnkleCenter )*(u2/vnorm(u2))'*(u2/vnorm(u2));      
              
              // Basis for the thigh coordinate system. 
              // u3 is define by a line though mediala and lateral malleolus makers pointing right
              // u1 is a vector pependicular to u3 and the sRKneeCenter-sRAnkleCenter vector
              // u2 is the remaining orthonormal direction (cross product of u3, and u1) (y axis of shank)
              AnyVec3 u3 = (..sLAnkleCenter -..sLAnkleLateral );
              AnyVec3 u1 = cross(..sLKneeCenter - ..sLAnkleCenter, u3);
              AnyVec3 u2 = cross(u3,u1);

              AnyMatrix Axes0_static = {u1/vnorm(u1), u2/vnorm(u2), u3/vnorm(u3)}';
              
              #if IncludeKnee + IncludeAnkle > 0
                CreateLoadPositions InitialPos( DynamicPos = UseDanamicLoadPosition ) = 
                {
                    iCluster1 = 
                    { 
                      Main.ModelSetup.DynamicDataSet.Points.Markers._LSHANKSUPERIOR_.PosInterpol.Data[0][.....FirstFrameDynamic],
                      Main.ModelSetup.DynamicDataSet.Points.Markers._LSHANKSUPERIOR_.PosInterpol.Data[1][.....FirstFrameDynamic],
                      Main.ModelSetup.DynamicDataSet.Points.Markers._LSHANKSUPERIOR_.PosInterpol.Data[2][.....FirstFrameDynamic]
                    }; // dynamic iCluster 1

                    iCluster2 = 
                    { 
                      Main.ModelSetup.DynamicDataSet.Points.Markers._LSHANKINFERIOR_.PosInterpol.Data[0][.....FirstFrameDynamic],
                      Main.ModelSetup.DynamicDataSet.Points.Markers._LSHANKINFERIOR_.PosInterpol.Data[1][.....FirstFrameDynamic],
                      Main.ModelSetup.DynamicDataSet.Points.Markers._LSHANKINFERIOR_.PosInterpol.Data[2][.....FirstFrameDynamic]
                    }; // dynamic iCluster 2


                    iCluster3 = 
                    { 
                      Main.ModelSetup.DynamicDataSet.Points.Markers._LSHANKLATERAL_.PosInterpol.Data[0][.....FirstFrameDynamic],
                      Main.ModelSetup.DynamicDataSet.Points.Markers._LSHANKLATERAL_.PosInterpol.Data[1][.....FirstFrameDynamic],
                      Main.ModelSetup.DynamicDataSet.Points.Markers._LSHANKLATERAL_.PosInterpol.Data[2][.....FirstFrameDynamic]
                    }; // dynamic iCluster 3

                    // static sCluster 1-3
                    sCluster1 = ...sLTUB ;
                    sCluster2 = ...sLShankInferior;
                    sCluster3 = ...sLShankLateral;

                  }; // CreateLoadPositions
              #endif // IncludeKnee + IncludeAnkle
              
              // Exclude by GSU Cologne
              #if GSUFullBodyMarkerSet == 0
                AnyFolder LPatella = 
                {
                  AnyVec3 sRel_static= (.Axes0_static'*(..sLPatella -.r0_static)')';
                };
              #endif // GSUFullBodyMarkerSet

              AnyFolder LKneeLateral = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sLKneeLateral -.r0_static)')';
              }; // LKneeLateral

              AnyFolder LKneeMedial = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sLKneeMedial -.r0_static)')';
              }; // LKneeMedial

              AnyFolder LShankInferior = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sLShankInferior -.r0_static)')';
              }; // LShankInferior

              AnyFolder LShankLateral = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sLShankLateral -.r0_static)')';
              }; // LShankLateral

              AnyFolder LTUB = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sLTUB -.r0_static)')';
              }; // LTUB

              AnyFolder LAnkleLateral = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sLAnkleLateral -.r0_static)')';
              }; // LAnkleLateral

              AnyFolder LAnkleMedial = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sLAnkleMedial -.r0_static)')';
              }; // LAnkleMedial

              AnyFolder HipJoint = 
              {
                AnyVec3 sRel_static=  (.Axes0_static'*(....Trunk.LHipJoint.r0_static - .r0_static)')';
              }; // HipJoint
              
              AnyFolder AnkleJoint = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*( ...sLAnkleCenter -.r0_static)')';
                AnyMat33 ARel_static = {{1,0,0},{0,1,0},{0,0,1}};
                RotAxisAnglesXYZ RotAxisAngles(ROT=ARel_static)={};
              }; // AnkleJoint

              AnyFolder KneeJoint = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sLKneeCenter - .r0_static)')';       
                AnyMat33 ARel_static = RotMat(sRel_static, .LKneeLateral.sRel_static,.HipJoint.sRel_static)* RotMat(-90*pi/180,y);
                RotAxisAnglesXYZ RotAxisAngles(ROT=ARel_static)={};
              }; // KneeJoint
              
              #if IncludeLeft == 1
                #if IncludeKnee + IncludeAnkle > 0
                AnyFolder &ShankRef = .....FullModel.Left.Leg.Seg.Shank;
                
                ShankRef = 
                {
                  // Exclude by GSU Cologne
                  #if GSUFullBodyMarkerSet == 0
                    AnyRefNode LPatella = 
                    {
                      sRel = ..LPatella.sRel_static;
                    };
                  #endif // GSUFullBodyMarkerSet

                  AnyRefNode LShankInferior = 
                  {
                    sRel = ..LShankInferior.sRel_static;
                  }; // LShankInferior

                  AnyRefNode LShankLateral = 
                  {
                    sRel = ..LShankLateral.sRel_static;
                  }; // LShankLateral
                  
                  AnyRefNode LTUB = 
                  {
                    sRel = ..LTUB.sRel_static;
                  }; // LTUB
                  
                  AnyRefNode LAnkleLateral = 
                  {
                    sRel = ..LAnkleLateral.sRel_static;
                  }; // LAnkleLateral

                  AnyRefNode LAnkleMedial = 
                  {
                    sRel = ..LAnkleMedial.sRel_static;
                  }; // LAnkleMedial
                  
                  AnyRefNode LKneeLateral = 
                  {
                    sRel = ..LKneeLateral.sRel_static;
                  }; // LKneeLateral
                  
                  AnyRefNode LKneeMedial = 
                  {
                    sRel = ..LKneeMedial.sRel_static;
                  }; // LKneeMedial

                  AnyRefNode AnkleStaticMarkerFrame = 
                  {
                    AnyVec3 O = 0.5*(..LAnkleMedial.sRel_static + ..LAnkleLateral.sRel_static);
                    AnyVec3 Z = -1*(..LAnkleLateral.sRel_static - ..LAnkleMedial.sRel_static) ;
                    AnyVec3 X = cross( 0.5*(..LKneeMedial.sRel_static+..LKneeLateral.sRel_static)-..LAnkleLateral.sRel_static,
                                      -1*(..LAnkleLateral.sRel_static - ..LAnkleMedial.sRel_static) );  
                    AnyVec3 Y = cross(Z,X); 
                    sRel = O;
                    ARel = {X/vnorm(X),Y/vnorm(Y),Z/vnorm(Z)}';
                    //AnyDrawRefFrame drw = {RGB = {1,0,1}; };
                  }; // AnkleStaticMarkerFrame

                  /// Defined based on Pennock and Clark (1990). Contrary to Grood&Suntay, they use a Z rotaition
                  /// which align with the epicondyle line. 
                  AnyRefNode KneeStaticMarkerFrame = 
                  {
                    AnyVec3 O = 0.5*(..LKneeMedial.sRel_static + ..LKneeLateral.sRel_static);
                    AnyVec3 Z = -1*(..LKneeLateral.sRel_static - ..LKneeMedial.sRel_static) ;
                    AnyVec3 X = cross(Z,0.5*(..LAnkleLateral.sRel_static+..LAnkleMedial.sRel_static) - O);  
                    AnyVec3 Y = cross(Z,X); 
                    sRel = O;
                    ARel = {X/vnorm(X),Y/vnorm(Y),Z/vnorm(Z)}';
                    //AnyDrawRefFrame drw = {RGB = {1,0,1}; };
                  }; // KneeStaticMarkerFrame

                  /// Knee joint coordinate system with y-axis pointing from ankle center to knee joint center
                  /// z-axis perpendicular to y and pointing towards the medial epicondyle
                  /// x-cross product of y and z
                  AnyRefNode KneeJointCoordinateSystemMechanicalAxis = 
                  {
                    sRel = 0.5*(..LKneeMedial.sRel_static + ..LKneeLateral.sRel_static);
                    ARel = RotMat(0.5*(..LAnkleMedial.sRel_static + ..LAnkleLateral.sRel_static),sRel,..LKneeLateral.sRel_static)*RotMat(pi/2,x)*RotMat(-pi/2,z);
                    //AnyDrawRefFrame drw ={RGB={0,1,0};};
                  }; // KneeJointCoordinateSystemMechanicalAxis
        
                }; // ShankRef
                #endif // IncludeKnee + IncludeAnkle
              #endif // IncludeLeft    
            }; // Shank
            
            AnyFolder Talus = 
            {
              AnyVec3 r0_static = ..sLAnkleCenter;
            
              AnyVec3 u3 = (-1)*(..sLAnkleLateral -..sLAnkleCenter );
              AnyVec3 u2 = cross(u3,.Foot.SubtalarJoint.ARel_static'[0]*.Foot.Axes0_static');
              AnyVec3 u1 = cross(u2,u3);
            
              AnyMat33 Axes0_static = {u1/vnorm(u1), u2/vnorm(u2), u3/vnorm(u3)}';
              
              #if IncludeAnkle == 1
                CreateLoadPositions InitialPos( DynamicPos = UseDanamicLoadPosition ) = 
                {
                    iCluster1 = 
                    { 
                      Main.ModelSetup.DynamicDataSet.Points.Markers._LHEEL_.PosInterpol.Data[0][.....FirstFrameDynamic],
                      Main.ModelSetup.DynamicDataSet.Points.Markers._LHEEL_.PosInterpol.Data[1][.....FirstFrameDynamic],
                      Main.ModelSetup.DynamicDataSet.Points.Markers._LHEEL_.PosInterpol.Data[2][.....FirstFrameDynamic]
                    }; // dynamic iCluster1
                    
                    iCluster2 = 
                    { 
                      Main.ModelSetup.DynamicDataSet.Points.Markers._LTOE_.PosInterpol.Data[0][.....FirstFrameDynamic],
                      Main.ModelSetup.DynamicDataSet.Points.Markers._LTOE_.PosInterpol.Data[1][.....FirstFrameDynamic],
                      Main.ModelSetup.DynamicDataSet.Points.Markers._LTOE_.PosInterpol.Data[2][.....FirstFrameDynamic]
                    }; // dynamic iCluster2
                    
                    iCluster3 = 
                    { 
                      Main.ModelSetup.DynamicDataSet.Points.Markers._LMIDFOOTLATERAL_.PosInterpol.Data[0][.....FirstFrameDynamic],
                      Main.ModelSetup.DynamicDataSet.Points.Markers._LMIDFOOTLATERAL_.PosInterpol.Data[1][.....FirstFrameDynamic],
                      Main.ModelSetup.DynamicDataSet.Points.Markers._LMIDFOOTLATERAL_.PosInterpol.Data[2][.....FirstFrameDynamic]
                    }; // dynamic iCluster3
                    
                    //static sCluster 1-3
                    sCluster1 = ...sLHeel;
                    sCluster2 = ...sLToe;
                    sCluster3 = ...sLMidfootLateral;
                }; // CreateLoadPositions
              #endif // IncludeAnkle
              
              AnyFolder AnkleJoint = 
              {
                AnyVec3 sRel_static = (.Axes0_static'*( ...sLAnkleCenter -.r0_static)')';
                AnyMat33 ARel_static = .Axes0_static'*..Shank.Axes0_static;
                RotAxisAnglesXYZ RotAxisAngles(ROT=ARel_static)={};
              }; // AnkleJoint

              AnyFolder SubtalarJoint = 
              {
                // Transform subtalarjoint out of foot coordianates and into talus coordinates
                AnyVec3 sRel_static= (..Foot.r0_static+ ..Foot.SubtalarJoint.sRel_static*..Foot.Axes0_static'-.r0_static)*.Axes0_static;
                AnyMat33 ARel_static = .Axes0_static'*(..Foot.Axes0_static*..Foot.SubtalarJoint.ARel_static)  ;   
                RotAxisAnglesXYZ RotAxisAngles(ROT=ARel_static)={};
              }; // SubtalarJoint

              AnyFolder LAnkleLateral = 
              {
                AnyVec3 sRel_static = (.Axes0_static'*(...sLAnkleLateral -.r0_static)')';
              }; // LAnkleLateral

              AnyFolder LAnkleMedial = 
              {
                AnyVec3 sRel_static = (.Axes0_static'*(...sLAnkleMedial -.r0_static)')';
              }; // LAnkleMedial

              AnyFolder LKneeCenter = 
              {
                AnyVec3 sRel_static = (.Axes0_static'*(...sLKneeCenter -.r0_static)')';
              }; // LKneeCenter      
              
              #if IncludeLeft == 1  
                #if IncludeAnkle == 1
                  AnyFolder &TalusRef = .....FullModel.Left.Leg.Seg.Talus;
                  TalusRef = 
                  {
                    AnyRefNode LKneeCenter = 
                    {
                      sRel = ..LKneeCenter.sRel_static;
                    }; // LKneeCenter
                  }; // TalusRef
                #endif // IncludeAnkle
              #endif // IncludeLeft  
            }; // Talus        
            
            AnyFolder Foot = 
            {
              // Initial Segment position
              AnyVec3 r0_static = ..sLHeel; 
              
              // Foot Cordianate system changed to follow the lab, with x axis pointing to toe node
              AnyVec3 u2 = {0,0,1};
              AnyVec3 u3 = cross(..sLToe-..sLHeel,u2);
              AnyVec3 u1 = cross(u2,u3);
            
              AnyMatrix Axes0_static = {u1/vnorm(u1), u2/vnorm(u2), u3/vnorm(u3)}';
              
              #if IncludeAnkle == 1
              CreateLoadPositions InitialPos( DynamicPos = UseDanamicLoadPosition ) = 
              {
                  iCluster1 = 
                  { 
                    Main.ModelSetup.DynamicDataSet.Points.Markers._LHEEL_.PosInterpol.Data[0][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._LHEEL_.PosInterpol.Data[1][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._LHEEL_.PosInterpol.Data[2][.....FirstFrameDynamic]
                  }; // dynamic iCluster 1
                  
                  iCluster2 = 
                  { 
                    Main.ModelSetup.DynamicDataSet.Points.Markers._LTOE_.PosInterpol.Data[0][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._LTOE_.PosInterpol.Data[1][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._LTOE_.PosInterpol.Data[2][.....FirstFrameDynamic]
                  }; // dynamic iCluster 2
                  
                  iCluster3 = 
                  { 
                    Main.ModelSetup.DynamicDataSet.Points.Markers._LMIDFOOTLATERAL_.PosInterpol.Data[0][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._LMIDFOOTLATERAL_.PosInterpol.Data[1][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._LMIDFOOTLATERAL_.PosInterpol.Data[2][.....FirstFrameDynamic]
                  }; // dynamic iCluster 3
                  
                  // static sCluster 1-3
                  sCluster1 = ...sLHeel;
                  sCluster2 = ...sLToe;
                  sCluster3 = ...sLMidfootLateral;

              }; // CreateLoadPositions
              #endif // IncludeAnkle
              
              AnyFolder LKneeMedial = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sLKneeMedial -.r0_static)')';
              }; // LKneeMedial
              
              AnyFolder LKneeLateral = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sLKneeLateral -.r0_static)')';
              }; // LKneeLateral
              
              AnyFolder LHeel = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sLHeel -.r0_static)')';
              }; // LHeel

              // Exclude by GSU Cologne
              #if GSUFullBodyMarkerSet == 0
                AnyFolder LHindfoot = 
                {
                  AnyVec3 sRel_static= (.Axes0_static'*(..sLHindfoot -.r0_static)')';
                }; // LHindfoot

                AnyFolder LMidfootSuperior = 
                {
                  AnyVec3 sRel_static= (.Axes0_static'*(..sLMidfootSuperior -.r0_static)')';
                }; // LMidfootSuperior

                AnyFolder LToeMedial = 
                {
                  AnyVec3 sRel_static= (.Axes0_static'*(..sLToeMedial -.r0_static)')';
                }; // LToeMedial

              #endif // GSUFullBodyMarkerSet

              AnyFolder LToe = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sLToe -.r0_static)')';
              }; // LToe
            
              AnyFolder LMidfootMedial = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sLMidfootMedial -.r0_static)')';
              }; // LMidfootMedial

              AnyFolder LMidfootLateral = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sLMidfootLateral -.r0_static)')';
              }; // LMidfootLateral
             
              AnyFolder LToeLateral = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sLToeLateral -.r0_static)')';
              }; // LToeLateral

              AnyFolder AnkleJoint = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*( ...sLAnkleCenter -.r0_static)')';
                AnyMat33 ARel_static = .Axes0_static'*..Talus.Axes0_static;        
              }; // AnkleJoint

              AnyFolder SubtalarJoint = 
              {
                AnyVar zRot = 42*pi/180;
                AnyVar yRot = (-1)*25*pi/180;
                AnyVar zPos = -(1)*0.00;
                AnyVar yPos = -0.01;
                AnyVec3 sRel_static = .AnkleJoint.sRel_static +yPos *cross(.AnkleJoint.ARel_static'[2],ARel_static'[0]) + zPos* .AnkleJoint.ARel_static'[2];
                AnyMat33 ARel_static = RotMat(yRot,y)*RotMat(zRot,z);
                
                RotAxisAnglesXYZ RotAxisAngles(ROT=ARel_static)={};     
              }; // SubtalarJoint

              AnyFolder LAnkleLateral = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sLAnkleLateral -.r0_static)')';
              }; // LAnkleLateral

              AnyFolder LAnkleMedial = 
              {
                AnyVec3 sRel_static= (.Axes0_static'*(...sLAnkleMedial -.r0_static)')';
              }; // LAnkleMedial
              
              
              #if IncludeLeft == 1
                #if IncludeAnkle == 1
                  AnyFolder &FootRef = .....FullModel.Left.Leg.Seg.Foot;
                  
                  FootRef = 
                  {
                    AnyRefNode LHeel = 
                    {
                      sRel = ..LHeel.sRel_static;
                    }; // LHeel

                    #if GSUFullBodyMarkerSet == 0
                      AnyRefNode LHindfoot = 
                      {
                        sRel = ..LHindfoot.sRel_static;
                      }; // LHindfoot

                      AnyRefNode LMidfootSuperior = 
                      {
                        sRel = ..LMidfootSuperior.sRel_static;
                      }; // LMidfootSuperior

                      AnyRefNode LToeMedial = 
                      {
                        sRel = ..LToeMedial.sRel_static;
                      }; // LToeMedial

                    #endif // GSUFullBodyMarkerSet

                    AnyRefNode LToe = 
                    {
                      sRel = ..LToe.sRel_static;
                    }; // LToe
                    
                    AnyRefNode LMidfootMedial = 
                    {
                      sRel = ..LMidfootMedial.sRel_static;
                    }; // LMidfootMedial

                    AnyRefNode LMidfootLateral = 
                    {
                      sRel = ..LMidfootLateral.sRel_static;
                    }; // LMidfootLateral

                    AnyRefNode LToeLateral = 
                    {
                      sRel = ..LToeLateral.sRel_static;
                    }; // LToeLateral
                    
                    AnyRefNode LAnkleLateral = 
                    {
                      sRel = ..LAnkleLateral.sRel_static;
                    }; // LAnkleLateral
                    
                    AnyRefNode LAnkleMedial = 
                    {
                      sRel = ..LAnkleMedial.sRel_static;
                    }; // LAnkleMedial
                    
                    AnyRefNode AnkleStaticMarkerFrame = 
                    {
                      AnyVec3 O =  0.5*(..LAnkleMedial.sRel_static + ..LAnkleLateral.sRel_static);
                      AnyVec3 Y =  0.5*(..LKneeMedial.sRel_static + ..LKneeLateral.sRel_static)-
                                    0.5*(..LAnkleMedial.sRel_static + ..LAnkleLateral.sRel_static);
                      AnyVec3 X = -1*cross( ..LKneeLateral.sRel_static-..LKneeMedial.sRel_static,
                                        0.5*(..LAnkleLateral.sRel_static + ..LAnkleMedial.sRel_static)-..LKneeLateral.sRel_static);  
                      AnyVec3 Z = cross(X,Y); 
                      sRel = O;
                      ARel = {X/vnorm(X),Y/vnorm(Y),Z/vnorm(Z)}';
                      //AnyDrawRefFrame drw = {RGB = {1,0,0}; };
                    }; // AnkleStaticMarkerFrame
                  }; // FootRef
                #endif // IncludeAnkle
              #endif // IncludeLeft
            }; // Foot
          }; // Leg
        #endif // IncludeLeg

        #if IncludeArm == 1      
          // Initialize static markers for the arm segments
          #if IncludeShoulder == 1
            // AC: Acromion
            AnyVec3 sLAcromion = 
            { 
              Main.ModelSetup.StaticData.Points.Markers._LACROMION_.PosInterpol.Data[0][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers._LACROMION_.PosInterpol.Data[1][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers._LACROMION_.PosInterpol.Data[2][..FirstFrameStatic]
            }; // sLAcromion

            AnyVec3 sLArticulatioAcromioClavicularis = 
            { 
              Main.ModelSetup.StaticData.Points.Markers._LACROMION_.PosInterpol.Data[0][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers._LACROMION_.PosInterpol.Data[1][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers._LACROMION_.PosInterpol.Data[2][..FirstFrameStatic]
            }; // sLArticulatioAcromioClavicularis

            // Estimation of the Sternoclavicular (SC) joint center from the Incisura jugularis (IJ) 
            // based on the values for a 57 year old right muscular male shoulder with an estimated 
            // body length of 168 cm provided by Klein Breteler, M. D., Spoor, C. W., & van der Helm, F. C.T. (1999)
            // Values are provided in centimetre [cm]
            #if USE_KLEIN_BRETELER_SC_JOINT_CENTER_ESTIMATION == 1           
              // AnyVec3 sLArticulatioSternoClavicularis = 
              // {
              //   (Main.ModelSetup.StaticData.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[0][..FirstFrameStatic]+2.45/100),
              //   (Main.ModelSetup.StaticData.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[1][..FirstFrameStatic]-2.25/100),
              //   (Main.ModelSetup.StaticData.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[2][..FirstFrameStatic]-0.80/100)
              // }; // sLArticulatioSternoClavicularis

              AnyVec3 sLArticulatioSternoClavicularis = .Trunk.Thorax.LArticulatioSternoClavicularis.sRel_gcs;

            #else
              AnyVec3 sLArticulatioSternoClavicularis = 
              {
                (Main.ModelSetup.StaticData.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[0][..FirstFrameStatic]),
                (Main.ModelSetup.StaticData.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[1][..FirstFrameStatic]),
                (Main.ModelSetup.StaticData.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[2][..FirstFrameStatic])
              }; // sLArticulatioSternoClavicularis     
            #endif // USE_KLEIN_BRETELER_SC_JOINT_CENTER_ESTIMATION

            // Estimation of the Trigonum spinae scapulae (TS), Angulus inferior (AI) and Angulus acromii (AA)
            // based on values from subject 2 in respect to the Incisura jugularis (IJ). Values are provided by
            // Van der Helm, F.C.T., Veeger, H.E.J., Pronk, G. M., van der Woude, L.H.V., & Rozendal, R. H. (1992)
            // Values are provided in millimetre [mm]
            #if USE_VAN_DER_HELM_SCAPULA_ESTIMATION == 1
              AnyVec3 sLTrigonumSpinaeScapulae = 
              {
                (Main.ModelSetup.StaticData.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[0][..FirstFrameStatic]-164.9/1000),
                (Main.ModelSetup.StaticData.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[1][..FirstFrameStatic]+57.3/1000),
                (Main.ModelSetup.StaticData.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[2][..FirstFrameStatic]-2.7/1000)
              };

              AnyVec3 sLAngulusInferior = 
              {
                (Main.ModelSetup.StaticData.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[0][..FirstFrameStatic]-170.8/1000),
                (Main.ModelSetup.StaticData.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[1][..FirstFrameStatic]+102.9/1000),
                (Main.ModelSetup.StaticData.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[2][..FirstFrameStatic]-97.4/1000)
              };

              AnyVec3 sLAngulusAcromii = 
              {
                (Main.ModelSetup.StaticData.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[0][..FirstFrameStatic]-104.3/1000),
                (Main.ModelSetup.StaticData.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[1][..FirstFrameStatic]+157.9/1000),
                (Main.ModelSetup.StaticData.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[2][..FirstFrameStatic]+74.7/1000)
              };

            // If TS, AI and AA are part of the markerset, markers will be used directly  
            #else
              AnyVec3 sLTrigonumSpinaeScapulae = 
              {
                (Main.ModelSetup.StaticData.Points.Markers._LTRIGONUMSPINAESCAPULAE_.PosInterpol.Data[0][..FirstFrameStatic]),
                (Main.ModelSetup.StaticData.Points.Markers._LTRIGONUMSPINAESCAPULAE_.PosInterpol.Data[1][..FirstFrameStatic]),
                (Main.ModelSetup.StaticData.Points.Markers._LTRIGONUMSPINAESCAPULAE_.PosInterpol.Data[2][..FirstFrameStatic])
              };

              AnyVec3 sLAngulusInferior = 
              {
                (Main.ModelSetup.StaticData.Points.Markers._LANGULUSINFERIOR_.PosInterpol.Data[0][..FirstFrameStatic]),
                (Main.ModelSetup.StaticData.Points.Markers._LANGULUSINFERIOR_.PosInterpol.Data[1][..FirstFrameStatic]),
                (Main.ModelSetup.StaticData.Points.Markers._LANGULUSINFERIOR_.PosInterpol.Data[2][..FirstFrameStatic])
              };

              AnyVec3 sLAngulusAcromii = 
              {
                (Main.ModelSetup.StaticData.Points.Markers._LANGULUSACROMII_.PosInterpol.Data[0][..FirstFrameStatic]),
                (Main.ModelSetup.StaticData.Points.Markers._LANGULUSACROMII_.PosInterpol.Data[1][..FirstFrameStatic]),
                (Main.ModelSetup.StaticData.Points.Markers._LANGULUSACROMII_.PosInterpol.Data[2][..FirstFrameStatic])
              };
            #endif // USE_VAN_DER_HELM_SCAPULA_ESTIMATION

          #endif // IncludeShoulder

          #if IncludeShoulder == 1 | IncludeElbow == 1
            
            // Estimation of the Glenohumeral (GH) joint center based on the multiple regression model 
            // provided by Meskers, C.G.M., van der Helm, F. C. T., Rozendaal, L. A., & Rozing, P. M. (1997). 
            // In vivo estimation of the glenohumeral joint rotation center from scapular bony landmarks 
            // by linear regression. Journal of Biomechanics, 31(1), 93–96. 
            // https://doi.org/10.1016/S0021-9290(97)00101-2
            // Marker set must contain markers for Trigonum Spinae Scapulae (TS), Angulus Inferior (AI), 
            // Angulus Acromialis (AA) and processus coracoideus (PC)
            #if USE_MESKERS_GH_JOINT_CENTER_ESTIMATION == 1
              AnyVec3 sLProcessusCoracoideus = 
              {
                (Main.ModelSetup.StaticData.Points.Markers._LPROCESSUSCORACOIDEUS_.PosInterpol.Data[0][..FirstFrameStatic]),
                (Main.ModelSetup.StaticData.Points.Markers._LPROCESSUSCORACOIDEUS_.PosInterpol.Data[1][..FirstFrameStatic]),
                (Main.ModelSetup.StaticData.Points.Markers._LPROCESSUSCORACOIDEUS_.PosInterpol.Data[2][..FirstFrameStatic])
              }; // sLProcessusCoracoideus

              AnyVec3 sLArticulatioGlenoHumeralis = Arm.Scapula.LArticulatioGlenoHumeralis.sRel_gcs; 
            #endif // USE_MESKERS_GH_JOINT_CENTER_ESTIMATION
            
            // Estimation of the Glenohumeral (GH) joint center from the Incisura jugularis (IJ) 
            // based on the values for a 57 year old right muscular male shoulder with an estimated 
            // body length of 168 cm provided by Klein Breteler, M. D., Spoor, C. W., & van der Helm, F. C.T. (1999)
            // right values were mirrored to the left by changing the sign of the medio lateral axis 
            #if USE_KLEIN_BRETELER_GH_JOINT_CENTER_ESTIMATION == 1              
              AnyVec3 sLArticulatioGlenoHumeralis = 
              { 
                (Main.ModelSetup.StaticData.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[0][..FirstFrameStatic]+8.11/100),
                (Main.ModelSetup.StaticData.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[1][..FirstFrameStatic]-16.37/100),
                (Main.ModelSetup.StaticData.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[2][..FirstFrameStatic]-1.79/100)
              }; // sLArticulatioGlenoHumeralis
            #endif // USE_KLEIN_BRETELER_GH_JOINT_CENTER_ESTIMATION
            
            // Estimation of the Glenohumeral (GH) joint center
            // based on values from subject 2 in respect to the Incisura jugularis (IJ). Values are provided by
            // Van der Helm, F.C.T., Veeger, H.E.J., Pronk, G. M., van der Woude, L.H.V., & Rozendal, R. H. (1992)   
            #if USE_VAN_DER_HELM_GH_JOINT_CENTER_ESTIMATION == 1
              AnyVec3 sLArticulatioGlenoHumeralis = 
              { 
                (Main.ModelSetup.StaticData.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[0][..FirstFrameStatic]+74.3/1000),
                (Main.ModelSetup.StaticData.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[1][..FirstFrameStatic]-153.6/1000),
                (Main.ModelSetup.StaticData.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[2][..FirstFrameStatic]+45.1/1000)
              }; // sLArticulatioGlenoHumeralis
            #endif // USE_VAN_DER_HELM_GH_JOINT_CENTER_ESTIMATION
            
            // GH: Articulatio glenohumeralis rotation center, estimated by the use of acromion (AC) marker and tuberculum majus (TM) marker. 
            // GH(x) = AC(x), GH(y) = TM(y), GH(z) = 0.5 * (AC(z) + TM(z))  
            #if USE_MESKERS_GH_JOINT_CENTER_ESTIMATION == 0 & USE_KLEIN_BRETELER_GH_JOINT_CENTER_ESTIMATION == 0 & USE_VAN_DER_HELM_GH_JOINT_CENTER_ESTIMATION == 0
            AnyVec3 sLArticulatioGlenoHumeralis = 
              { 
                Main.ModelSetup.StaticData.Points.Markers._LACROMION_.PosInterpol.Data[0][..FirstFrameStatic],
                Main.ModelSetup.StaticData.Points.Markers._LTUBERCULUMMAJUS_.PosInterpol.Data[1][..FirstFrameStatic],
                (0.5* ( Main.ModelSetup.StaticData.Points.Markers._LACROMION_.PosInterpol.Data[2][..FirstFrameStatic]
                      + Main.ModelSetup.StaticData.Points.Markers._LTUBERCULUMMAJUS_.PosInterpol.Data[2][..FirstFrameStatic]))
              }; // sLArticulatioGlenoHumeralis
            #endif // USE_MESKERS_GH_JOINT_CENTER_ESTIMATION, USE_KLEIN_BRETELER_GH_JOINT_CENTER_ESTIMATION and 
            // USE_VAN_DER_HELM_GH_JOINT_CENTER_ESTIMATION equal to 0

            // TM: Tuberculum majus
            AnyVec3 sLTuberculumMajus = 
            { 
              Main.ModelSetup.StaticData.Points.Markers._LTUBERCULUMMAJUS_.PosInterpol.Data[0][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers._LTUBERCULUMMAJUS_.PosInterpol.Data[1][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers._LTUBERCULUMMAJUS_.PosInterpol.Data[2][..FirstFrameStatic]
            }; // sLTuberculumMajus

            // RUpperArm: Help marker located on the Humerus (arm) segment
            AnyVec3 sLBrachiumSegmentHelpMarker = 
            { 
              Main.ModelSetup.StaticData.Points.Markers._LBRACHIUMSEGMENTHELPMARKER_.PosInterpol.Data[0][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers._LBRACHIUMSEGMENTHELPMARKER_.PosInterpol.Data[1][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers._LBRACHIUMSEGMENTHELPMARKER_.PosInterpol.Data[2][..FirstFrameStatic]
            }; // sLBrachiumSegmentHelpMarker

          #endif //IncludeShoulder == 1 | IncludeElbow == 1

          #if IncludeShoulder == 1 | IncludeElbow == 1 | IncludeWrist == 1
            // EM: Most caudal point on medial epicondyle of the humerus
            // Epicondylus medialis humeri
            AnyVec3 sLEpicondylusMedialisHumeri = 
            { 
              Main.ModelSetup.StaticData.Points.Markers._LEPICONDYLUSMEDIALISHUMERI_.PosInterpol.Data[0][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers._LEPICONDYLUSMEDIALISHUMERI_.PosInterpol.Data[1][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers._LEPICONDYLUSMEDIALISHUMERI_.PosInterpol.Data[2][..FirstFrameStatic]
            }; // sLEpicondylusMedialisHumeri

            // EL: Most caudal point on lateral epicondyle of the humerus
            // Epicondylus lateralis humeri
            AnyVec3 sLEpicondylusLateralisHumeri = 
            { 
              Main.ModelSetup.StaticData.Points.Markers._LEPICONDYLUSLATERALISHUMERI_.PosInterpol.Data[0][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers._LEPICONDYLUSLATERALISHUMERI_.PosInterpol.Data[1][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers._LEPICONDYLUSLATERALISHUMERI_.PosInterpol.Data[2][..FirstFrameStatic]
            }; // sLEpicondylusLateralisHumeri     

            AnyVec3 sLArticulatioCubiti = 
            {
              (0.5* ( Main.ModelSetup.StaticData.Points.Markers._LEPICONDYLUSMEDIALISHUMERI_.PosInterpol.Data[0][..FirstFrameStatic]
                    + Main.ModelSetup.StaticData.Points.Markers._LEPICONDYLUSLATERALISHUMERI_.PosInterpol.Data[0][..FirstFrameStatic])),
              (0.5* ( Main.ModelSetup.StaticData.Points.Markers._LEPICONDYLUSMEDIALISHUMERI_.PosInterpol.Data[1][..FirstFrameStatic]
                    + Main.ModelSetup.StaticData.Points.Markers._LEPICONDYLUSLATERALISHUMERI_.PosInterpol.Data[1][..FirstFrameStatic])),
              (0.5* ( Main.ModelSetup.StaticData.Points.Markers._LEPICONDYLUSMEDIALISHUMERI_.PosInterpol.Data[2][..FirstFrameStatic]
                    + Main.ModelSetup.StaticData.Points.Markers._LEPICONDYLUSLATERALISHUMERI_.PosInterpol.Data[2][..FirstFrameStatic]))          
            }; // sLArticulatioCubiti

          #endif // IncludeShoulder == 1 | IncludeElbow == 1 | IncludeWrist == 1

          #if IncludeElbow == 1 | IncludeWrist == 1
            // Markers for the Forearm (forearm) segment
            // US: Most caudal–medial point on the ulnar styloid
            // Processus styloideus ulnae
            AnyVec3 sLProcessusStyloideusUlnae = 
            { 
              Main.ModelSetup.StaticData.Points.Markers._LPROCESSUSSTYLOIDEUSULNAE_.PosInterpol.Data[0][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers._LPROCESSUSSTYLOIDEUSULNAE_.PosInterpol.Data[1][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers._LPROCESSUSSTYLOIDEUSULNAE_.PosInterpol.Data[2][..FirstFrameStatic]
            }; // sLProcessusStyloideusUlnae
            
            // RS: Most caudal–lateral point on the radial styloid
            // Processus styloideus radii
            AnyVec3 sLProcessusStyloideusRadii = 
            { 
              Main.ModelSetup.StaticData.Points.Markers._LPROCESSUSSTYLOIDEUSRADII_.PosInterpol.Data[0][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers._LPROCESSUSSTYLOIDEUSRADII_.PosInterpol.Data[1][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers._LPROCESSUSSTYLOIDEUSRADII_.PosInterpol.Data[2][..FirstFrameStatic]
            }; // sLProcessusStyloideusRadii   

            // LFA: Help marker located on the Forearm (forearm) segment  
            AnyVec3 sLAntebrachiumSegmentHelpMarker = 
            { 
              Main.ModelSetup.StaticData.Points.Markers._LANTEBRACHIUMSEGMENTHELPMARKER_.PosInterpol.Data[0][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers._LANTEBRACHIUMSEGMENTHELPMARKER_.PosInterpol.Data[1][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers._LANTEBRACHIUMSEGMENTHELPMARKER_.PosInterpol.Data[2][..FirstFrameStatic]
            }; // sLAntebrachiumSegmentHelpMarker
          #endif // IncludeElbow == 1 | IncludeWrist == 1

          #if IncludeWrist == 1
            AnyVec3 sLManusSegmentHelpMarker = 
            {
              Main.ModelSetup.StaticData.Points.Markers._LMANUSSEGMENTHELPMARKER_.PosInterpol.Data[0][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers._LMANUSSEGMENTHELPMARKER_.PosInterpol.Data[1][..FirstFrameStatic],
              Main.ModelSetup.StaticData.Points.Markers._LMANUSSEGMENTHELPMARKER_.PosInterpol.Data[2][..FirstFrameStatic]
            }; // sLManusSegmentHelpMarker

            AnyVec3 sLArticulatioRadioCarpalis = 
            {
              (0.5* ( Main.ModelSetup.StaticData.Points.Markers._LPROCESSUSSTYLOIDEUSRADII_.PosInterpol.Data[0][..FirstFrameStatic]
                    + Main.ModelSetup.StaticData.Points.Markers._LPROCESSUSSTYLOIDEUSULNAE_.PosInterpol.Data[0][..FirstFrameStatic])),
              (0.5* ( Main.ModelSetup.StaticData.Points.Markers._LPROCESSUSSTYLOIDEUSRADII_.PosInterpol.Data[1][..FirstFrameStatic]
                    + Main.ModelSetup.StaticData.Points.Markers._LPROCESSUSSTYLOIDEUSULNAE_.PosInterpol.Data[1][..FirstFrameStatic])),
              (0.5* ( Main.ModelSetup.StaticData.Points.Markers._LPROCESSUSSTYLOIDEUSRADII_.PosInterpol.Data[2][..FirstFrameStatic]
                    + Main.ModelSetup.StaticData.Points.Markers._LPROCESSUSSTYLOIDEUSULNAE_.PosInterpol.Data[2][..FirstFrameStatic]))          
            }; // sLArticulatioRadioCarpalis
          #endif // IncludeWrist
          
          AnyFolder Arm = 
          {
            #if IncludeShoulder == 1
              AnyFolder Clavicle =
              {
                #if USE_KLEIN_BRETELER_SC_JOINT_CENTER_ESTIMATION == 1
                  // Origin = Oc = The origin coincident with the most ventral point on the sternoclavicular joint (SC) (Wu, van der Helm et al. 2005).
                  AnyVec3 r0_static = ..sLArticulatioSternoClavicularis;

                  // u3 = z-axis = Zc = The line connecting the most ventral point on the sternoclavicular joint (SC) and the most
                  // dorsal point on the acromioclavicular joint (AC) (shared with the scapula), pointing to AC (Wu, van der Helm et al. 2005).
                  AnyVec3 u3_tmp = ..sLAcromion - ..sLArticulatioSternoClavicularis;
                #else
                  // Origin = Oc = The origin coincident with the most ventral point on the sternoclavicular joint (SC) (Wu, van der Helm et al. 2005).
                  AnyVec3 r0_static = ...Trunk.sIncisuraJugularis;

                  // u3 = z-axis = Zc = The line connecting the most ventral point on the sternoclavicular joint (SC) and the most
                  // dorsal point on the acromioclavicular joint (AC) (shared with the scapula), pointing to AC (Wu, van der Helm et al. 2005).
                  AnyVec3 u3_tmp = ..sLAcromion - ...Trunk.sIncisuraJugularis;
                #endif

                // u2 = x-axis = Xc = The line perpendicular to Zc and Yt, pointing foward.
                // Note that the Xc-axis is defined with respect to the vertical axis of the thorax
                // (Yt-axis) because only two bony landmarks can be discerned at the clavicle (Wu, van der Helm et al. 2005).
                AnyVec3 u2_tmp = cross(...Trunk.Thorax.u1, u3_tmp);

                // u1 = y-axis = Yc = The common line perpendicular to the Xc- and Zc-axis, pointing upward (Wu, van der Helm et al. 2005).
                AnyVec3 u1 = cross(u3_tmp, u2_tmp);
                
                AnyVec3 u2 = cross(u1, u3_tmp);
                AnyVec3 u3 = cross(u2, u1);

                // Rotation Matrix AnyMat33 = {x, y, z} thats why {u2, u1, u3} 
                AnyMat33 Axes0_static = {u2/vnorm(u2),u1/vnorm(u1), u3/vnorm(u3)}';

                // Current issue: Clavicle segment only has two bony landmarks, which marker used for iCluster3 ? tmp: iCluster 3 = PX of thorax
                CreateLoadPositions InitialPos( DynamicPos = UseDanamicLoadPosition ) = 
                {
                  iCluster1 = 
                  { 
                    Main.ModelSetup.DynamicDataSet.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[0][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[1][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[2][.....FirstFrameDynamic]
                  }; // dynamic iCluster1

                  iCluster2 = 
                  { 
                    Main.ModelSetup.DynamicDataSet.Points.Markers._LACROMION_.PosInterpol.Data[0][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._LACROMION_.PosInterpol.Data[1][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._LACROMION_.PosInterpol.Data[2][.....FirstFrameDynamic]
                  }; // dynamic iCluster2

                  iCluster3 = 
                  { 
                    Main.ModelSetup.DynamicDataSet.Points.Markers._PROCESSUSXIPHOIDEUS_.PosInterpol.Data[0][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._PROCESSUSXIPHOIDEUS_.PosInterpol.Data[1][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._PROCESSUSXIPHOIDEUS_.PosInterpol.Data[2][.....FirstFrameDynamic]
                  }; // dynamic iCluster3

                  // static sCluster 1-3
                  sCluster1 = ....Trunk.sIncisuraJugularis;
                  sCluster2 = ...sLAcromion;
                  sCluster3 = ....Trunk.sProcessusXiphoideus;
                }; // CreateLoadPositions

                AnyFolder IncisuraJugularis = 
                {
                  AnyVec3 sRel_static= (.Axes0_static'*(....Trunk.sIncisuraJugularis - .r0_static)')';
                }; // IncisuraJugularis

                AnyFolder LAcromion = 
                {
                  AnyVec3 sRel_static= (.Axes0_static'*(...sLAcromion - .r0_static)')';
                }; // LAcromion

                AnyFolder LArticulatioSternoClavicularis = 
                {
                  AnyVec3 sRel_static= (.Axes0_static'*(...sLArticulatioSternoClavicularis - .r0_static)')';
                }; // LArticulatioSternoClavicularis

                AnyFolder LArticulatioAcromioClavicularis = 
                {
                  AnyVec3 sRel_static= (.Axes0_static'*(...sLArticulatioAcromioClavicularis - .r0_static)')';
                }; // LArticulatioAcromioClavicularis

                AnyFolder &ClaviculaRef = .....FullModel.Left.Arm.Seg.Clavicle;
                ClaviculaRef = 
                {
                  AnyRefNode IncisuraJugularis = 
                  {
                    sRel = ..IncisuraJugularis.sRel_static;
                    AnyDrawNode drw = {RGB = {1, 1, 0}; ScaleXYZ = 0.5*{0.025, 0.025, 0.025};};
                  }; // IncisuraJugularis

                  AnyRefNode LAcromion = 
                  {
                    sRel = ..LAcromion.sRel_static;
                    AnyDrawNode drw = {RGB = {1, 1, 0}; ScaleXYZ = 0.5*{0.025, 0.025, 0.025};};
                  }; // LAcromion

                  AnyRefNode LArticulatioSternoClavicularis = 
                  {
                    sRel = ..LArticulatioSternoClavicularis.sRel_static;
                    AnyDrawNode drw = {RGB = {1, 1, 0}; ScaleXYZ = 0.5*{0.025, 0.025, 0.025};};
                  }; // LArticulatioSternoClavicularis

                  AnyRefNode LArticulatioAcromioClavicularis = 
                  {
                    sRel = ..LArticulatioAcromioClavicularis.sRel_static;
                    AnyDrawNode drw = {RGB = {1, 1, 0}; ScaleXYZ = 0.5*{0.025, 0.025, 0.025};};
                  }; // LArticulatioAcromioClavicularis
                }; // ClaviculaRef
              }; // Clavicle

              AnyFolder Scapula = 
              {
                // The origin of the scapula coincident with AA
                AnyVec3 r0_static = ..sLAngulusAcromii;

                // u3 = z-axis = ISB recommendations: The z-axis line is connecting TS and AA, pointing to AA
                AnyVec3 u3_tmp = r0_static - ..sLTrigonumSpinaeScapulae;

                // u2 = x-axis: The line is perpendicular to the plane formed by
                // AI, AA, and TS, pointing forward. Note that
                // because of the use of AA instead of AC, this
                // plane is not the same as the visual plane of the
                // scapula bone.
                AnyVec3 u2_tmp = cross((..sLAngulusInferior - r0_static),(..sLTrigonumSpinaeScapulae - r0_static));

                // u1 = y-axis: The y-axis is the common line perpendicular to the x- and
                // z-axis, pointing upward.
                AnyVec3 u1_tmp = cross(u3_tmp, u2_tmp);

                AnyVec3 u3 = cross(u2_tmp, u1_tmp);
                AnyVec3 u2 = cross(u1_tmp, u3);
                AnyVec3 u1 = cross(u3, u2);

                // Rotation Matrix AnyMat33 = {x, y, z} thats why {u2, u1, u3} 
                AnyMat33 Axes0_static = {u2/vnorm(u2),u1/vnorm(u1), u3/vnorm(u3)}';

                CreateLoadPositions InitialPos( DynamicPos = UseDanamicLoadPosition ) = 
                {
                  // Left Acromion
                  iCluster1 = 
                  { 
                    Main.ModelSetup.DynamicDataSet.Points.Markers._LACROMION_.PosInterpol.Data[0][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._LACROMION_.PosInterpol.Data[1][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._LACROMION_.PosInterpol.Data[2][.....FirstFrameDynamic]
                  };
                
                  #if USE_VAN_DER_HELM_SCAPULA_ESTIMATION == 1
                    // Left Trigonum spinae scapulae
                    iCluster2 = 
                    {
                      Main.ModelSetup.DynamicDataSet.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[0][.....FirstFrameDynamic]-164.9/1000,
                      Main.ModelSetup.DynamicDataSet.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[1][.....FirstFrameDynamic]+57.3/1000,
                      Main.ModelSetup.DynamicDataSet.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[2][.....FirstFrameDynamic]-2.7/1000
                    };

                    // Left Angulus inferior
                    iCluster3 = 
                    { 
                      Main.ModelSetup.DynamicDataSet.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[0][.....FirstFrameDynamic]-170.8/1000,
                      Main.ModelSetup.DynamicDataSet.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[1][.....FirstFrameDynamic]+102.9/1000,
                      Main.ModelSetup.DynamicDataSet.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[2][.....FirstFrameDynamic]-97.4/1000
                    };
                  #else
                    // Left Trigonum spinae scapulae
                    iCluster2 = 
                    {
                      Main.ModelSetup.DynamicDataSet.Points.Markers._LTRIGONUMSPINAESCAPULAE_.PosInterpol.Data[0][.....FirstFrameDynamic],
                      Main.ModelSetup.DynamicDataSet.Points.Markers._LTRIGONUMSPINAESCAPULAE_.PosInterpol.Data[1][.....FirstFrameDynamic],
                      Main.ModelSetup.DynamicDataSet.Points.Markers._LTRIGONUMSPINAESCAPULAE_.PosInterpol.Data[2][.....FirstFrameDynamic]
                    };

                    // Left Angulus inferior
                    iCluster3 = 
                    { 
                      Main.ModelSetup.DynamicDataSet.Points.Markers._LANGULUSINFERIOR_.PosInterpol.Data[0][.....FirstFrameDynamic],
                      Main.ModelSetup.DynamicDataSet.Points.Markers._LANGULUSINFERIOR_.PosInterpol.Data[1][.....FirstFrameDynamic],
                      Main.ModelSetup.DynamicDataSet.Points.Markers._LANGULUSINFERIOR_.PosInterpol.Data[2][.....FirstFrameDynamic]
                    };
                  #endif
                  
                  sCluster1 = ...sLAcromion;
                  sCluster2 = ...sLTrigonumSpinaeScapulae;
                  sCluster3 = ...sLAngulusInferior;
                }; 

                #if USE_MESKERS_GH_JOINT_CENTER_ESTIMATION == 1
                  // The origin of the scapula coincident with AC
                  AnyVec3 r0_static_Meskers = ..sLAcromion;

                  // u3 = z-axis is perpendicular to the plane through AC, TS and AI pointing backwards
                  AnyVec3 u3_tmp_Meskers = cross((..sLTrigonumSpinaeScapulae - r0_static_Meskers),(..sLAngulusInferior - r0_static_Meskers));

                  // u2 = x-axis: AC - TS / || AC - TS ||
                  AnyVec3 u2_tmp_Meskers = r0_static_Meskers - ..sLTrigonumSpinaeScapulae;

                  // u1 = y-axis: perpendicular to the x and z axis pointing upwards
                  AnyVec3 u1_tmp_Meskers = cross(u3_tmp_Meskers, u2_tmp_Meskers);

                  AnyVec3 u3_Meskers = cross(u2_tmp_Meskers, u1_tmp_Meskers);
                  AnyVec3 u2_Meskers = cross(u1_tmp_Meskers, u3_Meskers);
                  AnyVec3 u1_Meskers = cross(u3_Meskers, u2_Meskers);

                  // Rotation Matrix AnyMat33 = {x, y, z} thats why {u2, u1, u3}
                  // TODO: Check why u3 has to switch sign // Edit 21032020 maybe because z is pointing backward!
                  AnyMat33 Axes0_static_Meskers = {u2_Meskers/vnorm(u2_Meskers),u1_Meskers/vnorm(u1_Meskers), (u3_Meskers/vnorm(u3_Meskers)*-1)}';
                #endif

                AnyFolder LAcromion =
                {
                  AnyVec3 sRel_static = (.Axes0_static'*(...sLAcromion - .r0_static)')';
                  #if USE_MESKERS_GH_JOINT_CENTER_ESTIMATION == 1
                    AnyVec3 sRel_static_Meskers = (.Axes0_static_Meskers'*(...sLAcromion - .r0_static_Meskers)')';
                  #endif
                }; // LAcromion

                AnyFolder LArticulatioAcromioClavicularis =
                {
                  AnyVec3 sRel_static = (.Axes0_static'*(...sLArticulatioAcromioClavicularis - .r0_static)')';
                }; // LArticulatioAcromioClavicularis

                AnyFolder LAngulusAcromii =
                {
                  AnyVec3 sRel_static = (.Axes0_static'*(...sLAngulusAcromii - .r0_static)')';
                  #if USE_MESKERS_GH_JOINT_CENTER_ESTIMATION == 1
                    AnyVec3 sRel_static_Meskers = (.Axes0_static_Meskers'*(...sLAngulusAcromii - .r0_static_Meskers)')';
                  #endif
                }; // LAngulusAcromii

                AnyFolder LAngulusInferior = 
                {
                  AnyVec3 sRel_static = (.Axes0_static'*(...sLAngulusInferior - .r0_static)')';
                  #if USE_MESKERS_GH_JOINT_CENTER_ESTIMATION == 1
                    AnyVec3 sRel_static_Meskers = (.Axes0_static_Meskers'*(...sLAngulusInferior - .r0_static_Meskers)')';
                  #endif
                }; // LAngulusInferior

                AnyFolder LTrigonumSpinaeScapulae = 
                {
                  AnyVec3 sRel_static = (.Axes0_static'*(...sLTrigonumSpinaeScapulae - .r0_static)')';
                  #if USE_MESKERS_GH_JOINT_CENTER_ESTIMATION == 1
                    AnyVec3 sRel_static_Meskers = (.Axes0_static_Meskers'*(...sLTrigonumSpinaeScapulae - .r0_static_Meskers)')';
                  #endif
                }; // LTrigonumSpinaeScapulae
                
                #if USE_MESKERS_GH_JOINT_CENTER_ESTIMATION == 1
                 AnyFolder LProcessusCoracoideus =
                 {
                   AnyVec3 sRel_static = (.Axes0_static'*(...sLProcessusCoracoideus - .r0_static)')';
                   AnyVec3 sRel_static_Meskers = (.Axes0_static_Meskers'*(...sLProcessusCoracoideus - .r0_static_Meskers)')';
                 }; // LProcessusCoracoideus 
                #endif
                
                AnyFolder LArticulatioGlenoHumeralis =
                {
                  #if USE_MESKERS_GH_JOINT_CENTER_ESTIMATION == 1
                    // Meskers reported in [mm], AnyBody requires [m] therefore offset values are converted (*.001)     
                    AnyVar GHx =  18.9743 * 0.001 
                                  + 0.2434 * .LProcessusCoracoideus.sRel_static_Meskers[0]
                                  + 0.2341 * .LAngulusInferior.sRel_static_Meskers[0]
                                  + 0.1590 * sqrt(  (.LAngulusInferior.sRel_static_Meskers[0] - .LAngulusAcromii.sRel_static_Meskers[0])^2
                                                  + (.LAngulusInferior.sRel_static_Meskers[1] - .LAngulusAcromii.sRel_static_Meskers[1])^2
                                                  + (.LAngulusInferior.sRel_static_Meskers[2] - .LAngulusAcromii.sRel_static_Meskers[2])^2)              
                                  + 0.0558  * .LProcessusCoracoideus.sRel_static_Meskers[1];
                    
                    AnyVar GHy =  - 3.8791 * 0.001 
                                  - 0.3940 * sqrt(  (.LAcromion.sRel_static_Meskers[0] - .LAngulusAcromii.sRel_static_Meskers[0])^2
                                                  + (.LAcromion.sRel_static_Meskers[1] - .LAngulusAcromii.sRel_static_Meskers[1])^2
                                                  + (.LAcromion.sRel_static_Meskers[2] - .LAngulusAcromii.sRel_static_Meskers[2])^2)
                                  + 0.1732 * .LProcessusCoracoideus.sRel_static_Meskers[1]
                                  + 0.1205 * .LAngulusInferior.sRel_static_Meskers[0]
                                  - 0.1002 * sqrt(  (.LAcromion.sRel_static_Meskers[0] - .LProcessusCoracoideus.sRel_static_Meskers[0])^2
                                                  + (.LAcromion.sRel_static_Meskers[1] - .LProcessusCoracoideus.sRel_static_Meskers[1])^2
                                                  + (.LAcromion.sRel_static_Meskers[2] - .LProcessusCoracoideus.sRel_static_Meskers[2])^2);                
                    AnyVar GHz =  9.2629 * 0.001
                                  + 1.0255 * .LProcessusCoracoideus.sRel_static_Meskers[2]
                                  - 0.2403 * .LProcessusCoracoideus.sRel_static_Meskers[1]
                                  + 0.1720 * sqrt(  (.LTrigonumSpinaeScapulae.sRel_static_Meskers[0] - .LProcessusCoracoideus.sRel_static_Meskers[0])^2
                                                  + (.LTrigonumSpinaeScapulae.sRel_static_Meskers[1] - .LProcessusCoracoideus.sRel_static_Meskers[1])^2
                                                  + (.LTrigonumSpinaeScapulae.sRel_static_Meskers[2] - .LProcessusCoracoideus.sRel_static_Meskers[2])^2);
                                        
                    AnyVec3 sLArticulatioGlenoHumeralis_Meskers = {GHx, GHy, GHz};

                    // Rotate into LCS of the scapula with origin at AC for Meskers GH Regression
                    AnyVec3 sRel_gcs = ((.Axes0_static_Meskers * (sLArticulatioGlenoHumeralis_Meskers)')' + .r0_static_Meskers);
                    // Rotate into LCS of the scapula with origin at AA
                    AnyVec3 sRel_static = (.Axes0_static'*(sRel_gcs - .r0_static)')';
                  #else
                    AnyVec3 sRel_static = (.Axes0_static'*(...sLArticulatioGlenoHumeralis - .r0_static)')';
                  #endif
                }; // LArticulatioGlenoHumeralis                

                AnyFolder &ScapulaRef = .....FullModel.Left.Arm.Seg.Scapula;
                ScapulaRef = 
                {
                    AnyRefNode LAcromion = 
                    {
                      sRel = ..LAcromion.sRel_static;
                      AnyDrawNode drw = 
                      {
                        RGB = {1, 1, 0}; 
                        ScaleXYZ = 0.5*{0.025, 0.025, 0.025};
                      }; // drw
                    }; // LAcromion

                    AnyRefNode LArticulatioAcromioClavicularis = 
                    {
                      sRel = ..LArticulatioAcromioClavicularis.sRel_static;
                      AnyDrawNode drw = 
                      {
                        RGB = {1, 1, 0}; 
                        ScaleXYZ = 0.5*{0.025, 0.025, 0.025};
                      }; // drw
                    }; // LArticulatioAcromioClavicularis

                    AnyRefNode LAngulusAcromii = 
                    {
                      sRel = ..LAngulusAcromii.sRel_static;
                      AnyDrawNode drw = 
                      {
                        RGB = {1, 1, 0}; 
                        ScaleXYZ = 0.5*{0.025, 0.025, 0.025};
                      }; // drw
                    }; // LAngulusAcromii

                    AnyRefNode LAngulusInferior = 
                    {
                      sRel = ..LAngulusInferior.sRel_static;
                      AnyDrawNode drw = 
                      {
                        RGB = {1, 1, 0}; 
                        ScaleXYZ = 0.5*{0.025, 0.025, 0.025};
                      }; // drw
                    }; // LAngulusInferior

                    AnyRefNode LTrigonumSpinaeScapulae = 
                    {
                      sRel = ..LTrigonumSpinaeScapulae.sRel_static;
                      AnyDrawNode drw = 
                      {
                        RGB = {1, 1, 0}; 
                        ScaleXYZ = 0.5*{0.025, 0.025, 0.025};
                      }; // drw
                    }; // LTrigonumSpinaeScapulae
                    
                    #if USE_MESKERS_GH_JOINT_CENTER_ESTIMATION == 1
                     AnyRefNode LProcessusCoracoideus = 
                     {
                       sRel = ..LProcessusCoracoideus.sRel_static;
                       AnyDrawNode drw = 
                       {
                         RGB = {1, 1, 0}; 
                         ScaleXYZ = 0.5*{0.025, 0.025, 0.025};
                       }; // drw
                     }; // LProcessusCoracoideus
                    #endif
                    
                    AnyRefNode LArticulatioGlenoHumeralis = 
                    {
                      sRel = ..LArticulatioGlenoHumeralis.sRel_static;
                      AnyDrawNode drw = 
                      {
                        RGB = {1, 1, 0}; 
                        ScaleXYZ = 0.5*{0.025, 0.025, 0.025};
                      }; // drw
                    }; // LArticulatioGlenoHumeralis
                }; // ScapulaRef
              }; // Scapula  
            #endif // IncludeShoulder
            #if IncludeShoulder == 1 | IncludeElbow == 1 

              AnyFolder Humerus =
              {   
                #if USE_HUMERUS_OPT_2 == 1 

                  // Humerus option 2       
                  AnyVec3 r0_static = ..sLArticulatioGlenoHumeralis;

                  // u1 = y-axis = ISB recommendations: The line connecting GH and the midpoint of EL and EM, pointing to GH.
                  AnyVec3 u1_tmp =  r0_static - 0.5*(..sLEpicondylusMedialisHumeri + ..sLEpicondylusLateralisHumeri);  

                  //u3 = z-axis = ISB recommendations: The line perpendicular to the plane formed by u1 and u1 of the Forearm segment, pointing to the right.
                  AnyVec3 u3_tmp = cross(u1_tmp,.Forearm.u1);

                  //u2 = x-axis = ISB recommendations: The common line perpendicular to the u3 and u1-axis, pointing forward.
                  AnyVec3 u2 = cross(u1_tmp, u3_tmp);
                  AnyVec3 u1 = cross(u3_tmp, u2);
                  AnyVec3 u3 = cross(u2,u1); 

                #else
                  
                  // Humerus option 1
                  AnyVec3 r0_static = ..sLArticulatioGlenoHumeralis;

                  // u1 = y-axis = ISB recommendations: The line connecting GH and the midpoint of EL and EM, pointing to GH.
                  AnyVec3 u1_tmp =  r0_static - 0.5*(..sLEpicondylusMedialisHumeri + ..sLEpicondylusLateralisHumeri);  

                  //u2 = x-axis = ISB recommendations: The line perpendicular to the plane formed by EL, EM, and GH, pointing forward.
                  AnyVec3 u2_tmp = cross((..sLEpicondylusLateralisHumeri - r0_static),(..sLEpicondylusMedialisHumeri - r0_static));

                  //u3 = z-axis = ISB recommendations: The common line perpendicular to the u1 and u2-axis, pointing to the right.
                  AnyVec3 u3_tmp = cross(u2_tmp,u1_tmp);

                  
                  AnyVec3 u2 = cross(u1_tmp, u3_tmp);
                  AnyVec3 u1 = cross(u3_tmp, u2);
                  AnyVec3 u3 = cross(u2,u1);

                #endif

                // Rotation Matrix AnyMat33 = {x, y, z} thats why {u2, u1, u3} 
                AnyMat33 Axes0_static = {u2/vnorm(u2),u1/vnorm(u1), u3/vnorm(u3)}';

                CreateLoadPositions InitialPos( DynamicPos = UseDanamicLoadPosition ) = 
                {
                  iCluster1 = 
                  { 
                    Main.ModelSetup.DynamicDataSet.Points.Markers._LEPICONDYLUSLATERALISHUMERI_.PosInterpol.Data[0][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._LEPICONDYLUSLATERALISHUMERI_.PosInterpol.Data[1][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._LEPICONDYLUSLATERALISHUMERI_.PosInterpol.Data[2][.....FirstFrameDynamic]
                  }; // dynamic iCluster1
                  
                  iCluster2 = 
                  { 
                    Main.ModelSetup.DynamicDataSet.Points.Markers._LEPICONDYLUSMEDIALISHUMERI_.PosInterpol.Data[0][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._LEPICONDYLUSMEDIALISHUMERI_.PosInterpol.Data[1][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._LEPICONDYLUSMEDIALISHUMERI_.PosInterpol.Data[2][.....FirstFrameDynamic]
                  }; // dynamic iCluster2
                  
                  iCluster3 = 
                  {
                    Main.ModelSetup.DynamicDataSet.Points.Markers._LBRACHIUMSEGMENTHELPMARKER_.PosInterpol.Data[0][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._LBRACHIUMSEGMENTHELPMARKER_.PosInterpol.Data[1][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._LBRACHIUMSEGMENTHELPMARKER_.PosInterpol.Data[2][.....FirstFrameDynamic]
                  }; // dynamic iCluster3

                  // static sCluster 1-3
                  sCluster1 = ...sLEpicondylusLateralisHumeri;
                  sCluster2 = ...sLEpicondylusMedialisHumeri;
                  sCluster3 = ...sLBrachiumSegmentHelpMarker;
                }; // CreateLoadPositions

                AnyFolder LArticulatioCubiti =
                {
                  AnyVec3 sRel_static = (.Axes0_static'*(...sLArticulatioCubiti - .r0_static)')';
                }; // LArticulatioCubiti

                AnyFolder LArticulatioGlenoHumeralis = 
                {
                  AnyVec3 sRel_static = (.Axes0_static'*(...sLArticulatioGlenoHumeralis - .r0_static)')';
                }; // LArticulatioGlenoHumeralis

                AnyFolder LEpicondylusLateralisHumeri = 
                {
                  AnyVec3 sRel_static = (.Axes0_static'*(...sLEpicondylusLateralisHumeri - .r0_static)')';
                }; // LEpicondylusLateralisHumeri

                AnyFolder LEpicondylusMedialisHumeri = 
                {
                  AnyVec3 sRel_static = (.Axes0_static'*(...sLEpicondylusMedialisHumeri - .r0_static)')';
                }; // LEpicondylusMedialisHumeri
                
                AnyFolder LBrachiumSegmentHelpMarker = 
                {
                  AnyVec3 sRel_static = (.Axes0_static'*(...sLBrachiumSegmentHelpMarker - .r0_static)')';
                }; // LAcromion

                AnyFolder LTuberculumMajus =
                {
                  AnyVec3 sRel_static = (.Axes0_static'*(...sLTuberculumMajus - .r0_static)')';
                }; // LTuberculumMajus

                AnyFolder &HumerusRef = .....FullModel.Left.Arm.Seg.Humerus;

                HumerusRef = 
                {
                    // Reference node sRel = transposed unit vectors (Axes0_satic') * (static marker - origin of the LCS)
                    AnyRefNode LArticulatioGlenoHumeralis = 
                    {
                      sRel = ..LArticulatioGlenoHumeralis.sRel_static;
                      AnyDrawNode drw = 
                      {
                        RGB = {1, 1, 0}; 
                        ScaleXYZ = 0.5*{0.025, 0.025, 0.025};
                      }; // drw
                    }; // LArticulatioGlenoHumeralis

                    AnyRefNode LEpicondylusLateralisHumeri = 
                    {
                      sRel = ..LEpicondylusLateralisHumeri.sRel_static;
                      AnyDrawNode drw = 
                      {
                        RGB = {1, 1, 0}; 
                        ScaleXYZ = 0.5*{0.025, 0.025, 0.025};
                      }; // drw
                    }; // LEpicondylusLateralisHumeri

                    AnyRefNode LEpicondylusMedialisHumeri = 
                    {
                      sRel = ..LEpicondylusMedialisHumeri.sRel_static;
                      AnyDrawNode drw = 
                      {
                        RGB = {1, 1, 0}; 
                        ScaleXYZ = 0.5*{0.025, 0.025, 0.025};
                      }; // drw
                    }; // LEpicondylusMedialisHumeri

                    AnyRefNode LBrachiumSegmentHelpMarker = 
                    {
                      sRel = ..LBrachiumSegmentHelpMarker.sRel_static;
                      AnyDrawNode drw = 
                      {
                        RGB = {1, 1, 0}; 
                        ScaleXYZ = 0.5*{0.025, 0.025, 0.025};
                      }; // drw
                    }; // LAcromion

                    AnyRefNode LTuberculumMajus = 
                    {
                      sRel = ..LTuberculumMajus.sRel_static;
                      AnyDrawNode drw = 
                      {
                        RGB = {1, 1, 0}; 
                        ScaleXYZ = 0.5*{0.025, 0.025, 0.025};
                      }; // drw
                    }; // LTuberculumMajus

                    AnyRefNode LArticulatioCubiti =
                    {
                      sRel = ..LArticulatioCubiti.sRel_static;
                      AnyDrawNode drw = 
                      {
                        RGB = {1, 1, 0}; 
                        ScaleXYZ = 0.5*{0.025, 0.025, 0.025};
                      }; // drw node              
                    }; // LArticulatioCubiti node

                }; // HumerusRef
              }; // Humerus
            #endif // IncludeShoulder | IncludeElbow

            #if IncludeElbow == 1 | IncludeWrist == 1
              AnyFolder Forearm =
              {
                // Origin of lower arm at US: Most caudal–medial point on the ulnar styloid (US):
                // Processus styloideus ulnae   
                AnyVec3 r0_static = ..sLProcessusStyloideusUlnae;
                
                // u1 = y-axis = ISB recommendations: The line connecting US and the midpoint between EL and EM,
                // pointing proximally. (Wu, van der Helm et al. 2005)
                AnyVec3 u1_tmp =  0.5*(..sLEpicondylusMedialisHumeri + ..sLEpicondylusLateralisHumeri) - r0_static;  

                // u2 = x-axis = ISB recommendations: The line perpendicular to the plane through US,RS, 
                // and the midpoint between EL and EM, pointing forward.
                AnyVec3 u2_tmp = cross(u1_tmp, (..sLProcessusStyloideusRadii - r0_static));
                
                //u3 = z-axis = ISB recommendations: The common line perpendicular to the
                //x_axis and y_axis, pointing to the right           
                AnyVec3 u3 = cross(u2_tmp,u1_tmp);
                AnyVec3 u2 = cross(u1_tmp, u3);
                AnyVec3 u1 = cross(u3, u2);
                
                // Rotation Matrix AnyMat33 = {x, y, z} thats why {u2, u1, u3} 
                AnyMat33 Axes0_static = {u2/vnorm(u2),u1/vnorm(u1), u3/vnorm(u3)}';

                CreateLoadPositions InitialPos( DynamicPos = UseDanamicLoadPosition ) = 
                {
                  iCluster1 = 
                  { 
                    Main.ModelSetup.DynamicDataSet.Points.Markers._LPROCESSUSSTYLOIDEUSULNAE_.PosInterpol.Data[0][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._LPROCESSUSSTYLOIDEUSULNAE_.PosInterpol.Data[1][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._LPROCESSUSSTYLOIDEUSULNAE_.PosInterpol.Data[2][.....FirstFrameDynamic]
                  }; // dynamic iCluster1

                  iCluster2 = 
                  { 
                    Main.ModelSetup.DynamicDataSet.Points.Markers._LPROCESSUSSTYLOIDEUSRADII_.PosInterpol.Data[0][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._LPROCESSUSSTYLOIDEUSRADII_.PosInterpol.Data[1][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._LPROCESSUSSTYLOIDEUSRADII_.PosInterpol.Data[2][.....FirstFrameDynamic]
                  }; // dynamic iCluster2

                  iCluster3 = 
                  {
                    Main.ModelSetup.DynamicDataSet.Points.Markers._LANTEBRACHIUMSEGMENTHELPMARKER_.PosInterpol.Data[0][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._LANTEBRACHIUMSEGMENTHELPMARKER_.PosInterpol.Data[1][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._LANTEBRACHIUMSEGMENTHELPMARKER_.PosInterpol.Data[2][.....FirstFrameDynamic]
                  }; // dynamic iCluster3

                  // static sCluster 1-3
                  sCluster1 = ...sLProcessusStyloideusUlnae;
                  sCluster2 = ...sLProcessusStyloideusRadii;
                  sCluster3 = ...sLAntebrachiumSegmentHelpMarker;
                };  // CreateLoadPositions InitialPos

                AnyFolder LProcessusStyloideusUlnae = 
                {
                  AnyVec3 sRel_static= (.Axes0_static'*(...sLProcessusStyloideusUlnae - .r0_static)')';
                }; // LProcessusStyloideusUlnae

                AnyFolder LProcessusStyloideusRadii = 
                {
                  AnyVec3 sRel_static= (.Axes0_static'*(...sLProcessusStyloideusRadii - .r0_static)')';
                }; // LProcessusStyloideusRadii
                
                AnyFolder LAntebrachiumSegmentHelpMarker = 
                {
                  AnyVec3 sRel_static= (.Axes0_static'*(...sLAntebrachiumSegmentHelpMarker - .r0_static)')';
                }; // LAntebrachiumSegmentHelpMarker

                AnyFolder LArticulatioCubiti =
                {
                  AnyVec3 sRel_static = (.Axes0_static'*(...sLArticulatioCubiti - .r0_static)')';
                }; // LArticulatioCubiti

                AnyFolder LArticulatioRadioCarpalis =
                {
                  AnyVec3 sRel_static = (.Axes0_static'*(...sLArticulatioRadioCarpalis - .r0_static)')';
                }; // LArticulatioRadioCarpalis

                AnyFolder &ForearmRef = .....FullModel.Left.Arm.Seg.Forearm;
                ForearmRef = 
                {
                    // Reference node sRel = transposed unit vectors (Axes0_satic') * (static marker - origin of the LCS)
                    AnyRefNode LProcessusStyloideusUlnae = 
                    {
                      sRel = ..LProcessusStyloideusUlnae.sRel_static;
                      AnyDrawNode drw = 
                      {
                        RGB = {1, 1, 0}; 
                        ScaleXYZ = 0.5*{0.025, 0.025, 0.025};
                      }; // drw node
                    }; // LProcessusStyloideusUlnae
                    
                    AnyRefNode LProcessusStyloideusRadii = 
                    {
                      sRel = ..LProcessusStyloideusRadii.sRel_static;
                      AnyDrawNode drw = 
                      {
                        RGB = {1, 1, 0}; 
                        ScaleXYZ = 0.5*{0.025, 0.025, 0.025};
                      }; // drw node
                    }; // LProcessusStyloideusRadii

                    AnyRefNode LAntebrachiumSegmentHelpMarker = 
                    {
                      sRel = ..LAntebrachiumSegmentHelpMarker.sRel_static;
                      AnyDrawNode drw = 
                      {
                        RGB = {1, 1, 0}; 
                        ScaleXYZ = 0.5*{0.025, 0.025, 0.025};
                      }; // drw node
                    }; // LAntebrachiumSegmentHelpMarker

                    AnyRefNode LArticulatioCubiti =
                      {
                        sRel = ..LArticulatioCubiti.sRel_static;
                        AnyDrawNode drw = 
                        {
                          RGB = {1, 1, 0}; 
                          ScaleXYZ = 0.5*{0.025, 0.025, 0.025};
                        }; // drw node              
                      }; // LArticulatioCubiti node

                      AnyRefNode LArticulatioRadioCarpalis = 
                      {
                        sRel = ..LArticulatioRadioCarpalis.sRel_static;
                        AnyDrawNode drw = 
                        {
                          RGB = {1, 1, 0}; 
                          ScaleXYZ = 0.5*{0.025, 0.025, 0.025};
                        }; // drw node
                      }; // LArticulatioRadioCarpalis node
                }; // ForearmRef            
              }; // Forearm
            #endif // IncludeElbow == 1 | IncludeWrist == 1

            #if IncludeWrist == 1
              AnyFolder Hand = 
              {
                // ArticulatioRadioCapalis
                // Origin of the Hand (hand)  
                AnyVec3 r0_static = ..sLManusSegmentHelpMarker;
                
                // u1 = y-axis
                AnyVec3 u1_tmp =  0.5*(..sLProcessusStyloideusRadii + ..sLProcessusStyloideusUlnae) - r0_static;  

                // u3 = z-axis
                AnyVec3 u3_tmp = ..sLProcessusStyloideusRadii - ..sLProcessusStyloideusUlnae;

                // u2 = x-axis
                AnyVec3 u2 = cross(u1_tmp,u3_tmp);
                AnyVec3 u3 = cross(u2,u1_tmp);
                AnyVec3 u1 = cross(u3, u2);
                              
                // Rotation Matrix AnyMat33 = {x, y, z} thats why {u2, u1, u3} 
                AnyMat33 Axes0_static = {u2/vnorm(u2),u1/vnorm(u1), u3/vnorm(u3)}'; 

                CreateLoadPositions InitialPos( DynamicPos = UseDanamicLoadPosition ) = 
                {
                  iCluster1 = 
                  { 
                    Main.ModelSetup.DynamicDataSet.Points.Markers._LPROCESSUSSTYLOIDEUSULNAE_.PosInterpol.Data[0][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._LPROCESSUSSTYLOIDEUSULNAE_.PosInterpol.Data[1][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._LPROCESSUSSTYLOIDEUSULNAE_.PosInterpol.Data[2][.....FirstFrameDynamic]
                  }; // dynamic iCluster 1
                  
                  iCluster2 = 
                  { 
                    Main.ModelSetup.DynamicDataSet.Points.Markers._LPROCESSUSSTYLOIDEUSRADII_.PosInterpol.Data[0][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._LPROCESSUSSTYLOIDEUSRADII_.PosInterpol.Data[1][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._LPROCESSUSSTYLOIDEUSRADII_.PosInterpol.Data[2][.....FirstFrameDynamic]
                  }; // dynamic iCluster 2
                  
                  iCluster3 = 
                  { 
                    Main.ModelSetup.DynamicDataSet.Points.Markers._LMANUSSEGMENTHELPMARKER_.PosInterpol.Data[0][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._LMANUSSEGMENTHELPMARKER_.PosInterpol.Data[1][.....FirstFrameDynamic],
                    Main.ModelSetup.DynamicDataSet.Points.Markers._LMANUSSEGMENTHELPMARKER_.PosInterpol.Data[2][.....FirstFrameDynamic]
                  }; // dynamic iCluster 3
                  
                  // static sCluster 1-3
                  sCluster1 = ...sLProcessusStyloideusUlnae;
                  sCluster2 = ...sLProcessusStyloideusRadii;
                  sCluster3 = ...sLManusSegmentHelpMarker;
                }; // CreateLoadPositions InitialPos

                AnyFolder LProcessusStyloideusUlnae = 
                {
                  // unclear
                  // Vector with 3 components = transposed unit vectors (Axes0_satic') * (static marker - origin of the LCS)
                  AnyVec3 sRel_static = (.Axes0_static'*(...sLProcessusStyloideusUlnae - .r0_static)')';
                }; // LProcessusStyloideusUlnae

                AnyFolder LProcessusStyloideusRadii = 
                {
                  AnyVec3 sRel_static = (.Axes0_static'*(...sLProcessusStyloideusRadii - .r0_static)')';
                }; // LProcessusStyloideusRadii

                AnyFolder LManusSegmentHelpMarker = 
                {
                  AnyVec3 sRel_static = (.Axes0_static'*(...sLManusSegmentHelpMarker - .r0_static)')';
                }; // LManusSegmentHelpMarker

                AnyFolder LArticulatioRadioCarpalis =
                {
                  AnyVec3 sRel_static = (.Axes0_static'*(...sLArticulatioRadioCarpalis - .r0_static)')';
                }; // LArticulatioRadioCarpalis

                AnyFolder &HandRef = .....FullModel.Left.Arm.Seg.Hand;
                HandRef = 
                {
                    // Reference node sRel = transposed unit vectors (Axes0_satic') * (static marker - origin of the LCS)
                    AnyRefNode LProcessusStyloideusUlnae = 
                    {
                      sRel = ..LProcessusStyloideusUlnae.sRel_static;
                      AnyDrawNode drw = 
                      {
                        RGB = {1, 1, 0}; 
                        ScaleXYZ = 0.5*{0.025, 0.025, 0.025};
                      }; // drw node
                    }; // LProcessusStyloideusUlnae node

                    AnyRefNode LProcessusStyloideusRadii = 
                    {
                      sRel = ..LProcessusStyloideusRadii.sRel_static;
                      AnyDrawNode drw = 
                      {
                        RGB = {1, 1, 0}; 
                        ScaleXYZ = 0.5*{0.025, 0.025, 0.025};
                      }; // drw node
                    }; // LProcessusStyloideusRadii node

                    AnyRefNode LManusSegmentHelpMarker = 
                    {
                      sRel = ..LManusSegmentHelpMarker.sRel_static;
                      AnyDrawNode drw = 
                      {
                        RGB = {1, 1, 0}; 
                        ScaleXYZ = 0.5*{0.025, 0.025, 0.025};
                      }; // drw node

                    }; // LManusSegmentHelpMarker node

                    AnyRefNode LArticulatioRadioCarpalis = 
                    {
                      sRel = ..LArticulatioRadioCarpalis.sRel_static;
                      AnyDrawNode drw = 
                      {
                        RGB = {1, 1, 0}; 
                        ScaleXYZ = 0.5*{0.025, 0.025, 0.025};
                      }; // drw node
                    }; // LArticulatioRadioCarpalis node
                }; // HandRef
              }; // Hand
            #endif // IncludeWrist
          }; // Arm
        #endif // IncludeArm
      }; // Left
    #endif // Include Left

    AnyFolder Trunk = 
    {
      //// Initial positions of static markers /////
      AnyVec3 sRAsis = 
      { 
        Main.ModelSetup.StaticData.Points.Markers._RASIS_.PosInterpol.Data[0][..FirstFrameStatic],
        Main.ModelSetup.StaticData.Points.Markers._RASIS_.PosInterpol.Data[1][..FirstFrameStatic],
        Main.ModelSetup.StaticData.Points.Markers._RASIS_.PosInterpol.Data[2][..FirstFrameStatic]
      }; // sRAsis

      AnyVec3 sLAsis =          
      { 
        Main.ModelSetup.StaticData.Points.Markers._LASIS_.PosInterpol.Data[0][..FirstFrameStatic],
        Main.ModelSetup.StaticData.Points.Markers._LASIS_.PosInterpol.Data[1][..FirstFrameStatic],
        Main.ModelSetup.StaticData.Points.Markers._LASIS_.PosInterpol.Data[2][..FirstFrameStatic]
      }; // sLAsis
      
      // Exclude by GSU Cologne
      #if GSUFullBodyMarkerSet == 0
        AnyVec3 sSacral =         
        { 
          Main.ModelSetup.StaticData.Points.Markers.Sacral.PosInterpol.Data[0][..FirstFrameStatic],
          Main.ModelSetup.StaticData.Points.Markers.Sacral.PosInterpol.Data[1][..FirstFrameStatic],
          Main.ModelSetup.StaticData.Points.Markers.Sacral.PosInterpol.Data[2][..FirstFrameStatic]
        };
      #endif // GSUFullBodyMarkerSet

      AnyVec3 sRPsis =
      { 
        Main.ModelSetup.StaticData.Points.Markers._RPSIS_.PosInterpol.Data[0][..FirstFrameStatic],
        Main.ModelSetup.StaticData.Points.Markers._RPSIS_.PosInterpol.Data[1][..FirstFrameStatic],
        Main.ModelSetup.StaticData.Points.Markers._RPSIS_.PosInterpol.Data[2][..FirstFrameStatic]
      }; // sRPsis

      AnyVec3 sLPsis =
      { 
        Main.ModelSetup.StaticData.Points.Markers._LPSIS_.PosInterpol.Data[0][..FirstFrameStatic],
        Main.ModelSetup.StaticData.Points.Markers._LPSIS_.PosInterpol.Data[1][..FirstFrameStatic],
        Main.ModelSetup.StaticData.Points.Markers._LPSIS_.PosInterpol.Data[2][..FirstFrameStatic]
      }; // sLPsis

      AnyVec3 sPSIMidPoint = 0.5 * (sRPsis + sLPsis);
      
      // Exclude by GSU Cologne
      #if GSUFullBodyMarkerSet == 0
        AnyVec3 sPREF1 =          
        { 
          Main.ModelSetup.StaticData.Points.Markers.PREF1.PosInterpol.Data[0][..FirstFrameStatic],
          Main.ModelSetup.StaticData.Points.Markers.PREF1.PosInterpol.Data[1][..FirstFrameStatic],
          Main.ModelSetup.StaticData.Points.Markers.PREF1.PosInterpol.Data[2][..FirstFrameStatic]
        }; // sPREF1

        AnyVec3 sPREF2 =          
        { 
          Main.ModelSetup.StaticData.Points.Markers.PREF2.PosInterpol.Data[0][..FirstFrameStatic],
          Main.ModelSetup.StaticData.Points.Markers.PREF2.PosInterpol.Data[1][..FirstFrameStatic],
          Main.ModelSetup.StaticData.Points.Markers.PREF2.PosInterpol.Data[2][..FirstFrameStatic]
        }; // sPREF2
      #endif // GSUFullBodyMarkerSet
      
      AnyVec3 sRAnkleMedial =   
      { 
        Main.ModelSetup.StaticData.Points.Markers._RANKLEMEDIAL_.PosInterpol.Data[0][..FirstFrameStatic],
        Main.ModelSetup.StaticData.Points.Markers._RANKLEMEDIAL_.PosInterpol.Data[1][..FirstFrameStatic],
        Main.ModelSetup.StaticData.Points.Markers._RANKLEMEDIAL_.PosInterpol.Data[2][..FirstFrameStatic]
      }; // sRAnkleMedial

      AnyVec3 sLAnkleMedial =   
      { 
        Main.ModelSetup.StaticData.Points.Markers._LANKLEMEDIAL_.PosInterpol.Data[0][..FirstFrameStatic],
        Main.ModelSetup.StaticData.Points.Markers._LANKLEMEDIAL_.PosInterpol.Data[1][..FirstFrameStatic],
        Main.ModelSetup.StaticData.Points.Markers._LANKLEMEDIAL_.PosInterpol.Data[2][..FirstFrameStatic]
      }; // sLAnkleMedial

      #if IncludeSpine == 1  

        // Deepest point of Incisura Jugularis (suprasternal notch)
        AnyVec3 sIncisuraJugularis = 
        { 
          Main.ModelSetup.StaticData.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[0][..FirstFrameStatic],
          Main.ModelSetup.StaticData.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[1][..FirstFrameStatic],
          Main.ModelSetup.StaticData.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[2][..FirstFrameStatic]
        }; // sIncisuraJugularis

        // Processus Xiphoideus, most caudal point on the sternum
        AnyVec3 sProcessusXiphoideus =  
        { 
          Main.ModelSetup.StaticData.Points.Markers._PROCESSUSXIPHOIDEUS_.PosInterpol.Data[0][..FirstFrameStatic],
          Main.ModelSetup.StaticData.Points.Markers._PROCESSUSXIPHOIDEUS_.PosInterpol.Data[1][..FirstFrameStatic],
          Main.ModelSetup.StaticData.Points.Markers._PROCESSUSXIPHOIDEUS_.PosInterpol.Data[2][..FirstFrameStatic]
        }; // sProcessusXiphoideus
        AnyVec3 sC7 =             
        { 
          Main.ModelSetup.StaticData.Points.Markers._C7_.PosInterpol.Data[0][..FirstFrameStatic],
          Main.ModelSetup.StaticData.Points.Markers._C7_.PosInterpol.Data[1][..FirstFrameStatic],
          Main.ModelSetup.StaticData.Points.Markers._C7_.PosInterpol.Data[2][..FirstFrameStatic]
        }; // sC7

        AnyVec3 sT6 = 
        { 
          Main.ModelSetup.StaticData.Points.Markers._T6_.PosInterpol.Data[0][..FirstFrameStatic],
          Main.ModelSetup.StaticData.Points.Markers._T6_.PosInterpol.Data[1][..FirstFrameStatic],
          Main.ModelSetup.StaticData.Points.Markers._T6_.PosInterpol.Data[2][..FirstFrameStatic]
        }; // sT6
        
        #if USE_CALCULATED_T8 == 1
          // T8 must be calculated from T6 and T10 (0.5 * (T6 + T10))
          AnyVec3 sT8 =             
          {
            (0.5* ( Main.ModelSetup.StaticData.Points.Markers._T6_.PosInterpol.Data[0][..FirstFrameStatic]
                  + Main.ModelSetup.StaticData.Points.Markers._T10_.PosInterpol.Data[0][..FirstFrameStatic])),
            (0.5* ( Main.ModelSetup.StaticData.Points.Markers._T6_.PosInterpol.Data[1][..FirstFrameStatic]
                  + Main.ModelSetup.StaticData.Points.Markers._T10_.PosInterpol.Data[1][..FirstFrameStatic])),
            (0.5* ( Main.ModelSetup.StaticData.Points.Markers._T6_.PosInterpol.Data[2][..FirstFrameStatic]
                  + Main.ModelSetup.StaticData.Points.Markers._T10_.PosInterpol.Data[2][..FirstFrameStatic]))          
          }; // sT8
        #else
          AnyVec3 sT8 =             
          { 
          Main.ModelSetup.StaticData.Points.Markers._T8_.PosInterpol.Data[0][..FirstFrameStatic],
          Main.ModelSetup.StaticData.Points.Markers._T8_.PosInterpol.Data[1][..FirstFrameStatic],
          Main.ModelSetup.StaticData.Points.Markers._T8_.PosInterpol.Data[2][..FirstFrameStatic]
          }; // sT8
        #endif


        AnyVec3 sT10 =            
        { 
          Main.ModelSetup.StaticData.Points.Markers._T10_.PosInterpol.Data[0][..FirstFrameStatic],
          Main.ModelSetup.StaticData.Points.Markers._T10_.PosInterpol.Data[1][..FirstFrameStatic],
          Main.ModelSetup.StaticData.Points.Markers._T10_.PosInterpol.Data[2][..FirstFrameStatic]
        }; // sT10

        AnyVec3 sL1 =             
        { 
          Main.ModelSetup.StaticData.Points.Markers._L1_.PosInterpol.Data[0][..FirstFrameStatic],
          Main.ModelSetup.StaticData.Points.Markers._L1_.PosInterpol.Data[1][..FirstFrameStatic],
          Main.ModelSetup.StaticData.Points.Markers._L1_.PosInterpol.Data[2][..FirstFrameStatic]
        }; // sL1

        AnyVec3 sL3 =             
        { 
          Main.ModelSetup.StaticData.Points.Markers._L3_.PosInterpol.Data[0][..FirstFrameStatic],
          Main.ModelSetup.StaticData.Points.Markers._L3_.PosInterpol.Data[1][..FirstFrameStatic],
          Main.ModelSetup.StaticData.Points.Markers._L3_.PosInterpol.Data[2][..FirstFrameStatic]
        }; // sL3

        AnyVec3 sL5 =             
        { 
          Main.ModelSetup.StaticData.Points.Markers._L5_.PosInterpol.Data[0][..FirstFrameStatic],
          Main.ModelSetup.StaticData.Points.Markers._L5_.PosInterpol.Data[1][..FirstFrameStatic],
          Main.ModelSetup.StaticData.Points.Markers._L5_.PosInterpol.Data[2][..FirstFrameStatic]
        }; // sL5

        #if USE_BOLSELLIPS == 1
/* needs ThL marker
          AnyVec3 sThL = 
          { 
            Main.ModelSetup.StaticData.Points.Markers._ThL_.PosInterpol.Data[0][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._ThL_.PosInterpol.Data[1][..FirstFrameStatic],
            Main.ModelSetup.StaticData.Points.Markers._ThL_.PosInterpol.Data[2][..FirstFrameStatic]
          }; // sThL
*/
        #endif // USE_BOLSELLIPS
      #endif // IncludeSpine

      //// End of Initial positions of static markers /////
                          
      // Pelvis axis and positions
      AnyFolder Pelvis = 
      {
        AnyVec3 r0_static = 0.5*(.sRAsis+.sLAsis);
        AnyVec3 sSacral = 0.5*(.sRPsis + .sLPsis);
        AnyVec3 u3 = (.sRAsis - .sLAsis );
        AnyVec3 u2 = cross( sSacral - .sLAsis, u3);
        AnyVec3 u1 = cross(u2,u3);
        AnyMat33 Axes0_static = {u1/vnorm(u1),u2/vnorm(u2), u3/vnorm(u3)}';  

        #if IncludeHip == 1
          CreateLoadPositions InitialPos( DynamicPos = UseDanamicLoadPosition ) = {
              iCluster1 = { Main.ModelSetup.DynamicDataSet.Points.Markers._RASIS_.PosInterpol.Data[0][....FirstFrameDynamic],
                            Main.ModelSetup.DynamicDataSet.Points.Markers._RASIS_.PosInterpol.Data[1][....FirstFrameDynamic],
                            Main.ModelSetup.DynamicDataSet.Points.Markers._RASIS_.PosInterpol.Data[2][....FirstFrameDynamic]};
              iCluster2 = { Main.ModelSetup.DynamicDataSet.Points.Markers._LASIS_.PosInterpol.Data[0][....FirstFrameDynamic],
                            Main.ModelSetup.DynamicDataSet.Points.Markers._LASIS_.PosInterpol.Data[1][....FirstFrameDynamic],
                            Main.ModelSetup.DynamicDataSet.Points.Markers._LASIS_.PosInterpol.Data[2][....FirstFrameDynamic]};
              iCluster3 = { Main.ModelSetup.DynamicDataSet.Points.Markers._RPSIS_.PosInterpol.Data[0][....FirstFrameDynamic],
                            Main.ModelSetup.DynamicDataSet.Points.Markers._RPSIS_.PosInterpol.Data[1][....FirstFrameDynamic],
                            Main.ModelSetup.DynamicDataSet.Points.Markers._RPSIS_.PosInterpol.Data[2][....FirstFrameDynamic]};
              sCluster1 = ..sRAsis;
              sCluster2 = ..sLAsis;
              sCluster3 = ..sRPsis;
          };  
        #endif
        
        AnyFolder RHipJoint = {
          AnyVec3 sRel_static= (.Axes0_static'*(..RHipJoint.r0_static - .r0_static)')';
        };
        
        AnyFolder LHipJoint = {
          AnyVec3 sRel_static= (.Axes0_static'*(..LHipJoint.r0_static - .r0_static)')';
        };
        
        AnyFolder RAsis = 
        {
          AnyVec3 sRel_static= (.Axes0_static'*(..sRAsis-.r0_static)')';
        };
        AnyFolder LAsis = 
        {
          AnyVec3 sRel_static= (.Axes0_static'*(..sLAsis-.r0_static)')';
        };
        AnyFolder Sacral = 
        {
          AnyVec3 sRel_static= (.Axes0_static'*(.sSacral-.r0_static)')';
        };
        AnyFolder RPsis = 
        {
          AnyVec3 sRel_static= (.Axes0_static'*(..sRPsis-.r0_static)')';
        };
        AnyFolder PSIMidPoint = 
        {
          AnyVec3 sRel_static= (.Axes0_static'*(..sPSIMidPoint-.r0_static)')';
        };
        AnyFolder LPsis = 
        {
          AnyVec3 sRel_static= (.Axes0_static'*(..sLPsis-.r0_static)')';
        };

        /* Exclude by Lund et al. 2015
        AnyFolder PREF1 = 
        {
          AnyVec3 sRel_static= (.Axes0_static'*(..sPREF1-.r0_static)')';
        };
        AnyFolder PREF2 = 
        {
          AnyVec3 sRel_static= (.Axes0_static'*(..sPREF2-.r0_static)')';
        };
        */

        #if IncludeHip == 1
          AnyFolder &PelvisRef = ....FullModel.Trunk.Seg.Pelvis;
          
          PelvisRef = 
          {
            AnyRefNode RAsis = {
              sRel = ..RAsis.sRel_static;
            };
            AnyRefNode LAsis = {
              sRel = ..LAsis.sRel_static;
            };
            AnyRefNode Sacral = {
              sRel = ..Sacral.sRel_static;
            };
            AnyRefNode RPsis = {
              sRel = ..RPsis.sRel_static;
            };
            AnyRefNode PSIMidPoint = {
              sRel = ..PSIMidPoint.sRel_static;
            };
            AnyRefNode LPsis = {
              sRel = ..LPsis.sRel_static;
            };

            /* Exlude by Lund et al. 2015
            AnyRefNode PREF1 = {
              sRel = ..PREF1.sRel_static;
            };
            AnyRefNode PREF2 = {
              sRel = ..PREF2.sRel_static;
            };
            */
          };
        #endif   
      }; // Pelvis

      #if IncludeSpine == 1 
        // Spine axis and positions
        // Upper part of the two segmented spine from C7 to T10
        AnyFolder Spine =
        {
          AnyFolder ThoracicSpine =
          {            
            // Origin of upper spine at C7
            AnyVec3 r0_static = ..sC7;
            
            // u1 = y-axis = pointing cranial (cran/caud)
            AnyVec3 u1_tmp = (r0_static - ..sT10);  
            
            // u2 = x-axis = pointing anterior (ant/post)
            AnyVec3 u2_tmp = (..sIncisuraJugularis - r0_static);
            
            // u3 = z-axis = pointing right (med/lat)
            AnyVec3 u3 = cross(u2_tmp,u1_tmp);
            AnyVec3 u2 = cross(u1_tmp, u3);
            AnyVec3 u1 = cross(u3, u2);
            
            // Rotation Matrix AnyMat33 = {x, y, z} thats why {u2, u1, u3} 
            AnyMat33 Axes0_static = {u2/vnorm(u2),u1/vnorm(u1), u3/vnorm(u3)}';
            
            CreateLoadPositions InitialPos( DynamicPos = UseDanamicLoadPosition ) = 
            {
              iCluster1 = { Main.ModelSetup.DynamicDataSet.Points.Markers._C7_.PosInterpol.Data[0][.....FirstFrameDynamic],
                            Main.ModelSetup.DynamicDataSet.Points.Markers._C7_.PosInterpol.Data[1][.....FirstFrameDynamic],
                            Main.ModelSetup.DynamicDataSet.Points.Markers._C7_.PosInterpol.Data[2][.....FirstFrameDynamic]};
              iCluster2 = { Main.ModelSetup.DynamicDataSet.Points.Markers._T8_.PosInterpol.Data[0][.....FirstFrameDynamic],
                            Main.ModelSetup.DynamicDataSet.Points.Markers._T8_.PosInterpol.Data[1][.....FirstFrameDynamic],
                            Main.ModelSetup.DynamicDataSet.Points.Markers._T8_.PosInterpol.Data[2][.....FirstFrameDynamic]};
              iCluster3 = { Main.ModelSetup.DynamicDataSet.Points.Markers._T10_.PosInterpol.Data[0][.....FirstFrameDynamic],
                            Main.ModelSetup.DynamicDataSet.Points.Markers._T10_.PosInterpol.Data[1][.....FirstFrameDynamic],
                            Main.ModelSetup.DynamicDataSet.Points.Markers._T10_.PosInterpol.Data[2][.....FirstFrameDynamic]};
              sCluster1 = ...sC7;
              sCluster2 = ...sT8;
              sCluster3 = ...sT10;
            };
            
            /*
            AnyFolder LowerUpperSpineFacetJoint = 
            {
              AnyVec3 sRel_static= (.Axes0_static'*(..LowerUpperSpineFacetJoint.r0_static - .r0_static)')';
            };
            /*
            AnyFolder LHipJoint = {
              AnyVec3 sRel_static= (.Axes0_static'*(..LHipJoint.r0_static - .r0_static)')';
            };
            */
            AnyFolder C7 = 
            {
              AnyVec3 sRel_static= (.Axes0_static'*(...sC7 - .r0_static)')';
            };

            AnyFolder T6 = 
            {
              AnyVec3 sRel_static= (.Axes0_static'*(...sT6 - .r0_static)')';
            };

            AnyFolder T8 = 
            {
              AnyVec3 sRel_static= (.Axes0_static'*(...sT8 - .r0_static)')';
            };

            AnyFolder T10 = 
            {
              AnyVec3 sRel_static= (.Axes0_static'*(...sT10 - .r0_static)')';
            };
            AnyFolder IncisuraJugularis = 
            {
              AnyVec3 sRel_static= (.Axes0_static'*(...sIncisuraJugularis-.r0_static)')';
            };
            AnyFolder ProcessusXiphoideus = 
            {
              AnyVec3 sRel_static= (.Axes0_static'*(...sProcessusXiphoideus-.r0_static)')';
            };
              
            AnyFolder &ThoracicSpineRef = .....FullModel.Trunk.Seg.Spine.ThoracicSpine;
      
            ThoracicSpineRef = 
            {
              AnyRefNode C7 = {
                sRel = ..C7.sRel_static;
                AnyDrawNode drw = {RGB = {1, 1, 0}; ScaleXYZ = 0.5*{0.025, 0.025, 0.025};};

              };

              AnyRefNode T6 = {
                sRel = ..T6.sRel_static;
                AnyDrawNode drw = {RGB = {1, 1, 0}; ScaleXYZ = 0.5*{0.025, 0.025, 0.025};};

              };

              AnyRefNode T8 = {
                sRel = ..T8.sRel_static;
                AnyDrawNode drw = {RGB = {1, 1, 0}; ScaleXYZ = 0.5*{0.025, 0.025, 0.025};};

              };
              
              AnyRefNode T10 = {
                sRel = ..T10.sRel_static;
                AnyDrawNode drw = {RGB = {1, 1, 0}; ScaleXYZ = 0.5*{0.025, 0.025, 0.025};};

              };
              AnyRefNode IncisuraJugularis = {
                sRel = ..IncisuraJugularis.sRel_static;
                AnyDrawNode drw = {RGB = {1, 1, 0}; ScaleXYZ = 0.5*{0.025, 0.025, 0.025};};

              };
              AnyRefNode ProcessusXiphoideus = {
                sRel = ..ProcessusXiphoideus.sRel_static;
                AnyDrawNode drw = {RGB = {1, 1, 0}; ScaleXYZ = 0.5*{0.025, 0.025, 0.025};};

              };
            
            }; // ThoracicSpineRef 
          }; // ThoracicSpine
        

          // Lower part of the two segmented spine from T10 to Sacrum
          AnyFolder LumbarSpine =
          {
            // Origin of lower spine midpoint between RPsis and LPsis
            AnyVec3 r0_static = 0.5*(..sRPsis+..sLPsis);

            // u1 = y-axis = pointing cranial (cran/caud)
            AnyVec3 u1_tmp = (..sL1 - r0_static);
            // u3 = z-axis = pointing right (med/lat)
            AnyVec3 u3_tmp = (..sRPsis - r0_static);
            // u2 = x-axis = pointing anterior (ant/post)
            AnyVec3 u2 = cross(u1_tmp, u3_tmp);
            AnyVec3 u1 = cross(u3_tmp, u2);
            AnyVec3 u3 = cross(u2, u1);
            
            // Rotation Matrix AnyMat33 = {x, y, z} thats why {u2, u1, u3} 
            AnyMat33 Axes0_static = {u2/vnorm(u2),u1/vnorm(u1), u3/vnorm(u3)}';
            
            CreateLoadPositions InitialPos( DynamicPos = UseDanamicLoadPosition ) = 
            {
                iCluster1 = { Main.ModelSetup.DynamicDataSet.Points.Markers._RPSIS_.PosInterpol.Data[0][.....FirstFrameDynamic],
                              Main.ModelSetup.DynamicDataSet.Points.Markers._RPSIS_.PosInterpol.Data[1][.....FirstFrameDynamic],
                              Main.ModelSetup.DynamicDataSet.Points.Markers._RPSIS_.PosInterpol.Data[2][.....FirstFrameDynamic]};
                iCluster2 = { Main.ModelSetup.DynamicDataSet.Points.Markers._LPSIS_.PosInterpol.Data[0][.....FirstFrameDynamic],
                              Main.ModelSetup.DynamicDataSet.Points.Markers._LPSIS_.PosInterpol.Data[1][.....FirstFrameDynamic],
                              Main.ModelSetup.DynamicDataSet.Points.Markers._LPSIS_.PosInterpol.Data[2][.....FirstFrameDynamic]};
                iCluster3 = { Main.ModelSetup.DynamicDataSet.Points.Markers._L1_.PosInterpol.Data[0][.....FirstFrameDynamic],
                              Main.ModelSetup.DynamicDataSet.Points.Markers._L1_.PosInterpol.Data[1][.....FirstFrameDynamic],
                              Main.ModelSetup.DynamicDataSet.Points.Markers._L1_.PosInterpol.Data[2][.....FirstFrameDynamic]};
                sCluster1 = ...sRPsis;
                sCluster2 = ...sLPsis;
                sCluster3 = ...sL1;
            };
            
            //AnyFolder LumbosacralJoint = {
            //AnyVec3 sRel_static= (.Axes0_static'*(..LumbosacralJoint.r0_static - .r0_static)')';
            //};
            AnyFolder T10 = 
            {
              AnyVec3 sRel_static= (.Axes0_static'*(...sT10 - .r0_static)')';
            };
            AnyFolder L1 = 
            {
              AnyVec3 sRel_static= (.Axes0_static'*(...sL1 - .r0_static)')';
            };
            AnyFolder L3 = 
            {
              AnyVec3 sRel_static= (.Axes0_static'*(...sL3 - .r0_static)')';
            };
            AnyFolder L5 = 
            {
              AnyVec3 sRel_static= (.Axes0_static'*(...sL5 - .r0_static)')';
            };
            
            AnyFolder &LumbarSpineRef = .....FullModel.Trunk.Seg.Spine.LumbarSpine;
      
            LumbarSpineRef = 
            {
              AnyRefNode T10 = {
                sRel = ..T10.sRel_static;
                AnyDrawNode drw = {RGB = {1, 1, 0}; ScaleXYZ = 0.5*{0.025, 0.025, 0.025};};
              };
              AnyRefNode L1 = {
                sRel = ..L1.sRel_static;
                AnyDrawNode drw = {RGB = {1, 1, 0}; ScaleXYZ = 0.5*{0.025, 0.025, 0.025};};
              };
              AnyRefNode L3 = {
                sRel = ..L3.sRel_static;
                AnyDrawNode drw = {RGB = {1, 1, 0}; ScaleXYZ = 0.5*{0.025, 0.025, 0.025};};
              };
              AnyRefNode L5 = {
                sRel = ..L5.sRel_static;
                AnyDrawNode drw = {RGB = {1, 1, 0}; ScaleXYZ = 0.5*{0.025, 0.025, 0.025};};
              };
            }; // LumbarSpineRef
          }; // LumbarSpine
        }; // Spine

        AnyFolder Thorax = 
        {
          // The origin of the thorax coincident with the Incisura Jugularis,
          // the deepest point of Incisura Jugularis (suprasternal notch). (Wu, van der Helm et al. 2005)  
          AnyVec3 r0_static = .sIncisuraJugularis;

          // u1 = y-axis = The line connecting the midpoint between PX and T8 
          // and the midpoint between IJ and C7, pointing upward. (Wu, van der Helm et al. 2005)
          AnyVec3 u1_tmp = (0.5 * (.sC7 + .sIncisuraJugularis)) - (0.5 * (.sT8 + .sProcessusXiphoideus));
          
          // u3 = z-axis = The line perpendicular to the plane formed by IJ, C7, 
          // and the midpoint between PX and T8, pointing to the right. (Wu, van der Helm et al. 2005)
          AnyVec3 u3_tmp = cross((r0_static - (0.5 * (.sC7 + .sIncisuraJugularis))), 
                                 (r0_static - (0.5 * (.sT8 + .sProcessusXiphoideus))));

          // u2 = x-axis = The common line perpendicular to the z- and y-axis, pointing forwards. (Wu, van der Helm et al. 2005)
          AnyVec3 u2 = cross(u1_tmp, u3_tmp);

          AnyVec3 u3 = cross(u2, u1_tmp);
          AnyVec3 u1 = cross(u3, u2);

          // Rotation Matrix AnyMat33 = {x, y, z} thats why {u2, u1, u3} 
          AnyMat33 Axes0_static = {u2/vnorm(u2),u1/vnorm(u1), u3/vnorm(u3)}';

          CreateLoadPositions InitialPos( DynamicPos = UseDanamicLoadPosition ) = 
          {
            iCluster1 = 
            {
              Main.ModelSetup.DynamicDataSet.Points.Markers._C7_.PosInterpol.Data[0][....FirstFrameDynamic],
              Main.ModelSetup.DynamicDataSet.Points.Markers._C7_.PosInterpol.Data[1][....FirstFrameDynamic],
              Main.ModelSetup.DynamicDataSet.Points.Markers._C7_.PosInterpol.Data[2][....FirstFrameDynamic]
            };
            
            iCluster2 = 
            { 
              Main.ModelSetup.DynamicDataSet.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[0][....FirstFrameDynamic],
              Main.ModelSetup.DynamicDataSet.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[1][....FirstFrameDynamic],
              Main.ModelSetup.DynamicDataSet.Points.Markers._INCISURAJUGULARIS_.PosInterpol.Data[2][....FirstFrameDynamic]
            };
            
            iCluster3 = 
            { 
              #if USE_CALCULATED_T8 == 1
                (0.5* ( Main.ModelSetup.DynamicDataSet.Points.Markers._T6_.PosInterpol.Data[0][....FirstFrameDynamic]
                      + Main.ModelSetup.DynamicDataSet.Points.Markers._T10_.PosInterpol.Data[0][....FirstFrameDynamic])),
                (0.5* ( Main.ModelSetup.DynamicDataSet.Points.Markers._T6_.PosInterpol.Data[1][....FirstFrameDynamic]
                      + Main.ModelSetup.DynamicDataSet.Points.Markers._T10_.PosInterpol.Data[1][....FirstFrameDynamic])),
                (0.5* ( Main.ModelSetup.DynamicDataSet.Points.Markers._T6_.PosInterpol.Data[2][....FirstFrameDynamic]
                      + Main.ModelSetup.DynamicDataSet.Points.Markers._T10_.PosInterpol.Data[2][....FirstFrameDynamic]))
              #else
                Main.ModelSetup.DynamicDataSet.Points.Markers._T8_.PosInterpol.Data[0][....FirstFrameDynamic],
                Main.ModelSetup.DynamicDataSet.Points.Markers._T8_.PosInterpol.Data[1][....FirstFrameDynamic],
                Main.ModelSetup.DynamicDataSet.Points.Markers._T8_.PosInterpol.Data[2][....FirstFrameDynamic]
              #endif
            };

            sCluster1 = ..sC7;
            sCluster2 = ..sIncisuraJugularis;
            sCluster3 = ..sT8;
          };

          AnyFolder C7 = 
          {
            AnyVec3 sRel_static= (.Axes0_static'*(..sC7 - .r0_static)')';
          }; // C/

          AnyFolder T6 = 
          {
            AnyVec3 sRel_static= (.Axes0_static'*(..sT6 - .r0_static)')';
          }; // T6

          AnyFolder T8 = 
          {
            AnyVec3 sRel_static= (.Axes0_static'*(..sT8 - .r0_static)')';
          }; // T8

          AnyFolder T10 = 
          {
            AnyVec3 sRel_static= (.Axes0_static'*(..sT10 - .r0_static)')';
          }; // T10

          AnyFolder IncisuraJugularis = 
          {
            AnyVec3 sRel_static= (.Axes0_static'*(..sIncisuraJugularis-.r0_static)')';
          }; // IncisuraJugularis

          AnyFolder ProcessusXiphoideus = 
          {
            AnyVec3 sRel_static= (.Axes0_static'*(..sProcessusXiphoideus-.r0_static)')';
          }; // ProcessusXiphoideus

          AnyFolder RAngulusInferior = 
          {
            AnyVec3 sRel_static = (.Axes0_static'*(...Right.sRAngulusInferior - .r0_static)')';
          }; // RAngulusInferior

          AnyFolder RAngulusAcromii = 
          {
            AnyVec3 sRel_static = (.Axes0_static'*(...Right.sRAngulusAcromii - .r0_static)')';
          }; // RAngulusAcromii

          AnyFolder LAngulusInferior = 
          {
            AnyVec3 sRel_static = (.Axes0_static'*(...Left.sLAngulusInferior - .r0_static)')';
          }; // LAngulusInferior

          AnyFolder LAngulusAcromii = 
          {
            AnyVec3 sRel_static = (.Axes0_static'*(...Left.sLAngulusAcromii - .r0_static)')';
          }; // LAngulusAcromii

          #if USE_BOLSELLIPS == 1
/* needs ThL marker
            AnyFolder ThL =
            {
              AnyVec3 sRel_static = (.Axes0_static'*(..sThL - .r0_static)')';
            }; // ThL
*/
            // Thorax width, height and depth of the cadavar obtained from
            // Klein Breteler, M. D., Spoor, C. W., & van der Helm, F. C. T. (1999). 
            // Measuring muscle and joint geometry parameters of a shoulder for modeling purposes. 
            // Journal of Biomechanics, 32(11), 1191–1197. 
            // https://doi.org/10.1016/S0021-9290(99)
            // published through the Online resource 1 table in
            // Bolsterlee, B., Veeger, H. E. J., & van der Helm, F. C. T. (2014). 
            // Modelling clavicular and scapular kinematics: From measurement to simulation. 
            // Medical & Biological Engineering & Computing, 52(3), 283–291. 
            // https://doi.org/10.1007/s11517-013-1065-2
            // values in [cm] local reference system coincidence with IJ_cadaver 

            AnyVec3 ThoraxEllipsoidAxesCadaver = {9.56 * 0.01, 21.17 * 0.01, 14.46 * 0.01};

            // Thorax width = ThL z-coordinate of the cadaver (ThL_cadaver = {-6.71, -21.02, 14.20} in [cm])
            AnyVar ThoraxEllipsoidWidthCadaver = 14.20 * 0.01;
            
            // Thorax Height = distance between midpoint IJ-C7 and midpoint PX-T8
            AnyVar MidpointIJC7CadaverX =  (0.5*(0 * 0.01 + (-12.42 * 0.01)));
            AnyVar MidpointIJC7CadaverY =  (0.5*(0 * 0.01 + (5.41 * 0.01)));
            AnyVar MidpointIJC7CadaverZ =  (0.5*(0 * 0.01 + (0 * 0.01)));
            AnyVec3 MidpointIJC7Cadaver = {MidpointIJC7CadaverX, MidpointIJC7CadaverY, MidpointIJC7CadaverZ};

            AnyVar MidpointPXT8CadaverX =  (0.5*(3.19 * 0.01 + (-15.61 * 0.01)));
            AnyVar MidpointPXT8CadaverY =  (0.5*(-13.27 * 0.01 + (-17.15 * 0.01)));
            AnyVar MidpointPXT8CadaverZ =  (0.5*(-0.98 * 0.01 + (0.98 * 0.01)));
            AnyVec3 MidpointPXT8Cadaver = {MidpointPXT8CadaverX, MidpointPXT8CadaverY, MidpointPXT8CadaverZ};
            
            AnyVar ThoraxEllipsoidHeightCadaver = sqrt(
                                                          (MidpointIJC7Cadaver[0] - MidpointPXT8Cadaver[0])^2
                                                        + (MidpointIJC7Cadaver[1] - MidpointPXT8Cadaver[1])^2
                                                        + (MidpointIJC7Cadaver[2] - MidpointPXT8Cadaver[2])^2
                                                      );

            // Thorax Depth = distance between midpont IJ-PX and midpoint C7-T8
            AnyVar MidpointIJPXCadaverX =  (0.5*(0 * 0.01 + (3.19 * 0.01)));
            AnyVar MidpointIJPXCadaverY =  (0.5*(0 * 0.01 + (-13.27 * 0.01)));
            AnyVar MidpointIJPXCadaverZ =  (0.5*(0 * 0.01 + (-0.98 * 0.01)));
            AnyVec3 MidpointIJPXCadaver = {MidpointIJPXCadaverX, MidpointIJPXCadaverY, MidpointIJPXCadaverZ};

            AnyVar MidpointC7T8CadaverX =  (0.5*(-12.42 * 0.01 + (-15.61 * 0.01)));
            AnyVar MidpointC7T8CadaverY =  (0.5*(5.41 * 0.01 + (-17.15 * 0.01)));
            AnyVar MidpointC7T8CadaverZ =  (0.5*(0 * 0.01 + (0.98 * 0.01)));
            AnyVec3 MidpointC7T8Cadaver = {MidpointC7T8CadaverX, MidpointC7T8CadaverY, MidpointC7T8CadaverZ};
            
            AnyVar ThoraxEllipsoidDepthCadaver = sqrt(
                                                          (MidpointIJPXCadaver[0] - MidpointC7T8Cadaver[0])^2
                                                        + (MidpointIJPXCadaver[1] - MidpointC7T8Cadaver[1])^2
                                                        + (MidpointIJPXCadaver[2] - MidpointC7T8Cadaver[2])^2
                                                      );
 /*needs ThL marker
            AnyVar ThoraxEllipsoidWidthSubject = ThL.sRel_static[2];
 */    
            // just for Test set ThoraxEllipsoidWidthSubject to 14.0
            AnyVar ThoraxEllipsoidWidthSubject = 14.0 * 0.01;       
            // Thorax Height = distance between midpoint IJ-C7 and midpoint PX-T8
            AnyVar MidpointIJC7SubjectX =  (0.5*(IncisuraJugularis.sRel_static[0] + (C7.sRel_static[0])));
            AnyVar MidpointIJC7SubjectY =  (0.5*(IncisuraJugularis.sRel_static[1] + (C7.sRel_static[1])));
            AnyVar MidpointIJC7SubjectZ =  (0.5*(IncisuraJugularis.sRel_static[2] + (C7.sRel_static[2])));
            AnyVec3 MidpointIJC7Subject = {MidpointIJC7SubjectX, MidpointIJC7SubjectY, MidpointIJC7SubjectZ};

            AnyVar MidpointPXT8SubjectX =  (0.5*(ProcessusXiphoideus.sRel_static[0] + (T8.sRel_static[0])));
            AnyVar MidpointPXT8SubjectY =  (0.5*(ProcessusXiphoideus.sRel_static[1] + (T8.sRel_static[1])));
            AnyVar MidpointPXT8SubjectZ =  (0.5*(ProcessusXiphoideus.sRel_static[2] + (T8.sRel_static[2])));
            AnyVec3 MidpointPXT8Subject = {MidpointPXT8SubjectX, MidpointPXT8SubjectY, MidpointPXT8SubjectZ};
            
            AnyVar ThoraxEllipsoidHeightSubject = sqrt(
                                                          (MidpointIJC7Subject[0] - MidpointPXT8Subject[0])^2
                                                        + (MidpointIJC7Subject[1] - MidpointPXT8Subject[1])^2
                                                        + (MidpointIJC7Subject[2] - MidpointPXT8Subject[2])^2
                                                      );
            
            AnyVar MidpointIJPXSubjectX =  (0.5*(IncisuraJugularis.sRel_static[0] + (ProcessusXiphoideus.sRel_static[0])));
            AnyVar MidpointIJPXSubjectY =  (0.5*(IncisuraJugularis.sRel_static[1] + (ProcessusXiphoideus.sRel_static[1])));
            AnyVar MidpointIJPXSubjectZ =  (0.5*(IncisuraJugularis.sRel_static[2] + (ProcessusXiphoideus.sRel_static[2])));
            AnyVec3 MidpointIJPXSubject = {MidpointIJPXSubjectX, MidpointIJPXSubjectY, MidpointIJPXSubjectZ};

            AnyVar MidpointC7T8SubjectX =  (0.5*(C7.sRel_static[0] + (T8.sRel_static[0])));
            AnyVar MidpointC7T8SubjectY =  (0.5*(C7.sRel_static[1] + (T8.sRel_static[1])));
            AnyVar MidpointC7T8SubjectZ =  (0.5*(C7.sRel_static[2] + (T8.sRel_static[2])));
            AnyVec3 MidpointC7T8Subject = {MidpointC7T8SubjectX, MidpointC7T8SubjectY, MidpointC7T8SubjectZ};
            
            AnyVar ThoraxEllipsoidDepthSubject = sqrt(
                                                          (MidpointIJPXSubject[0] - MidpointC7T8Subject[0])^2
                                                        + (MidpointIJPXSubject[1] - MidpointC7T8Subject[1])^2
                                                        + (MidpointIJPXSubject[2] - MidpointC7T8Subject[2])^2
                                                     );
            // x-axis depth
            AnyVar ThoraxEllipsoidDepthRatio = (ThoraxEllipsoidDepthSubject/ThoraxEllipsoidDepthCadaver);
            // y-axis height
            AnyVar ThoraxEllipsoidHeightRatio = (ThoraxEllipsoidHeightSubject/ThoraxEllipsoidHeightCadaver);
            // z-axis width
            AnyVar ThoraxEllipsoidWidthRatio = (ThoraxEllipsoidWidthSubject/ThoraxEllipsoidWidthCadaver);
            
            AnyVec3 ThoraxEllipsoidAxesSubject = 
            {
              ThoraxEllipsoidAxesCadaver[0] * ThoraxEllipsoidDepthRatio,
              ThoraxEllipsoidAxesCadaver[1] * ThoraxEllipsoidHeightRatio,
              ThoraxEllipsoidAxesCadaver[2] * ThoraxEllipsoidWidthRatio
            };

            

            AnyFolder RThoraxEllipsoidCenter =
            {
              AnyVar RThoraxEllipsoidCenterZ = (0.5*(.C7.sRel_static[2] + .T8.sRel_static[2]));               
              AnyVar RThoraxEllipsoidCenterX = (0.5*(.C7.sRel_static[0] + .T8.sRel_static[0]));          
              AnyVar RThoraxEllipsoidCenterY = (0.5*(.C7.sRel_static[1] + .T8.sRel_static[1]));              
              AnyVec3 sRel_static = {RThoraxEllipsoidCenterX, RThoraxEllipsoidCenterY,RThoraxEllipsoidCenterZ};
            }; // RThoraxEllipsoidCenter

            AnyFolder LThoraxEllipsoidCenter =
            {
              AnyVar LThoraxEllipsoidCenterZ = (0.5*(.C7.sRel_static[2] + .T8.sRel_static[2]));
              AnyVar LThoraxEllipsoidCenterX = (0.5*(.C7.sRel_static[0] + .T8.sRel_static[0]));     
              AnyVar LThoraxEllipsoidCenterY = (0.5*(.C7.sRel_static[1] + .T8.sRel_static[1])); 
              
              AnyVec3 sRel_static = {LThoraxEllipsoidCenterX, LThoraxEllipsoidCenterY, LThoraxEllipsoidCenterZ};
            }; // LThoraxEllipsoidCenter

            #if USE_SCAPTHOELLIPS == 1
  
            #endif // USE_SCAPTHOELLIPS

          #else // 6-DOF shoulder model     
              
          #endif // USE_BOLSELLIPS

          #if IncludeShoulder == 1
            
            
            #if IncludeRight == 1
              AnyFolder RArticulatioSternoClavicularis = 
              {
                // Estimation of the Sternoclavicular (SC) joint center from the Incisura jugularis (IJ) 
                // based on the values for a 57 year old right muscular male shoulder with an estimated 
                // body length of 168 cm provided by Klein Breteler, M. D., Spoor, C. W., & van der Helm, F. C.T. (1999)
                // Values are provided in centimetre [cm], AnyBody model requires [m] (*0.01). 
                // The publication defines the x-axis of the global coordinate system (GCS)  
                // as medio-lateral axis pointing to the right, y-axis pointing cranially
                // and z-axis pointing backward with IJ as orgin. In this model the LCS of the thorax is defined
                // in accordance to the ISB recommendations with the origin at IJ, x-axis pointing forward, y-axis pointing
                // cranially and the medio-lateral z-axis pointing to the right. Values from Klein Breteler et. al. were
                // transfered as follows: x-axis(thorax) = (z-axis(Klein Bretler GCS)*-1); y-axis(thorax) = y-axis(Klein Bretler GCS)
                // and z-axis(thorax) = x-axis (Klein Bretler GCS) for the right sterno clavicular joint
                AnyVar SCx = .IncisuraJugularis.sRel_static[0] + 2.45 * - 0.01;
                AnyVar SCy = .IncisuraJugularis.sRel_static[1] - 0.80 * 0.01;
                AnyVar SCz = .IncisuraJugularis.sRel_static[2] + 2.25 * 0.01;


                AnyVec3 sRArticulatioSternoClavicularis = {SCx, SCy, SCz};

                AnyVec3 sRel_static = sRArticulatioSternoClavicularis;
                AnyVec3 sRel_gcs = ((.Axes0_static * (sRArticulatioSternoClavicularis)')' + .r0_static);

                //AnyVec3 sRel_static = (.Axes0_static'*(...Right.sRArticulatioSternoClavicularis-.r0_static)')';
              };
            #endif

            #if IncludeLeft == 1
              AnyFolder LArticulatioSternoClavicularis = 
              {
                // Estimation of the Sternoclavicular (SC) joint center from the Incisura jugularis (IJ) 
                // based on the values for a 57 year old right muscular male shoulder with an estimated 
                // body length of 168 cm provided by Klein Breteler, M. D., Spoor, C. W., & van der Helm, F. C.T. (1999)
                // Values are provided in centimetre [cm], AnyBody model requires [m] (*0.01). 
                // The publication defines the x-axis of the global coordinate system (GCS)  
                // as medio-lateral axis pointing to the right, y-axis pointing cranially
                // and z-axis pointing backward with IJ as orgin. In this model the LCS of the thorax is defined
                // in accordance to the ISB recommendations with the origin at IJ, x-axis pointing forward, y-axis pointing
                // cranially and the medio-lateral z-axis pointing to the right. Values from Klein Breteler et. al. were
                // transfered as follows: x-axis(thorax) = (z-axis(Klein Bretler GCS)*-1); 
                // y-axis(thorax) = y-axis(Klein Bretler GCS) and z-axis(thorax) = (x-axis (Klein Bretler GCS)*-1)
                // for the left sterno clavicular joint
                AnyVar SCx = .IncisuraJugularis.sRel_static[0] + 2.45 * - 0.01;
                AnyVar SCy = .IncisuraJugularis.sRel_static[1] - 0.80 * 0.01;
                AnyVar SCz = .IncisuraJugularis.sRel_static[2] + 2.25 * - 0.01;

                AnyVec3 sLArticulatioSternoClavicularis = {SCx, SCy, SCz};

                AnyVec3 sRel_static = sLArticulatioSternoClavicularis;
                AnyVec3 sRel_gcs = ((.Axes0_static * (sLArticulatioSternoClavicularis)')' + .r0_static);
                //AnyVec3 sRel_static= (.Axes0_static'*(...Left.sLArticulatioSternoClavicularis-.r0_static)')';
              };
            #endif // IncludeLeft
          #endif // IncludeShoulder
         
          AnyFolder &ThoraxRef = ....FullModel.Trunk.Seg.Thorax;
          
          // Thorax local reference system
          ThoraxRef = 
          {
            // Reference nodes of the thorax local reference system
            AnyRefNode C7 = 
            {
              sRel = ..C7.sRel_static;
              AnyDrawNode drw = {RGB = {1, 1, 0}; ScaleXYZ = 0.5*{0.025, 0.025, 0.025};};
            }; // C7

            AnyRefNode T6 = 
            {
              sRel = ..T6.sRel_static;
              AnyDrawNode drw = {RGB = {1, 1, 0}; ScaleXYZ = 0.5*{0.025, 0.025, 0.025};};
            }; // T6

            AnyRefNode T8 = 
            {
              sRel = ..T8.sRel_static;
              AnyDrawNode drw = {RGB = {1, 1, 0}; ScaleXYZ = 0.5*{0.025, 0.025, 0.025};};
            }; // T8

            AnyRefNode T10 = 
            {
              sRel = ..T10.sRel_static;
              AnyDrawNode drw = {RGB = {1, 1, 0}; ScaleXYZ = 0.5*{0.025, 0.025, 0.025};};
            }; // T10

            AnyRefNode IncisuraJugularis = 
            {
              sRel = ..IncisuraJugularis.sRel_static;
              AnyDrawNode drw = {RGB = {1, 1, 0}; ScaleXYZ = 0.5*{0.025, 0.025, 0.025};};
            }; // IncisuraJugularis

            AnyRefNode ProcessusXiphoideus = 
            {
              sRel = ..ProcessusXiphoideus.sRel_static;
              AnyDrawNode drw = {RGB = {1, 1, 0}; ScaleXYZ = 0.5*{0.025, 0.025, 0.025};};
            }; // ProcessusXiphoideus

 /*needs ThL marker
            AnyRefNode ThL = 
            {
              sRel = ..ThL.sRel_static;
              AnyDrawNode drw = {RGB = {1, 1, 0}; ScaleXYZ = 0.5*{0.025, 0.025, 0.025};};
            }; // ThL
*/
            AnyRefNode RAngulusInferior = 
            {
              sRel = ..RAngulusInferior.sRel_static;
              AnyDrawNode drw = {RGB = {1, 1, 0}; ScaleXYZ = 0.5*{0.025, 0.025, 0.025};};
            }; // RAngulusInferior 

            AnyRefNode RAngulusAcromii = 
            {
              sRel = ..RAngulusAcromii.sRel_static;
              AnyDrawNode drw = {RGB = {1, 1, 0}; ScaleXYZ = 0.5*{0.025, 0.025, 0.025};};
            }; // RAngulusAcromii 

             AnyRefNode LAngulusInferior = 
            {
              sRel = ..LAngulusInferior.sRel_static;
              AnyDrawNode drw = {RGB = {1, 1, 0}; ScaleXYZ = 0.5*{0.025, 0.025, 0.025};};
            }; // LAngulusInferior 

            AnyRefNode LAngulusAcromii = 
            {
              sRel = ..LAngulusAcromii.sRel_static;
              AnyDrawNode drw = {RGB = {1, 1, 0}; ScaleXYZ = 0.5*{0.025, 0.025, 0.025};};
            }; // LAngulusAcromii

            #if IncludeShoulder

              #if IncludeRight == 1
            
                AnyRefNode RArticulatioSternoClavicularis = 
                {
                  sRel = ..RArticulatioSternoClavicularis.sRel_static;
                  AnyDrawNode drw = {RGB = {1, 1, 0}; ScaleXYZ = 0.5*{0.025, 0.025, 0.025};};
                }; // RArticulatioSternoClavicularis

                // Representation of the rib-cage using a thorax-sized ellipsoid (BolsEllips) concepted by
                // Bolsterlee, B., Veeger, H. E. J., & van der Helm, F. C. T. (2014). Modelling clavicular 
                // and scapular kinematics: From measurement to simulation. Medical & Biological Engineering 
                // & Computing, 52(3), 283–291. 
                // https://doi.org/10.1007/s11517-013-1065-2
                // This representation requires a additional ThL marjer which is defined as the most laterally
                // palpable part of the thorax
                #if USE_BOLSELLIPS == 1
                  AnyVec3 RThoraxEllipsoidRadii = {.ThoraxEllipsoidAxesSubject[0], .ThoraxEllipsoidAxesSubject[1], .ThoraxEllipsoidAxesSubject[2]};

                
                  // Representation of the rib-cage using the thorax-sized ellipsoid (ScapThoEllips) suggested by
                  // Michaud, B., Duprey, S., & Begon, M. (2017). Scapular kinematic reconstruction – 
                  // segmental optimization, multibody optimization with open-loop or closed-loop chains: 
                  // which one should be preferred? International Biomechanics, 4(2), 86–94. 
                  // https://doi.org/10.1080/23335432.2017.1405741
                  // This representation requires an initial guess obtained from the BolsEllips ellipsoid
                  #if USE_SCAPTHOELLIPS == 1 
                  #endif // USE_SCAPTHOELLIPS
                #else // Else should be 6-DOF shoulder model

                #endif // USE_BOLSELLIPS
                
                AnyRefNode REllipNode = 
                  {
                    sRel = ..RThoraxEllipsoidCenter.sRel_static;
                    AnyDrawNode drw = 
                    {
                      RGB = {0.85, 0, 0}; 
                      ScaleXYZ = 0.5*{0.025, 0.025, 0.025};
                      Opacity = 0.3;
                    }; // drw
                    AnySurfEllipsoid REllipsoid = 
                    {
                      Radius = {..RThoraxEllipsoidRadii[0], ..RThoraxEllipsoidRadii[1], ..RThoraxEllipsoidRadii[2]};
                      AnyDrawParamSurf drw = 
                      {
                        RGB = {0.85,0,0};
                        Opacity = 0.1;
                      }; // drw
                    }; // REllipsoid
                  }; // REllipNode
              #endif // IncludeRight
              
              #if IncludeLeft == 1
                AnyRefNode LArticulatioSternoClavicularis = 
                {
                  sRel = ..LArticulatioSternoClavicularis.sRel_static;
                  AnyDrawNode drw = 
                  {
                    RGB = {1, 1, 0}; 
                    ScaleXYZ = 0.5*{0.025, 0.025, 0.025};
                  };
                }; // LArticulatioSternoClavicularis
              #if USE_BOLSELLIPS == 1
                  AnyVec3 LThoraxEllipsoidRadii = {.ThoraxEllipsoidAxesSubject[0], .ThoraxEllipsoidAxesSubject[1], .ThoraxEllipsoidAxesSubject[2]};

                #if USE_SCAPTHOELLIPS == 1           
                #endif // USE_SCAPTHOELLIPS
              #else // 6 DOF model
              #endif // USE_BOLSELLIPS

                AnyRefNode LEllipNode = 
                {
                  sRel = ..LThoraxEllipsoidCenter.sRel_static;
                  AnyDrawNode drw = 
                  {
                    RGB = {0.85, 0, 0}; 
                    ScaleXYZ = 0.5*{0.025, 0.025, 0.025};
                    Opacity = 0.3;
                  }; // drw

                  AnySurfEllipsoid LEllipsoid = 
                  {
                    Radius = {..LThoraxEllipsoidRadii[0], ..LThoraxEllipsoidRadii[1], ..LThoraxEllipsoidRadii[2]};
                    AnyDrawParamSurf drw = 
                    {
                      RGB = {0.85,0,0};
                      Opacity = 0.1;
                    }; // drw
                  }; // LEllipsoid
                }; // LEllipNode

              #endif // IncludeLeft
            #endif // IncludeShoulder
          }; // ThoraxRef 
        }; // Thorax

      #endif // IncludeSpine

      AnyFolder RHipJoint = 
      {
        // This calculates the global coordinates of the hip joint.      
        AnyVec3 r0_static = .Pelvis.r0_static+(.Pelvis.Axes0_static*AnatomicalHipPosHarrington ')';

        
        // Initial position of hip joint based on anatomical landmarks as described by 
        // Alexander L. Bell 1990 "A comparison of the accuracy of several hip center location prediction methods"
        // Anatomical Hip postition by Bell  (1989)
        AnyFloat AsisDist = vnorm(.sRAsis -.sLAsis);
        AnyVec3 AnatomicalHipPosBell = {-0.22*AsisDist, -0.30*AsisDist, 0.36*AsisDist};//+Main.SubjectSpecificData.Anthropometrics.Pelvis.RightHipCenterOffset;
        
        // Calculation of the anatomical hip joint position used by Vicons Plug-in gait system. Based on the work by Davis       
        AnyVar Lleg = vnorm(.sRAsis - .sRAnkleMedial);
        AnyVar MeanLleg = (vnorm(.sLAsis - .sLAnkleMedial)+vnorm(.sRAsis - .sRAnkleMedial))/2;      
        
        AnyVar xdis = (0.1288*Lleg)-0.04856;
        AnyVar rmarker = 0.007;
        AnyVar beta = pi*18/180;
        AnyVar theta = pi*28.4/180;
        AnyVar sign = 1;
        AnyVar C = 0.115*MeanLleg-0.0153;
        AnyVar XHD = (-xdis-rmarker)*cos(beta)+C*cos(theta)*sin(beta);
        AnyVar YHD = sign*(C*sin(theta)-AsisDist/2);
        AnyVar ZHD = (-xdis-rmarker)*sin(beta)-C*cos(theta)*cos(beta);

        AnyVec3 AnatomicalHipPosDavis = {XHD,ZHD,-YHD};//+Main.SubjectSpecificData.Anthropometrics.Pelvis.RightHipCenterOffset;
        
        AnyVar PelvisDepth = vnorm((.sRAsis+.sLAsis)/2-(.sLPsis+.sRPsis)/2);

        AnyVar XHH = (-0.24*PelvisDepth*1000-9.9)/1000;
        AnyVar YHH = (-0.16*AsisDist*1000-0.04*Lleg*1000-7.1)/1000;
        AnyVar ZHH = (0.28*PelvisDepth*1000+0.16*AsisDist*1000+7.9)/1000;


        AnyVec3 AnatomicalHipPosHarrington = {XHH,YHH,ZHH};   
      }; // RHipJoint

      AnyFolder LHipJoint = 
      {
        // This calculates the global coordinates of the hip joint.      
        AnyVec3 r0_static = .Pelvis.r0_static+(.Pelvis.Axes0_static*AnatomicalHipPosHarrington ')';
        
        
        // Anatomical Hip postition by Bell  (1989)
        AnyFloat AsisDist = vnorm(.sRAsis -.sLAsis);
        AnyVec3 AnatomicalHipPosBell = {-0.22*AsisDist, -0.30*AsisDist, -0.36*AsisDist};//+Main.SubjectSpecificData.Anthropometrics.Pelvis.LeftHipCenterOffset;
        
        // Calculation of the anatomical hip joint position used by Vicons Plug-in gait system. Based on the work by Davis       
        AnyVar Lleg = vnorm(.sLAsis - .sLAnkleMedial);
        AnyVar MeanLleg = (vnorm(.sLAsis - .sLAnkleMedial)+vnorm(.sRAsis - .sRAnkleMedial))/2;      
        
        AnyVar xdis = (0.1288*Lleg)-0.04856;
        AnyVar rmarker = 0.007;
        AnyVar beta = pi*18/180;
        AnyVar theta = pi*28.4/180;
        AnyVar sign = 1;
        AnyVar C = 0.115*MeanLleg-0.0153;
        AnyVar XH = (-xdis-rmarker)*cos(beta)+C*cos(theta)*sin(beta);
        AnyVar YH = sign*(C*sin(theta)-AsisDist/2);
        AnyVar ZH = (-xdis-rmarker)*sin(beta)-C*cos(theta)*cos(beta);

        AnyVec3 AnatomicalHipPosDavis = {XH,ZH,YH};//+Main.SubjectSpecificData.Anthropometrics.Pelvis.LeftHipCenterOffset;

        AnyVar PelvisDepth = vnorm((.sRAsis+.sLAsis)/2-(.sLPsis+.sRPsis)/2);

        AnyVar XHH = (-0.24*PelvisDepth*1000-9.9)/1000;
        AnyVar YHH = (-0.16*AsisDist*1000-0.04*Lleg*1000-7.1)/1000;
        AnyVar ZHH = (0.28*PelvisDepth*1000+0.16*AsisDist*1000+7.9)/1000;

        AnyVec3 AnatomicalHipPosHarrington = {XHH,YHH,-ZHH};      
      }; // LHipJoint    
    }; // Trunk
  }; // Posture
}; // StickFigure